// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudamqp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to invoke actions on a specific node.
//
// Only available for dedicated subscription plans.
//
// ## Example Usage
//
// <details>
//
//	<summary>
//	  <b>
//	    <i>Already know the node identifier (e.g. from state file)</i>
//	  </b>
//	</summary>
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// New recipient to receieve notifications
//			_, err := cloudamqp.NewNodeActions(ctx, "nodeAction", &cloudamqp.NodeActionsArgs{
//				InstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),
//				NodeName:   pulumi.String("<node name>"),
//				Action:     pulumi.String("restart"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
// </details>
//
// Using data source `getNodes` to restart RabbitMQ on all nodes.</br>
// ***Note: RabbitMQ restart on multiple nodes need to be chained, so one node restart at the time.***
//
// <details>
//
//	<summary>
//	  <b>
//	    <i>Multi node RabbitMQ restart</i>
//	  </b>
//	</summary>
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			listNodes, err := cloudamqp.GetNodes(ctx, &cloudamqp.GetNodesArgs{
//				InstanceId: cloudamqp_instance.Instance.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			restart01, err := cloudamqp.NewNodeActions(ctx, "restart01", &cloudamqp.NodeActionsArgs{
//				InstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),
//				Action:     pulumi.String("restart"),
//				NodeName:   pulumi.String(listNodes.Nodes[0].Name),
//			})
//			if err != nil {
//				return err
//			}
//			restart02, err := cloudamqp.NewNodeActions(ctx, "restart02", &cloudamqp.NodeActionsArgs{
//				InstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),
//				Action:     pulumi.String("restart"),
//				NodeName:   pulumi.String(listNodes.Nodes[1].Name),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				restart01,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = cloudamqp.NewNodeActions(ctx, "restart03", &cloudamqp.NodeActionsArgs{
//				InstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),
//				Action:     pulumi.String("restart"),
//				NodeName:   pulumi.String(listNodes.Nodes[2].Name),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				restart01,
//				restart02,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
// </details>
//
// <details>
//
//	<summary>
//	  <b>
//	    <i>Combine log level configuration change with multi node RabbitMQ restart</i>
//	  </b>
//	</summary>
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			listNodes, err := cloudamqp.GetNodes(ctx, &cloudamqp.GetNodesArgs{
//				InstanceId: cloudamqp_instance.Instance.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			rabbitmqConfig, err := cloudamqp.NewRabbitConfiguration(ctx, "rabbitmqConfig", &cloudamqp.RabbitConfigurationArgs{
//				InstanceId:       pulumi.Any(cloudamqp_instance.Instance.Id),
//				LogExchangeLevel: pulumi.String("info"),
//			})
//			if err != nil {
//				return err
//			}
//			restart01, err := cloudamqp.NewNodeActions(ctx, "restart01", &cloudamqp.NodeActionsArgs{
//				InstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),
//				Action:     pulumi.String("restart"),
//				NodeName:   pulumi.String(listNodes.Nodes[0].Name),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				rabbitmqConfig,
//			}))
//			if err != nil {
//				return err
//			}
//			restart02, err := cloudamqp.NewNodeActions(ctx, "restart02", &cloudamqp.NodeActionsArgs{
//				InstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),
//				Action:     pulumi.String("restart"),
//				NodeName:   pulumi.String(listNodes.Nodes[1].Name),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				rabbitmqConfig,
//				restart01,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = cloudamqp.NewNodeActions(ctx, "restart03", &cloudamqp.NodeActionsArgs{
//				InstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),
//				Action:     pulumi.String("restart"),
//				NodeName:   pulumi.String(listNodes.Nodes[2].Name),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				rabbitmqConfig,
//				restart01,
//				restart02,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
// </details>
//
// ## Action reference
//
// Valid options for action.
//
// | Action       | Info                               |
// |--------------|------------------------------------|
// | start        | Start RabbitMQ                     |
// | stop         | Stop RabbitMQ                      |
// | restart      | Restart RabbitMQ                   |
// | reboot       | Reboot the node                    |
// | mgmt.restart | Restart the RabbitMQ mgmt interace |
//
// ## Dependency
//
// This resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id` and node name.
//
// ## Import
//
// This resource cannot be imported.
type NodeActions struct {
	pulumi.CustomResourceState

	// The action to invoke on the node.
	Action pulumi.StringOutput `pulumi:"action"`
	// The CloudAMQP instance ID.
	InstanceId pulumi.IntOutput `pulumi:"instanceId"`
	// The node name, e.g `green-guinea-pig-01`.
	NodeName pulumi.StringOutput `pulumi:"nodeName"`
	// If the node is running.
	Running pulumi.BoolOutput `pulumi:"running"`
}

// NewNodeActions registers a new resource with the given unique name, arguments, and options.
func NewNodeActions(ctx *pulumi.Context,
	name string, args *NodeActionsArgs, opts ...pulumi.ResourceOption) (*NodeActions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.NodeName == nil {
		return nil, errors.New("invalid value for required argument 'NodeName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NodeActions
	err := ctx.RegisterResource("cloudamqp:index/nodeActions:NodeActions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodeActions gets an existing NodeActions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeActions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeActionsState, opts ...pulumi.ResourceOption) (*NodeActions, error) {
	var resource NodeActions
	err := ctx.ReadResource("cloudamqp:index/nodeActions:NodeActions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodeActions resources.
type nodeActionsState struct {
	// The action to invoke on the node.
	Action *string `pulumi:"action"`
	// The CloudAMQP instance ID.
	InstanceId *int `pulumi:"instanceId"`
	// The node name, e.g `green-guinea-pig-01`.
	NodeName *string `pulumi:"nodeName"`
	// If the node is running.
	Running *bool `pulumi:"running"`
}

type NodeActionsState struct {
	// The action to invoke on the node.
	Action pulumi.StringPtrInput
	// The CloudAMQP instance ID.
	InstanceId pulumi.IntPtrInput
	// The node name, e.g `green-guinea-pig-01`.
	NodeName pulumi.StringPtrInput
	// If the node is running.
	Running pulumi.BoolPtrInput
}

func (NodeActionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeActionsState)(nil)).Elem()
}

type nodeActionsArgs struct {
	// The action to invoke on the node.
	Action string `pulumi:"action"`
	// The CloudAMQP instance ID.
	InstanceId int `pulumi:"instanceId"`
	// The node name, e.g `green-guinea-pig-01`.
	NodeName string `pulumi:"nodeName"`
}

// The set of arguments for constructing a NodeActions resource.
type NodeActionsArgs struct {
	// The action to invoke on the node.
	Action pulumi.StringInput
	// The CloudAMQP instance ID.
	InstanceId pulumi.IntInput
	// The node name, e.g `green-guinea-pig-01`.
	NodeName pulumi.StringInput
}

func (NodeActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeActionsArgs)(nil)).Elem()
}

type NodeActionsInput interface {
	pulumi.Input

	ToNodeActionsOutput() NodeActionsOutput
	ToNodeActionsOutputWithContext(ctx context.Context) NodeActionsOutput
}

func (*NodeActions) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeActions)(nil)).Elem()
}

func (i *NodeActions) ToNodeActionsOutput() NodeActionsOutput {
	return i.ToNodeActionsOutputWithContext(context.Background())
}

func (i *NodeActions) ToNodeActionsOutputWithContext(ctx context.Context) NodeActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeActionsOutput)
}

// NodeActionsArrayInput is an input type that accepts NodeActionsArray and NodeActionsArrayOutput values.
// You can construct a concrete instance of `NodeActionsArrayInput` via:
//
//	NodeActionsArray{ NodeActionsArgs{...} }
type NodeActionsArrayInput interface {
	pulumi.Input

	ToNodeActionsArrayOutput() NodeActionsArrayOutput
	ToNodeActionsArrayOutputWithContext(context.Context) NodeActionsArrayOutput
}

type NodeActionsArray []NodeActionsInput

func (NodeActionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeActions)(nil)).Elem()
}

func (i NodeActionsArray) ToNodeActionsArrayOutput() NodeActionsArrayOutput {
	return i.ToNodeActionsArrayOutputWithContext(context.Background())
}

func (i NodeActionsArray) ToNodeActionsArrayOutputWithContext(ctx context.Context) NodeActionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeActionsArrayOutput)
}

// NodeActionsMapInput is an input type that accepts NodeActionsMap and NodeActionsMapOutput values.
// You can construct a concrete instance of `NodeActionsMapInput` via:
//
//	NodeActionsMap{ "key": NodeActionsArgs{...} }
type NodeActionsMapInput interface {
	pulumi.Input

	ToNodeActionsMapOutput() NodeActionsMapOutput
	ToNodeActionsMapOutputWithContext(context.Context) NodeActionsMapOutput
}

type NodeActionsMap map[string]NodeActionsInput

func (NodeActionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeActions)(nil)).Elem()
}

func (i NodeActionsMap) ToNodeActionsMapOutput() NodeActionsMapOutput {
	return i.ToNodeActionsMapOutputWithContext(context.Background())
}

func (i NodeActionsMap) ToNodeActionsMapOutputWithContext(ctx context.Context) NodeActionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeActionsMapOutput)
}

type NodeActionsOutput struct{ *pulumi.OutputState }

func (NodeActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeActions)(nil)).Elem()
}

func (o NodeActionsOutput) ToNodeActionsOutput() NodeActionsOutput {
	return o
}

func (o NodeActionsOutput) ToNodeActionsOutputWithContext(ctx context.Context) NodeActionsOutput {
	return o
}

// The action to invoke on the node.
func (o NodeActionsOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeActions) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// The CloudAMQP instance ID.
func (o NodeActionsOutput) InstanceId() pulumi.IntOutput {
	return o.ApplyT(func(v *NodeActions) pulumi.IntOutput { return v.InstanceId }).(pulumi.IntOutput)
}

// The node name, e.g `green-guinea-pig-01`.
func (o NodeActionsOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeActions) pulumi.StringOutput { return v.NodeName }).(pulumi.StringOutput)
}

// If the node is running.
func (o NodeActionsOutput) Running() pulumi.BoolOutput {
	return o.ApplyT(func(v *NodeActions) pulumi.BoolOutput { return v.Running }).(pulumi.BoolOutput)
}

type NodeActionsArrayOutput struct{ *pulumi.OutputState }

func (NodeActionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeActions)(nil)).Elem()
}

func (o NodeActionsArrayOutput) ToNodeActionsArrayOutput() NodeActionsArrayOutput {
	return o
}

func (o NodeActionsArrayOutput) ToNodeActionsArrayOutputWithContext(ctx context.Context) NodeActionsArrayOutput {
	return o
}

func (o NodeActionsArrayOutput) Index(i pulumi.IntInput) NodeActionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodeActions {
		return vs[0].([]*NodeActions)[vs[1].(int)]
	}).(NodeActionsOutput)
}

type NodeActionsMapOutput struct{ *pulumi.OutputState }

func (NodeActionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeActions)(nil)).Elem()
}

func (o NodeActionsMapOutput) ToNodeActionsMapOutput() NodeActionsMapOutput {
	return o
}

func (o NodeActionsMapOutput) ToNodeActionsMapOutputWithContext(ctx context.Context) NodeActionsMapOutput {
	return o
}

func (o NodeActionsMapOutput) MapIndex(k pulumi.StringInput) NodeActionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodeActions {
		return vs[0].(map[string]*NodeActions)[vs[1].(string)]
	}).(NodeActionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodeActionsInput)(nil)).Elem(), &NodeActions{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeActionsArrayInput)(nil)).Elem(), NodeActionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeActionsMapInput)(nil)).Elem(), NodeActionsMap{})
	pulumi.RegisterOutputType(NodeActionsOutput{})
	pulumi.RegisterOutputType(NodeActionsArrayOutput{})
	pulumi.RegisterOutputType(NodeActionsMapOutput{})
}
