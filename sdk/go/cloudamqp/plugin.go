// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudamqp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// `cloudamqp_plugin` can be imported using the name argument of the resource together with CloudAMQP
//
// instance identifier (CSV separated). To retrieve list of available community plugins, use
//
// [CloudAMQP API list plugins].
//
// From Terraform v1.5.0, the `import` block can be used to import this resource:
//
// hcl
//
// import {
//
//	to = cloudamqp_plugin.<resource_name>
//
//	id = format("<plugin_name>,%s", cloudamqp_instance.instance.id)
//
// }
//
// Or use Terraform CLI:
//
// ```sh
// $ pulumi import cloudamqp:index/plugin:Plugin <resource_name> <plugin_name>,<instance_id>`
// ```
type Plugin struct {
	pulumi.CustomResourceState

	// The description of the plugin.
	Description pulumi.StringOutput `pulumi:"description"`
	// Enable or disable the plugins.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The CloudAMQP instance ID.
	InstanceId pulumi.IntOutput `pulumi:"instanceId"`
	// The name of the Rabbit MQ plugin.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configurable sleep time (seconds) for retries when requesting
	// information about plugins. Default set to 10 seconds.
	//
	// ***Note:*** Available from [v1.29.0]
	Sleep pulumi.IntPtrOutput `pulumi:"sleep"`
	// Configurable timeout time (seconds) for retries when requesting
	// information about plugins. Default set to 1800 seconds.
	//
	// ***Note:*** Available from [v1.29.0]
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// The version of the plugin.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewPlugin registers a new resource with the given unique name, arguments, and options.
func NewPlugin(ctx *pulumi.Context,
	name string, args *PluginArgs, opts ...pulumi.ResourceOption) (*Plugin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Plugin
	err := ctx.RegisterResource("cloudamqp:index/plugin:Plugin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlugin gets an existing Plugin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlugin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PluginState, opts ...pulumi.ResourceOption) (*Plugin, error) {
	var resource Plugin
	err := ctx.ReadResource("cloudamqp:index/plugin:Plugin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Plugin resources.
type pluginState struct {
	// The description of the plugin.
	Description *string `pulumi:"description"`
	// Enable or disable the plugins.
	Enabled *bool `pulumi:"enabled"`
	// The CloudAMQP instance ID.
	InstanceId *int `pulumi:"instanceId"`
	// The name of the Rabbit MQ plugin.
	Name *string `pulumi:"name"`
	// Configurable sleep time (seconds) for retries when requesting
	// information about plugins. Default set to 10 seconds.
	//
	// ***Note:*** Available from [v1.29.0]
	Sleep *int `pulumi:"sleep"`
	// Configurable timeout time (seconds) for retries when requesting
	// information about plugins. Default set to 1800 seconds.
	//
	// ***Note:*** Available from [v1.29.0]
	Timeout *int `pulumi:"timeout"`
	// The version of the plugin.
	Version *string `pulumi:"version"`
}

type PluginState struct {
	// The description of the plugin.
	Description pulumi.StringPtrInput
	// Enable or disable the plugins.
	Enabled pulumi.BoolPtrInput
	// The CloudAMQP instance ID.
	InstanceId pulumi.IntPtrInput
	// The name of the Rabbit MQ plugin.
	Name pulumi.StringPtrInput
	// Configurable sleep time (seconds) for retries when requesting
	// information about plugins. Default set to 10 seconds.
	//
	// ***Note:*** Available from [v1.29.0]
	Sleep pulumi.IntPtrInput
	// Configurable timeout time (seconds) for retries when requesting
	// information about plugins. Default set to 1800 seconds.
	//
	// ***Note:*** Available from [v1.29.0]
	Timeout pulumi.IntPtrInput
	// The version of the plugin.
	Version pulumi.StringPtrInput
}

func (PluginState) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginState)(nil)).Elem()
}

type pluginArgs struct {
	// Enable or disable the plugins.
	Enabled bool `pulumi:"enabled"`
	// The CloudAMQP instance ID.
	InstanceId int `pulumi:"instanceId"`
	// The name of the Rabbit MQ plugin.
	Name *string `pulumi:"name"`
	// Configurable sleep time (seconds) for retries when requesting
	// information about plugins. Default set to 10 seconds.
	//
	// ***Note:*** Available from [v1.29.0]
	Sleep *int `pulumi:"sleep"`
	// Configurable timeout time (seconds) for retries when requesting
	// information about plugins. Default set to 1800 seconds.
	//
	// ***Note:*** Available from [v1.29.0]
	Timeout *int `pulumi:"timeout"`
}

// The set of arguments for constructing a Plugin resource.
type PluginArgs struct {
	// Enable or disable the plugins.
	Enabled pulumi.BoolInput
	// The CloudAMQP instance ID.
	InstanceId pulumi.IntInput
	// The name of the Rabbit MQ plugin.
	Name pulumi.StringPtrInput
	// Configurable sleep time (seconds) for retries when requesting
	// information about plugins. Default set to 10 seconds.
	//
	// ***Note:*** Available from [v1.29.0]
	Sleep pulumi.IntPtrInput
	// Configurable timeout time (seconds) for retries when requesting
	// information about plugins. Default set to 1800 seconds.
	//
	// ***Note:*** Available from [v1.29.0]
	Timeout pulumi.IntPtrInput
}

func (PluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginArgs)(nil)).Elem()
}

type PluginInput interface {
	pulumi.Input

	ToPluginOutput() PluginOutput
	ToPluginOutputWithContext(ctx context.Context) PluginOutput
}

func (*Plugin) ElementType() reflect.Type {
	return reflect.TypeOf((**Plugin)(nil)).Elem()
}

func (i *Plugin) ToPluginOutput() PluginOutput {
	return i.ToPluginOutputWithContext(context.Background())
}

func (i *Plugin) ToPluginOutputWithContext(ctx context.Context) PluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginOutput)
}

// PluginArrayInput is an input type that accepts PluginArray and PluginArrayOutput values.
// You can construct a concrete instance of `PluginArrayInput` via:
//
//	PluginArray{ PluginArgs{...} }
type PluginArrayInput interface {
	pulumi.Input

	ToPluginArrayOutput() PluginArrayOutput
	ToPluginArrayOutputWithContext(context.Context) PluginArrayOutput
}

type PluginArray []PluginInput

func (PluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Plugin)(nil)).Elem()
}

func (i PluginArray) ToPluginArrayOutput() PluginArrayOutput {
	return i.ToPluginArrayOutputWithContext(context.Background())
}

func (i PluginArray) ToPluginArrayOutputWithContext(ctx context.Context) PluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginArrayOutput)
}

// PluginMapInput is an input type that accepts PluginMap and PluginMapOutput values.
// You can construct a concrete instance of `PluginMapInput` via:
//
//	PluginMap{ "key": PluginArgs{...} }
type PluginMapInput interface {
	pulumi.Input

	ToPluginMapOutput() PluginMapOutput
	ToPluginMapOutputWithContext(context.Context) PluginMapOutput
}

type PluginMap map[string]PluginInput

func (PluginMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Plugin)(nil)).Elem()
}

func (i PluginMap) ToPluginMapOutput() PluginMapOutput {
	return i.ToPluginMapOutputWithContext(context.Background())
}

func (i PluginMap) ToPluginMapOutputWithContext(ctx context.Context) PluginMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginMapOutput)
}

type PluginOutput struct{ *pulumi.OutputState }

func (PluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Plugin)(nil)).Elem()
}

func (o PluginOutput) ToPluginOutput() PluginOutput {
	return o
}

func (o PluginOutput) ToPluginOutputWithContext(ctx context.Context) PluginOutput {
	return o
}

// The description of the plugin.
func (o PluginOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Enable or disable the plugins.
func (o PluginOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Plugin) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The CloudAMQP instance ID.
func (o PluginOutput) InstanceId() pulumi.IntOutput {
	return o.ApplyT(func(v *Plugin) pulumi.IntOutput { return v.InstanceId }).(pulumi.IntOutput)
}

// The name of the Rabbit MQ plugin.
func (o PluginOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configurable sleep time (seconds) for retries when requesting
// information about plugins. Default set to 10 seconds.
//
// ***Note:*** Available from [v1.29.0]
func (o PluginOutput) Sleep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Plugin) pulumi.IntPtrOutput { return v.Sleep }).(pulumi.IntPtrOutput)
}

// Configurable timeout time (seconds) for retries when requesting
// information about plugins. Default set to 1800 seconds.
//
// ***Note:*** Available from [v1.29.0]
func (o PluginOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Plugin) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The version of the plugin.
func (o PluginOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type PluginArrayOutput struct{ *pulumi.OutputState }

func (PluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Plugin)(nil)).Elem()
}

func (o PluginArrayOutput) ToPluginArrayOutput() PluginArrayOutput {
	return o
}

func (o PluginArrayOutput) ToPluginArrayOutputWithContext(ctx context.Context) PluginArrayOutput {
	return o
}

func (o PluginArrayOutput) Index(i pulumi.IntInput) PluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Plugin {
		return vs[0].([]*Plugin)[vs[1].(int)]
	}).(PluginOutput)
}

type PluginMapOutput struct{ *pulumi.OutputState }

func (PluginMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Plugin)(nil)).Elem()
}

func (o PluginMapOutput) ToPluginMapOutput() PluginMapOutput {
	return o
}

func (o PluginMapOutput) ToPluginMapOutputWithContext(ctx context.Context) PluginMapOutput {
	return o
}

func (o PluginMapOutput) MapIndex(k pulumi.StringInput) PluginOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Plugin {
		return vs[0].(map[string]*Plugin)[vs[1].(string)]
	}).(PluginOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PluginInput)(nil)).Elem(), &Plugin{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluginArrayInput)(nil)).Elem(), PluginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluginMapInput)(nil)).Elem(), PluginMap{})
	pulumi.RegisterOutputType(PluginOutput{})
	pulumi.RegisterOutputType(PluginArrayOutput{})
	pulumi.RegisterOutputType(PluginMapOutput{})
}
