// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudamqp

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// `cloudamqp_vpc_peering` can be imported using the CloudAMQP instance identifier.
//
// ```sh
//  $ pulumi import cloudamqp:index/vpcPeering:VpcPeering <resource_name> <instance_id>`
// ```
type VpcPeering struct {
	pulumi.CustomResourceState

	// The CloudAMQP instance ID.
	InstanceId pulumi.IntOutput `pulumi:"instanceId"`
	// Peering identifier created by AW peering request.
	PeeringId pulumi.StringOutput `pulumi:"peeringId"`
	// VPC peering status
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewVpcPeering registers a new resource with the given unique name, arguments, and options.
func NewVpcPeering(ctx *pulumi.Context,
	name string, args *VpcPeeringArgs, opts ...pulumi.ResourceOption) (*VpcPeering, error) {
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.PeeringId == nil {
		return nil, errors.New("missing required argument 'PeeringId'")
	}
	if args == nil {
		args = &VpcPeeringArgs{}
	}
	var resource VpcPeering
	err := ctx.RegisterResource("cloudamqp:index/vpcPeering:VpcPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcPeering gets an existing VpcPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcPeeringState, opts ...pulumi.ResourceOption) (*VpcPeering, error) {
	var resource VpcPeering
	err := ctx.ReadResource("cloudamqp:index/vpcPeering:VpcPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcPeering resources.
type vpcPeeringState struct {
	// The CloudAMQP instance ID.
	InstanceId *int `pulumi:"instanceId"`
	// Peering identifier created by AW peering request.
	PeeringId *string `pulumi:"peeringId"`
	// VPC peering status
	Status *string `pulumi:"status"`
}

type VpcPeeringState struct {
	// The CloudAMQP instance ID.
	InstanceId pulumi.IntPtrInput
	// Peering identifier created by AW peering request.
	PeeringId pulumi.StringPtrInput
	// VPC peering status
	Status pulumi.StringPtrInput
}

func (VpcPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringState)(nil)).Elem()
}

type vpcPeeringArgs struct {
	// The CloudAMQP instance ID.
	InstanceId int `pulumi:"instanceId"`
	// Peering identifier created by AW peering request.
	PeeringId string `pulumi:"peeringId"`
}

// The set of arguments for constructing a VpcPeering resource.
type VpcPeeringArgs struct {
	// The CloudAMQP instance ID.
	InstanceId pulumi.IntInput
	// Peering identifier created by AW peering request.
	PeeringId pulumi.StringInput
}

func (VpcPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringArgs)(nil)).Elem()
}

type VpcPeeringInput interface {
	pulumi.Input

	ToVpcPeeringOutput() VpcPeeringOutput
	ToVpcPeeringOutputWithContext(ctx context.Context) VpcPeeringOutput
}

func (VpcPeering) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeering)(nil)).Elem()
}

func (i VpcPeering) ToVpcPeeringOutput() VpcPeeringOutput {
	return i.ToVpcPeeringOutputWithContext(context.Background())
}

func (i VpcPeering) ToVpcPeeringOutputWithContext(ctx context.Context) VpcPeeringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringOutput)
}

type VpcPeeringOutput struct {
	*pulumi.OutputState
}

func (VpcPeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringOutput)(nil)).Elem()
}

func (o VpcPeeringOutput) ToVpcPeeringOutput() VpcPeeringOutput {
	return o
}

func (o VpcPeeringOutput) ToVpcPeeringOutputWithContext(ctx context.Context) VpcPeeringOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(VpcPeeringOutput{})
}
