// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package cloudamqp

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Alarm struct {
	pulumi.CustomResourceState

	// Instance identifier
	InstanceId pulumi.IntOutput `pulumi:"instanceId"`
	// Identifiers for recipients to be notified. Leave empty to notifiy all recipients.
	NotificationIds pulumi.IntArrayOutput `pulumi:"notificationIds"`
	// Regex for which queues to check
	QueueRegex pulumi.StringPtrOutput `pulumi:"queueRegex"`
	// For how long (in seconds) the value_threshold should be active before trigger alarm
	TimeThreshold pulumi.IntPtrOutput `pulumi:"timeThreshold"`
	// Type of the alarm, valid options are: cpu, memory, disk_usage, queue_length, connection_count, consumers_count,
	// net_split
	Type pulumi.StringOutput `pulumi:"type"`
	// What value to trigger the alarm for
	ValueThreshold pulumi.IntPtrOutput `pulumi:"valueThreshold"`
	// Regex for which vhost the queues are in
	VhostRegex pulumi.StringPtrOutput `pulumi:"vhostRegex"`
}

// NewAlarm registers a new resource with the given unique name, arguments, and options.
func NewAlarm(ctx *pulumi.Context,
	name string, args *AlarmArgs, opts ...pulumi.ResourceOption) (*Alarm, error) {
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &AlarmArgs{}
	}
	var resource Alarm
	err := ctx.RegisterResource("cloudamqp:index/alarm:Alarm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlarm gets an existing Alarm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlarm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlarmState, opts ...pulumi.ResourceOption) (*Alarm, error) {
	var resource Alarm
	err := ctx.ReadResource("cloudamqp:index/alarm:Alarm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Alarm resources.
type alarmState struct {
	// Instance identifier
	InstanceId *int `pulumi:"instanceId"`
	// Identifiers for recipients to be notified. Leave empty to notifiy all recipients.
	NotificationIds []int `pulumi:"notificationIds"`
	// Regex for which queues to check
	QueueRegex *string `pulumi:"queueRegex"`
	// For how long (in seconds) the value_threshold should be active before trigger alarm
	TimeThreshold *int `pulumi:"timeThreshold"`
	// Type of the alarm, valid options are: cpu, memory, disk_usage, queue_length, connection_count, consumers_count,
	// net_split
	Type *string `pulumi:"type"`
	// What value to trigger the alarm for
	ValueThreshold *int `pulumi:"valueThreshold"`
	// Regex for which vhost the queues are in
	VhostRegex *string `pulumi:"vhostRegex"`
}

type AlarmState struct {
	// Instance identifier
	InstanceId pulumi.IntPtrInput
	// Identifiers for recipients to be notified. Leave empty to notifiy all recipients.
	NotificationIds pulumi.IntArrayInput
	// Regex for which queues to check
	QueueRegex pulumi.StringPtrInput
	// For how long (in seconds) the value_threshold should be active before trigger alarm
	TimeThreshold pulumi.IntPtrInput
	// Type of the alarm, valid options are: cpu, memory, disk_usage, queue_length, connection_count, consumers_count,
	// net_split
	Type pulumi.StringPtrInput
	// What value to trigger the alarm for
	ValueThreshold pulumi.IntPtrInput
	// Regex for which vhost the queues are in
	VhostRegex pulumi.StringPtrInput
}

func (AlarmState) ElementType() reflect.Type {
	return reflect.TypeOf((*alarmState)(nil)).Elem()
}

type alarmArgs struct {
	// Instance identifier
	InstanceId int `pulumi:"instanceId"`
	// Identifiers for recipients to be notified. Leave empty to notifiy all recipients.
	NotificationIds []int `pulumi:"notificationIds"`
	// Regex for which queues to check
	QueueRegex *string `pulumi:"queueRegex"`
	// For how long (in seconds) the value_threshold should be active before trigger alarm
	TimeThreshold *int `pulumi:"timeThreshold"`
	// Type of the alarm, valid options are: cpu, memory, disk_usage, queue_length, connection_count, consumers_count,
	// net_split
	Type string `pulumi:"type"`
	// What value to trigger the alarm for
	ValueThreshold *int `pulumi:"valueThreshold"`
	// Regex for which vhost the queues are in
	VhostRegex *string `pulumi:"vhostRegex"`
}

// The set of arguments for constructing a Alarm resource.
type AlarmArgs struct {
	// Instance identifier
	InstanceId pulumi.IntInput
	// Identifiers for recipients to be notified. Leave empty to notifiy all recipients.
	NotificationIds pulumi.IntArrayInput
	// Regex for which queues to check
	QueueRegex pulumi.StringPtrInput
	// For how long (in seconds) the value_threshold should be active before trigger alarm
	TimeThreshold pulumi.IntPtrInput
	// Type of the alarm, valid options are: cpu, memory, disk_usage, queue_length, connection_count, consumers_count,
	// net_split
	Type pulumi.StringInput
	// What value to trigger the alarm for
	ValueThreshold pulumi.IntPtrInput
	// Regex for which vhost the queues are in
	VhostRegex pulumi.StringPtrInput
}

func (AlarmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alarmArgs)(nil)).Elem()
}

