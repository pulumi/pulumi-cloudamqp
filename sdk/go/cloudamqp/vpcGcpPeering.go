// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudamqp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resouce creates a VPC peering configuration for the CloudAMQP instance. The configuration will connect to another VPC network hosted on Google Cloud Platform (GCP). See the [GCP documentation](https://cloud.google.com/vpc/docs/using-vpc-peering) for more information on how to create the VPC peering configuration.
//
// > **Note:** Creating a VPC peering will automatically add firewall rules for the peered subnet.
// <details>
//
//	<summary>
//	   <i>Default VPC peering firewall rule</i>
//	 </summary>
//
// </details>
//
// Pricing is available at [cloudamqp.com](https://www.cloudamqp.com/plans.html).
//
// Only available for dedicated subscription plans.
//
// ## Depedency
//
// *Pre v1.16.0*
// This resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.
//
// *Post v1.16.0*
// This resource depends on CloudAMQP managed VPC identifier, `cloudamqp_vpc.vpc.id` or instance identifier, `cloudamqp_instance.instance.id`.
//
// ## Create VPC Peering with additional firewall rules
//
// To create a VPC peering configuration with additional firewall rules, it's required to chain the SecurityFirewall
// resource to avoid parallel conflicting resource calls. This is done by adding dependency from the firewall resource to the VPC peering resource.
//
// Furthermore, since all firewall rules are overwritten, the otherwise automatically added rules for the VPC peering also needs to be added.
//
// See example below.
//
// ## Import
//
// Not possible to import this resource.
type VpcGcpPeering struct {
	pulumi.CustomResourceState

	// VPC peering auto created routes
	AutoCreateRoutes pulumi.BoolOutput `pulumi:"autoCreateRoutes"`
	// The CloudAMQP instance identifier.
	//
	// ***Depreacted: Changed from required to optional in v1.16.0, will be removed in next major version (v2.0)***
	InstanceId pulumi.IntPtrOutput `pulumi:"instanceId"`
	// Network uri of the VPC network to which you will peer with.
	PeerNetworkUri pulumi.StringOutput `pulumi:"peerNetworkUri"`
	// VPC peering state
	State pulumi.StringOutput `pulumi:"state"`
	// VPC peering state details
	StateDetails pulumi.StringOutput `pulumi:"stateDetails"`
	// The managed VPC identifier.
	//
	// ***Note: Added as optional in version v1.16.0, will be required in next major version (v2.0)***
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
	// Makes the resource wait until the peering is connected.
	//
	// ***Note: Added as optional in version v1.28.0. Default set to false and will not wait until the peering is done from both VPCs***
	WaitOnPeeringStatus pulumi.BoolPtrOutput `pulumi:"waitOnPeeringStatus"`
}

// NewVpcGcpPeering registers a new resource with the given unique name, arguments, and options.
func NewVpcGcpPeering(ctx *pulumi.Context,
	name string, args *VpcGcpPeeringArgs, opts ...pulumi.ResourceOption) (*VpcGcpPeering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PeerNetworkUri == nil {
		return nil, errors.New("invalid value for required argument 'PeerNetworkUri'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcGcpPeering
	err := ctx.RegisterResource("cloudamqp:index/vpcGcpPeering:VpcGcpPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcGcpPeering gets an existing VpcGcpPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcGcpPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcGcpPeeringState, opts ...pulumi.ResourceOption) (*VpcGcpPeering, error) {
	var resource VpcGcpPeering
	err := ctx.ReadResource("cloudamqp:index/vpcGcpPeering:VpcGcpPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcGcpPeering resources.
type vpcGcpPeeringState struct {
	// VPC peering auto created routes
	AutoCreateRoutes *bool `pulumi:"autoCreateRoutes"`
	// The CloudAMQP instance identifier.
	//
	// ***Depreacted: Changed from required to optional in v1.16.0, will be removed in next major version (v2.0)***
	InstanceId *int `pulumi:"instanceId"`
	// Network uri of the VPC network to which you will peer with.
	PeerNetworkUri *string `pulumi:"peerNetworkUri"`
	// VPC peering state
	State *string `pulumi:"state"`
	// VPC peering state details
	StateDetails *string `pulumi:"stateDetails"`
	// The managed VPC identifier.
	//
	// ***Note: Added as optional in version v1.16.0, will be required in next major version (v2.0)***
	VpcId *string `pulumi:"vpcId"`
	// Makes the resource wait until the peering is connected.
	//
	// ***Note: Added as optional in version v1.28.0. Default set to false and will not wait until the peering is done from both VPCs***
	WaitOnPeeringStatus *bool `pulumi:"waitOnPeeringStatus"`
}

type VpcGcpPeeringState struct {
	// VPC peering auto created routes
	AutoCreateRoutes pulumi.BoolPtrInput
	// The CloudAMQP instance identifier.
	//
	// ***Depreacted: Changed from required to optional in v1.16.0, will be removed in next major version (v2.0)***
	InstanceId pulumi.IntPtrInput
	// Network uri of the VPC network to which you will peer with.
	PeerNetworkUri pulumi.StringPtrInput
	// VPC peering state
	State pulumi.StringPtrInput
	// VPC peering state details
	StateDetails pulumi.StringPtrInput
	// The managed VPC identifier.
	//
	// ***Note: Added as optional in version v1.16.0, will be required in next major version (v2.0)***
	VpcId pulumi.StringPtrInput
	// Makes the resource wait until the peering is connected.
	//
	// ***Note: Added as optional in version v1.28.0. Default set to false and will not wait until the peering is done from both VPCs***
	WaitOnPeeringStatus pulumi.BoolPtrInput
}

func (VpcGcpPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcGcpPeeringState)(nil)).Elem()
}

type vpcGcpPeeringArgs struct {
	// The CloudAMQP instance identifier.
	//
	// ***Depreacted: Changed from required to optional in v1.16.0, will be removed in next major version (v2.0)***
	InstanceId *int `pulumi:"instanceId"`
	// Network uri of the VPC network to which you will peer with.
	PeerNetworkUri string `pulumi:"peerNetworkUri"`
	// The managed VPC identifier.
	//
	// ***Note: Added as optional in version v1.16.0, will be required in next major version (v2.0)***
	VpcId *string `pulumi:"vpcId"`
	// Makes the resource wait until the peering is connected.
	//
	// ***Note: Added as optional in version v1.28.0. Default set to false and will not wait until the peering is done from both VPCs***
	WaitOnPeeringStatus *bool `pulumi:"waitOnPeeringStatus"`
}

// The set of arguments for constructing a VpcGcpPeering resource.
type VpcGcpPeeringArgs struct {
	// The CloudAMQP instance identifier.
	//
	// ***Depreacted: Changed from required to optional in v1.16.0, will be removed in next major version (v2.0)***
	InstanceId pulumi.IntPtrInput
	// Network uri of the VPC network to which you will peer with.
	PeerNetworkUri pulumi.StringInput
	// The managed VPC identifier.
	//
	// ***Note: Added as optional in version v1.16.0, will be required in next major version (v2.0)***
	VpcId pulumi.StringPtrInput
	// Makes the resource wait until the peering is connected.
	//
	// ***Note: Added as optional in version v1.28.0. Default set to false and will not wait until the peering is done from both VPCs***
	WaitOnPeeringStatus pulumi.BoolPtrInput
}

func (VpcGcpPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcGcpPeeringArgs)(nil)).Elem()
}

type VpcGcpPeeringInput interface {
	pulumi.Input

	ToVpcGcpPeeringOutput() VpcGcpPeeringOutput
	ToVpcGcpPeeringOutputWithContext(ctx context.Context) VpcGcpPeeringOutput
}

func (*VpcGcpPeering) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcGcpPeering)(nil)).Elem()
}

func (i *VpcGcpPeering) ToVpcGcpPeeringOutput() VpcGcpPeeringOutput {
	return i.ToVpcGcpPeeringOutputWithContext(context.Background())
}

func (i *VpcGcpPeering) ToVpcGcpPeeringOutputWithContext(ctx context.Context) VpcGcpPeeringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcGcpPeeringOutput)
}

func (i *VpcGcpPeering) ToOutput(ctx context.Context) pulumix.Output[*VpcGcpPeering] {
	return pulumix.Output[*VpcGcpPeering]{
		OutputState: i.ToVpcGcpPeeringOutputWithContext(ctx).OutputState,
	}
}

// VpcGcpPeeringArrayInput is an input type that accepts VpcGcpPeeringArray and VpcGcpPeeringArrayOutput values.
// You can construct a concrete instance of `VpcGcpPeeringArrayInput` via:
//
//	VpcGcpPeeringArray{ VpcGcpPeeringArgs{...} }
type VpcGcpPeeringArrayInput interface {
	pulumi.Input

	ToVpcGcpPeeringArrayOutput() VpcGcpPeeringArrayOutput
	ToVpcGcpPeeringArrayOutputWithContext(context.Context) VpcGcpPeeringArrayOutput
}

type VpcGcpPeeringArray []VpcGcpPeeringInput

func (VpcGcpPeeringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcGcpPeering)(nil)).Elem()
}

func (i VpcGcpPeeringArray) ToVpcGcpPeeringArrayOutput() VpcGcpPeeringArrayOutput {
	return i.ToVpcGcpPeeringArrayOutputWithContext(context.Background())
}

func (i VpcGcpPeeringArray) ToVpcGcpPeeringArrayOutputWithContext(ctx context.Context) VpcGcpPeeringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcGcpPeeringArrayOutput)
}

func (i VpcGcpPeeringArray) ToOutput(ctx context.Context) pulumix.Output[[]*VpcGcpPeering] {
	return pulumix.Output[[]*VpcGcpPeering]{
		OutputState: i.ToVpcGcpPeeringArrayOutputWithContext(ctx).OutputState,
	}
}

// VpcGcpPeeringMapInput is an input type that accepts VpcGcpPeeringMap and VpcGcpPeeringMapOutput values.
// You can construct a concrete instance of `VpcGcpPeeringMapInput` via:
//
//	VpcGcpPeeringMap{ "key": VpcGcpPeeringArgs{...} }
type VpcGcpPeeringMapInput interface {
	pulumi.Input

	ToVpcGcpPeeringMapOutput() VpcGcpPeeringMapOutput
	ToVpcGcpPeeringMapOutputWithContext(context.Context) VpcGcpPeeringMapOutput
}

type VpcGcpPeeringMap map[string]VpcGcpPeeringInput

func (VpcGcpPeeringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcGcpPeering)(nil)).Elem()
}

func (i VpcGcpPeeringMap) ToVpcGcpPeeringMapOutput() VpcGcpPeeringMapOutput {
	return i.ToVpcGcpPeeringMapOutputWithContext(context.Background())
}

func (i VpcGcpPeeringMap) ToVpcGcpPeeringMapOutputWithContext(ctx context.Context) VpcGcpPeeringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcGcpPeeringMapOutput)
}

func (i VpcGcpPeeringMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpcGcpPeering] {
	return pulumix.Output[map[string]*VpcGcpPeering]{
		OutputState: i.ToVpcGcpPeeringMapOutputWithContext(ctx).OutputState,
	}
}

type VpcGcpPeeringOutput struct{ *pulumi.OutputState }

func (VpcGcpPeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcGcpPeering)(nil)).Elem()
}

func (o VpcGcpPeeringOutput) ToVpcGcpPeeringOutput() VpcGcpPeeringOutput {
	return o
}

func (o VpcGcpPeeringOutput) ToVpcGcpPeeringOutputWithContext(ctx context.Context) VpcGcpPeeringOutput {
	return o
}

func (o VpcGcpPeeringOutput) ToOutput(ctx context.Context) pulumix.Output[*VpcGcpPeering] {
	return pulumix.Output[*VpcGcpPeering]{
		OutputState: o.OutputState,
	}
}

// VPC peering auto created routes
func (o VpcGcpPeeringOutput) AutoCreateRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v *VpcGcpPeering) pulumi.BoolOutput { return v.AutoCreateRoutes }).(pulumi.BoolOutput)
}

// The CloudAMQP instance identifier.
//
// ***Depreacted: Changed from required to optional in v1.16.0, will be removed in next major version (v2.0)***
func (o VpcGcpPeeringOutput) InstanceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpcGcpPeering) pulumi.IntPtrOutput { return v.InstanceId }).(pulumi.IntPtrOutput)
}

// Network uri of the VPC network to which you will peer with.
func (o VpcGcpPeeringOutput) PeerNetworkUri() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcGcpPeering) pulumi.StringOutput { return v.PeerNetworkUri }).(pulumi.StringOutput)
}

// VPC peering state
func (o VpcGcpPeeringOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcGcpPeering) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// VPC peering state details
func (o VpcGcpPeeringOutput) StateDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcGcpPeering) pulumi.StringOutput { return v.StateDetails }).(pulumi.StringOutput)
}

// The managed VPC identifier.
//
// ***Note: Added as optional in version v1.16.0, will be required in next major version (v2.0)***
func (o VpcGcpPeeringOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcGcpPeering) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

// Makes the resource wait until the peering is connected.
//
// ***Note: Added as optional in version v1.28.0. Default set to false and will not wait until the peering is done from both VPCs***
func (o VpcGcpPeeringOutput) WaitOnPeeringStatus() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpcGcpPeering) pulumi.BoolPtrOutput { return v.WaitOnPeeringStatus }).(pulumi.BoolPtrOutput)
}

type VpcGcpPeeringArrayOutput struct{ *pulumi.OutputState }

func (VpcGcpPeeringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcGcpPeering)(nil)).Elem()
}

func (o VpcGcpPeeringArrayOutput) ToVpcGcpPeeringArrayOutput() VpcGcpPeeringArrayOutput {
	return o
}

func (o VpcGcpPeeringArrayOutput) ToVpcGcpPeeringArrayOutputWithContext(ctx context.Context) VpcGcpPeeringArrayOutput {
	return o
}

func (o VpcGcpPeeringArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VpcGcpPeering] {
	return pulumix.Output[[]*VpcGcpPeering]{
		OutputState: o.OutputState,
	}
}

func (o VpcGcpPeeringArrayOutput) Index(i pulumi.IntInput) VpcGcpPeeringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcGcpPeering {
		return vs[0].([]*VpcGcpPeering)[vs[1].(int)]
	}).(VpcGcpPeeringOutput)
}

type VpcGcpPeeringMapOutput struct{ *pulumi.OutputState }

func (VpcGcpPeeringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcGcpPeering)(nil)).Elem()
}

func (o VpcGcpPeeringMapOutput) ToVpcGcpPeeringMapOutput() VpcGcpPeeringMapOutput {
	return o
}

func (o VpcGcpPeeringMapOutput) ToVpcGcpPeeringMapOutputWithContext(ctx context.Context) VpcGcpPeeringMapOutput {
	return o
}

func (o VpcGcpPeeringMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpcGcpPeering] {
	return pulumix.Output[map[string]*VpcGcpPeering]{
		OutputState: o.OutputState,
	}
}

func (o VpcGcpPeeringMapOutput) MapIndex(k pulumi.StringInput) VpcGcpPeeringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcGcpPeering {
		return vs[0].(map[string]*VpcGcpPeering)[vs[1].(string)]
	}).(VpcGcpPeeringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcGcpPeeringInput)(nil)).Elem(), &VpcGcpPeering{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcGcpPeeringArrayInput)(nil)).Elem(), VpcGcpPeeringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcGcpPeeringMapInput)(nil)).Elem(), VpcGcpPeeringMap{})
	pulumi.RegisterOutputType(VpcGcpPeeringOutput{})
	pulumi.RegisterOutputType(VpcGcpPeeringArrayOutput{})
	pulumi.RegisterOutputType(VpcGcpPeeringMapOutput{})
}
