// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudamqp

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

<<<<<<< HEAD
// This resource allows you to create and manage, forwarding metrics to third party integrations for a CloudAMQP instance. Once configured, the metrics produced will be forward to corresponding integration.
//
// Only available for dedicated subscription plans.
//
// ## Argument references
//
// The following arguments are supported:
//
// * `name`              - (Required) The name of the third party log integration. See `Integration service reference`
// * `region`            - (Optional) Region hosting the integration service.
// * `accessKeyId`     - (Optional) AWS access key identifier.
// * `secretAccessKey` - (Optional) AWS secret access key.
// * `apiKey`           - (Optional) The API key for the integration service.
// * `email`             - (Optional) The email address registred for the integration service.
// * `projectId`        - (Optional) The project identifier.
// * `privateKey`       - (Optional) The private access key.
// * `clientEmail`      - (Optional) The client email registered for the integration service.
// * `tags`              - (Optional) Tags. e.g. env=prod, region=europe.
// * `queueWhitelist`   - (Optional) Whitelist queues using regular expression. Leave empty to include all queues.
// * `vhostWhitelist`   - (Optional) Whitelist vhost using regular expression. Leave empty to include all vhosts.
//
// This is the full list of all arguments. Only a subset of arguments are used based on which type of integration used. See Integration type reference below for more information.
//
// ## Integration service references
//
// Valid names for third party log integration.
//
// | Name          | Description |
// |---------------|---------------------------------------------------------------|
// | cloudwatch    | Create an IAM with programmatic access. |
// | cloudwatchV2 | Create an IAM with programmatic access. |
// | datadog       | Create a Datadog API key at app.datadoghq.com |
// | datadogV2    | Create a Datadog API key at app.datadoghq.com
// | librato       | Create a new API token (with record only permissions) here: https://metrics.librato.com/tokens |
// | newrelic      | Deprecated! |
// | newrelicV2   | Find or register an Insert API key for your account: Go to insights.newrelic.com > Manage data > API keys. |
// | stackdriver   | Create a service account and add 'monitor metrics writer' role, then download credentials. |
//
// ## Integration type reference
//
// Valid arguments for third party log integrations.
//
// Required arguments for all integrations: *name*<br>
// Optional arguments for all integrations: *tags*, *queue_whitelist*, *vhost_whitelist*
//
// | Name | Type | Required arguments |
// | ---- | ---- | ---- |
// | Cloudwatch             | cloudwatch     | region, access_key_id, secretAccessKey |
// | Cloudwatch v2          | cloudwatchV2  | region, access_key_id, secretAccessKey |
// | Datadog                | datadog        | api_key, region |
// | Datadog v2             | datadogV2     | api_key, region |
// | Librato                | librato        | email, apiKey |
// | New relic (deprecated) | newrelic       | - |
// | New relic v2           | newrelicV2    | api_key, region |
// | Stackdriver            | stackdriver    | project_id, private_key, clientEmail |
//
// ## Dependency
//
// This resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.
//
// ## Import
//
// `cloudamqp_integration_metric`can be imported using the name argument of the resource together with CloudAMQP instance identifier. The name and identifier are CSV separated, see example below.
//
// ```sh
//  $ pulumi import cloudamqp:index/integrationMetric:IntegrationMetric <resource_name> <name>,<instance_id>`
// ```
=======
>>>>>>> 5ed2468... Upgrae to v1.8.3 of the CloudAMQP Terraform Provider
type IntegrationMetric struct {
	pulumi.CustomResourceState

	// AWS access key identifier. (Cloudwatch)
	AccessKeyId pulumi.StringPtrOutput `pulumi:"accessKeyId"`
	// The API key for the integration service. (Librato)
	ApiKey pulumi.StringPtrOutput `pulumi:"apiKey"`
	// The client email. (Stackdriver)
	ClientEmail pulumi.StringPtrOutput `pulumi:"clientEmail"`
	// The email address registred for the integration service. (Librato)
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// Instance identifier
	InstanceId pulumi.IntOutput `pulumi:"instanceId"`
	// The license key registred for the integration service. (New Relic)
	LicenseKey pulumi.StringPtrOutput `pulumi:"licenseKey"`
	// The name of metrics integration
	Name pulumi.StringOutput `pulumi:"name"`
	// The private key. (Stackdriver)
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// Project ID. (Stackdriver)
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// (optional) whitelist using regular expression
	QueueWhitelist pulumi.StringPtrOutput `pulumi:"queueWhitelist"`
	// AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// AWS secret key. (Cloudwatch)
	SecretAccessKey pulumi.StringPtrOutput `pulumi:"secretAccessKey"`
	// (optional) tags. E.g. env=prod,region=europe
	Tags pulumi.StringPtrOutput `pulumi:"tags"`
	// (optional) whitelist using regular expression
	VhostWhitelist pulumi.StringPtrOutput `pulumi:"vhostWhitelist"`
}

// NewIntegrationMetric registers a new resource with the given unique name, arguments, and options.
func NewIntegrationMetric(ctx *pulumi.Context,
	name string, args *IntegrationMetricArgs, opts ...pulumi.ResourceOption) (*IntegrationMetric, error) {
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil {
		args = &IntegrationMetricArgs{}
	}
	var resource IntegrationMetric
	err := ctx.RegisterResource("cloudamqp:index/integrationMetric:IntegrationMetric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationMetric gets an existing IntegrationMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationMetricState, opts ...pulumi.ResourceOption) (*IntegrationMetric, error) {
	var resource IntegrationMetric
	err := ctx.ReadResource("cloudamqp:index/integrationMetric:IntegrationMetric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationMetric resources.
type integrationMetricState struct {
	// AWS access key identifier. (Cloudwatch)
	AccessKeyId *string `pulumi:"accessKeyId"`
	// The API key for the integration service. (Librato)
	ApiKey *string `pulumi:"apiKey"`
	// The client email. (Stackdriver)
	ClientEmail *string `pulumi:"clientEmail"`
	// The email address registred for the integration service. (Librato)
	Email *string `pulumi:"email"`
	// Instance identifier
	InstanceId *int `pulumi:"instanceId"`
	// The license key registred for the integration service. (New Relic)
	LicenseKey *string `pulumi:"licenseKey"`
	// The name of metrics integration
	Name *string `pulumi:"name"`
	// The private key. (Stackdriver)
	PrivateKey *string `pulumi:"privateKey"`
	// Project ID. (Stackdriver)
	ProjectId *string `pulumi:"projectId"`
	// (optional) whitelist using regular expression
	QueueWhitelist *string `pulumi:"queueWhitelist"`
	// AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)
	Region *string `pulumi:"region"`
	// AWS secret key. (Cloudwatch)
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// (optional) tags. E.g. env=prod,region=europe
	Tags *string `pulumi:"tags"`
	// (optional) whitelist using regular expression
	VhostWhitelist *string `pulumi:"vhostWhitelist"`
}

type IntegrationMetricState struct {
	// AWS access key identifier. (Cloudwatch)
	AccessKeyId pulumi.StringPtrInput
	// The API key for the integration service. (Librato)
	ApiKey pulumi.StringPtrInput
	// The client email. (Stackdriver)
	ClientEmail pulumi.StringPtrInput
	// The email address registred for the integration service. (Librato)
	Email pulumi.StringPtrInput
	// Instance identifier
	InstanceId pulumi.IntPtrInput
	// The license key registred for the integration service. (New Relic)
	LicenseKey pulumi.StringPtrInput
	// The name of metrics integration
	Name pulumi.StringPtrInput
	// The private key. (Stackdriver)
	PrivateKey pulumi.StringPtrInput
	// Project ID. (Stackdriver)
	ProjectId pulumi.StringPtrInput
	// (optional) whitelist using regular expression
	QueueWhitelist pulumi.StringPtrInput
	// AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)
	Region pulumi.StringPtrInput
	// AWS secret key. (Cloudwatch)
	SecretAccessKey pulumi.StringPtrInput
	// (optional) tags. E.g. env=prod,region=europe
	Tags pulumi.StringPtrInput
	// (optional) whitelist using regular expression
	VhostWhitelist pulumi.StringPtrInput
}

func (IntegrationMetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationMetricState)(nil)).Elem()
}

type integrationMetricArgs struct {
	// AWS access key identifier. (Cloudwatch)
	AccessKeyId *string `pulumi:"accessKeyId"`
	// The API key for the integration service. (Librato)
	ApiKey *string `pulumi:"apiKey"`
	// The client email. (Stackdriver)
	ClientEmail *string `pulumi:"clientEmail"`
	// The email address registred for the integration service. (Librato)
	Email *string `pulumi:"email"`
	// Instance identifier
	InstanceId int `pulumi:"instanceId"`
	// The license key registred for the integration service. (New Relic)
	LicenseKey *string `pulumi:"licenseKey"`
	// The name of metrics integration
	Name *string `pulumi:"name"`
	// The private key. (Stackdriver)
	PrivateKey *string `pulumi:"privateKey"`
	// Project ID. (Stackdriver)
	ProjectId *string `pulumi:"projectId"`
	// (optional) whitelist using regular expression
	QueueWhitelist *string `pulumi:"queueWhitelist"`
	// AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)
	Region *string `pulumi:"region"`
	// AWS secret key. (Cloudwatch)
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// (optional) tags. E.g. env=prod,region=europe
	Tags *string `pulumi:"tags"`
	// (optional) whitelist using regular expression
	VhostWhitelist *string `pulumi:"vhostWhitelist"`
}

// The set of arguments for constructing a IntegrationMetric resource.
type IntegrationMetricArgs struct {
	// AWS access key identifier. (Cloudwatch)
	AccessKeyId pulumi.StringPtrInput
	// The API key for the integration service. (Librato)
	ApiKey pulumi.StringPtrInput
	// The client email. (Stackdriver)
	ClientEmail pulumi.StringPtrInput
	// The email address registred for the integration service. (Librato)
	Email pulumi.StringPtrInput
	// Instance identifier
	InstanceId pulumi.IntInput
	// The license key registred for the integration service. (New Relic)
	LicenseKey pulumi.StringPtrInput
	// The name of metrics integration
	Name pulumi.StringPtrInput
	// The private key. (Stackdriver)
	PrivateKey pulumi.StringPtrInput
	// Project ID. (Stackdriver)
	ProjectId pulumi.StringPtrInput
	// (optional) whitelist using regular expression
	QueueWhitelist pulumi.StringPtrInput
	// AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)
	Region pulumi.StringPtrInput
	// AWS secret key. (Cloudwatch)
	SecretAccessKey pulumi.StringPtrInput
	// (optional) tags. E.g. env=prod,region=europe
	Tags pulumi.StringPtrInput
	// (optional) whitelist using regular expression
	VhostWhitelist pulumi.StringPtrInput
}

func (IntegrationMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationMetricArgs)(nil)).Elem()
}

type IntegrationMetricInput interface {
	pulumi.Input

	ToIntegrationMetricOutput() IntegrationMetricOutput
	ToIntegrationMetricOutputWithContext(ctx context.Context) IntegrationMetricOutput
}

func (IntegrationMetric) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationMetric)(nil)).Elem()
}

func (i IntegrationMetric) ToIntegrationMetricOutput() IntegrationMetricOutput {
	return i.ToIntegrationMetricOutputWithContext(context.Background())
}

func (i IntegrationMetric) ToIntegrationMetricOutputWithContext(ctx context.Context) IntegrationMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationMetricOutput)
}

type IntegrationMetricOutput struct {
	*pulumi.OutputState
}

func (IntegrationMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationMetricOutput)(nil)).Elem()
}

func (o IntegrationMetricOutput) ToIntegrationMetricOutput() IntegrationMetricOutput {
	return o
}

func (o IntegrationMetricOutput) ToIntegrationMetricOutputWithContext(ctx context.Context) IntegrationMetricOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(IntegrationMetricOutput{})
}
