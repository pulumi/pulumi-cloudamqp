// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudamqp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you update RabbitMQ config.
//
// Only available for dedicated subscription plans running ***RabbitMQ***.
//
// ## Example Usage
//
// <details>
//
//	<summary>
//	  <b>
//	    <i>RabbitMQ configuration with default values</i>
//	  </b>
//	</summary>
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudamqp.NewRabbitConfiguration(ctx, "rabbitmq_config", &cloudamqp.RabbitConfigurationArgs{
//				InstanceId:               pulumi.Any(instance.Id),
//				ChannelMax:               pulumi.Int(0),
//				ConnectionMax:            int(-1),
//				ConsumerTimeout:          pulumi.Int(7200000),
//				Heartbeat:                pulumi.Int(120),
//				LogExchangeLevel:         pulumi.String("error"),
//				MaxMessageSize:           pulumi.Int(134217728),
//				QueueIndexEmbedMsgsBelow: pulumi.Int(4096),
//				VmMemoryHighWatermark:    pulumi.Float64(0.81),
//				ClusterPartitionHandling: pulumi.String("autoheal"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// </details>
//
// <details>
//
//	<summary>
//	  <b>
//	    <i>Change log level and combine `NodeActions` for RabbitMQ restart</i>
//	  </b>
//	</summary>
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			rabbitmqConfig, err := cloudamqp.NewRabbitConfiguration(ctx, "rabbitmq_config", &cloudamqp.RabbitConfigurationArgs{
//				InstanceId:               pulumi.Any(instance.Id),
//				ChannelMax:               pulumi.Int(0),
//				ConnectionMax:            int(-1),
//				ConsumerTimeout:          pulumi.Int(7200000),
//				Heartbeat:                pulumi.Int(120),
//				LogExchangeLevel:         pulumi.String("info"),
//				MaxMessageSize:           pulumi.Int(134217728),
//				QueueIndexEmbedMsgsBelow: pulumi.Int(4096),
//				VmMemoryHighWatermark:    pulumi.Float64(0.81),
//				ClusterPartitionHandling: pulumi.String("autoheal"),
//			})
//			if err != nil {
//				return err
//			}
//			listNodes, err := cloudamqp.GetNodes(ctx, &cloudamqp.GetNodesArgs{
//				InstanceId: instance.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = cloudamqp.NewNodeActions(ctx, "node_action", &cloudamqp.NodeActionsArgs{
//				InstanceId: pulumi.Any(instance.Id),
//				NodeName:   pulumi.String(listNodes.Nodes[0].Name),
//				Action:     pulumi.String("restart"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				rabbitmqConfig,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// </details>
//
// <details>
//
//	<summary>
//	  <b>
//	    <i>Only change log level for exchange. All other values will be read from the RabbitMQ configuration.</i>
//	  </b>
//	</summary>
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudamqp.NewRabbitConfiguration(ctx, "rabbit_config", &cloudamqp.RabbitConfigurationArgs{
//				InstanceId:       pulumi.Any(instance.Id),
//				LogExchangeLevel: pulumi.String("info"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// </details>
//
// ## Argument threshold values
//
// |  Argument   |  Type  |  Default  |  Min  |    Max    |     Unit     |                              Affect                               |                               Note                                |
// |-------------|--------|-----------|-------|-----------|--------------|-------------------------------------------------------------------|-------------------------------------------------------------------|
// | heartbeat   | int    |       120 |     0 | -         |              | Only effects new                                                  |                                                                   |
// | connection_ | int    |        -1 |     1 | -         |              | RabbitMQ restart                                                  | -1 in the provider corresponds to INFINITY in the RabbitMQ        |
// | channel_    | int    |       128 |     0 | -         |              | Only effects new                                                  |                                                                   |
// | consumer_   | int    |   7200000 | 10000 |  86400000 | milliseconds | Only effects new                                                  | -1 in the provider corresponds to false (disable) in the RabbitMQ |
// | vm_         | float  |      0.81 |   0.4 |       0.9 |              | Applied                                                           |                                                                   |
// | queue_      | int    |      4096 |     0 |  10485760 | bytes        | Applied immediately for new queues, requires restart for existing |                                                                   |
// | max_        | int    | 134217728 |     1 | 536870912 | bytes        | Only effects new                                                  |                                                                   |
// | log_        | string | error     | -     | -         |              | RabbitMQ restart                                                  | debug, info, warning, error,                                      |
// | cluster_    | string | see       | -     | -         |              | Applied                                                           | autoheal, pause_                                                  |
type RabbitConfiguration struct {
	pulumi.CustomResourceState

	// Set the maximum permissible number of channels per connection.
	ChannelMax pulumi.IntOutput `pulumi:"channelMax"`
	// Set how the cluster should handle network partition.
	ClusterPartitionHandling pulumi.StringOutput `pulumi:"clusterPartitionHandling"`
	// Set the maximum permissible number of connection.
	ConnectionMax pulumi.IntOutput `pulumi:"connectionMax"`
	// A consumer that has recevied a message and does not acknowledge that message within the timeout in milliseconds
	ConsumerTimeout pulumi.IntOutput `pulumi:"consumerTimeout"`
	// Set the server AMQP 0-9-1 heartbeat timeout in seconds.
	Heartbeat pulumi.IntOutput `pulumi:"heartbeat"`
	// The CloudAMQP instance ID.
	InstanceId pulumi.IntOutput `pulumi:"instanceId"`
	// Log level for the logger used for log integrations and the CloudAMQP Console log view.
	//
	// *Note: Requires a restart of RabbitMQ to be applied.*
	LogExchangeLevel pulumi.StringOutput `pulumi:"logExchangeLevel"`
	// The largest allowed message payload size in bytes.
	MaxMessageSize pulumi.IntOutput `pulumi:"maxMessageSize"`
	// Size in bytes below which to embed messages in the queue index. 0 will turn off payload embedding in the queue index.
	QueueIndexEmbedMsgsBelow pulumi.IntOutput `pulumi:"queueIndexEmbedMsgsBelow"`
	// Configurable sleep time in seconds between retries for RabbitMQ configuration. Default set to 60 seconds.
	Sleep pulumi.IntPtrOutput `pulumi:"sleep"`
	// Configurable timeout time in seconds for RabbitMQ configuration. Default set to 3600 seconds.
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// When the server will enter memory based flow-control as relative to the maximum available memory.
	VmMemoryHighWatermark pulumi.Float64Output `pulumi:"vmMemoryHighWatermark"`
}

// NewRabbitConfiguration registers a new resource with the given unique name, arguments, and options.
func NewRabbitConfiguration(ctx *pulumi.Context,
	name string, args *RabbitConfigurationArgs, opts ...pulumi.ResourceOption) (*RabbitConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RabbitConfiguration
	err := ctx.RegisterResource("cloudamqp:index/rabbitConfiguration:RabbitConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRabbitConfiguration gets an existing RabbitConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRabbitConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RabbitConfigurationState, opts ...pulumi.ResourceOption) (*RabbitConfiguration, error) {
	var resource RabbitConfiguration
	err := ctx.ReadResource("cloudamqp:index/rabbitConfiguration:RabbitConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RabbitConfiguration resources.
type rabbitConfigurationState struct {
	// Set the maximum permissible number of channels per connection.
	ChannelMax *int `pulumi:"channelMax"`
	// Set how the cluster should handle network partition.
	ClusterPartitionHandling *string `pulumi:"clusterPartitionHandling"`
	// Set the maximum permissible number of connection.
	ConnectionMax *int `pulumi:"connectionMax"`
	// A consumer that has recevied a message and does not acknowledge that message within the timeout in milliseconds
	ConsumerTimeout *int `pulumi:"consumerTimeout"`
	// Set the server AMQP 0-9-1 heartbeat timeout in seconds.
	Heartbeat *int `pulumi:"heartbeat"`
	// The CloudAMQP instance ID.
	InstanceId *int `pulumi:"instanceId"`
	// Log level for the logger used for log integrations and the CloudAMQP Console log view.
	//
	// *Note: Requires a restart of RabbitMQ to be applied.*
	LogExchangeLevel *string `pulumi:"logExchangeLevel"`
	// The largest allowed message payload size in bytes.
	MaxMessageSize *int `pulumi:"maxMessageSize"`
	// Size in bytes below which to embed messages in the queue index. 0 will turn off payload embedding in the queue index.
	QueueIndexEmbedMsgsBelow *int `pulumi:"queueIndexEmbedMsgsBelow"`
	// Configurable sleep time in seconds between retries for RabbitMQ configuration. Default set to 60 seconds.
	Sleep *int `pulumi:"sleep"`
	// Configurable timeout time in seconds for RabbitMQ configuration. Default set to 3600 seconds.
	Timeout *int `pulumi:"timeout"`
	// When the server will enter memory based flow-control as relative to the maximum available memory.
	VmMemoryHighWatermark *float64 `pulumi:"vmMemoryHighWatermark"`
}

type RabbitConfigurationState struct {
	// Set the maximum permissible number of channels per connection.
	ChannelMax pulumi.IntPtrInput
	// Set how the cluster should handle network partition.
	ClusterPartitionHandling pulumi.StringPtrInput
	// Set the maximum permissible number of connection.
	ConnectionMax pulumi.IntPtrInput
	// A consumer that has recevied a message and does not acknowledge that message within the timeout in milliseconds
	ConsumerTimeout pulumi.IntPtrInput
	// Set the server AMQP 0-9-1 heartbeat timeout in seconds.
	Heartbeat pulumi.IntPtrInput
	// The CloudAMQP instance ID.
	InstanceId pulumi.IntPtrInput
	// Log level for the logger used for log integrations and the CloudAMQP Console log view.
	//
	// *Note: Requires a restart of RabbitMQ to be applied.*
	LogExchangeLevel pulumi.StringPtrInput
	// The largest allowed message payload size in bytes.
	MaxMessageSize pulumi.IntPtrInput
	// Size in bytes below which to embed messages in the queue index. 0 will turn off payload embedding in the queue index.
	QueueIndexEmbedMsgsBelow pulumi.IntPtrInput
	// Configurable sleep time in seconds between retries for RabbitMQ configuration. Default set to 60 seconds.
	Sleep pulumi.IntPtrInput
	// Configurable timeout time in seconds for RabbitMQ configuration. Default set to 3600 seconds.
	Timeout pulumi.IntPtrInput
	// When the server will enter memory based flow-control as relative to the maximum available memory.
	VmMemoryHighWatermark pulumi.Float64PtrInput
}

func (RabbitConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*rabbitConfigurationState)(nil)).Elem()
}

type rabbitConfigurationArgs struct {
	// Set the maximum permissible number of channels per connection.
	ChannelMax *int `pulumi:"channelMax"`
	// Set how the cluster should handle network partition.
	ClusterPartitionHandling *string `pulumi:"clusterPartitionHandling"`
	// Set the maximum permissible number of connection.
	ConnectionMax *int `pulumi:"connectionMax"`
	// A consumer that has recevied a message and does not acknowledge that message within the timeout in milliseconds
	ConsumerTimeout *int `pulumi:"consumerTimeout"`
	// Set the server AMQP 0-9-1 heartbeat timeout in seconds.
	Heartbeat *int `pulumi:"heartbeat"`
	// The CloudAMQP instance ID.
	InstanceId int `pulumi:"instanceId"`
	// Log level for the logger used for log integrations and the CloudAMQP Console log view.
	//
	// *Note: Requires a restart of RabbitMQ to be applied.*
	LogExchangeLevel *string `pulumi:"logExchangeLevel"`
	// The largest allowed message payload size in bytes.
	MaxMessageSize *int `pulumi:"maxMessageSize"`
	// Size in bytes below which to embed messages in the queue index. 0 will turn off payload embedding in the queue index.
	QueueIndexEmbedMsgsBelow *int `pulumi:"queueIndexEmbedMsgsBelow"`
	// Configurable sleep time in seconds between retries for RabbitMQ configuration. Default set to 60 seconds.
	Sleep *int `pulumi:"sleep"`
	// Configurable timeout time in seconds for RabbitMQ configuration. Default set to 3600 seconds.
	Timeout *int `pulumi:"timeout"`
	// When the server will enter memory based flow-control as relative to the maximum available memory.
	VmMemoryHighWatermark *float64 `pulumi:"vmMemoryHighWatermark"`
}

// The set of arguments for constructing a RabbitConfiguration resource.
type RabbitConfigurationArgs struct {
	// Set the maximum permissible number of channels per connection.
	ChannelMax pulumi.IntPtrInput
	// Set how the cluster should handle network partition.
	ClusterPartitionHandling pulumi.StringPtrInput
	// Set the maximum permissible number of connection.
	ConnectionMax pulumi.IntPtrInput
	// A consumer that has recevied a message and does not acknowledge that message within the timeout in milliseconds
	ConsumerTimeout pulumi.IntPtrInput
	// Set the server AMQP 0-9-1 heartbeat timeout in seconds.
	Heartbeat pulumi.IntPtrInput
	// The CloudAMQP instance ID.
	InstanceId pulumi.IntInput
	// Log level for the logger used for log integrations and the CloudAMQP Console log view.
	//
	// *Note: Requires a restart of RabbitMQ to be applied.*
	LogExchangeLevel pulumi.StringPtrInput
	// The largest allowed message payload size in bytes.
	MaxMessageSize pulumi.IntPtrInput
	// Size in bytes below which to embed messages in the queue index. 0 will turn off payload embedding in the queue index.
	QueueIndexEmbedMsgsBelow pulumi.IntPtrInput
	// Configurable sleep time in seconds between retries for RabbitMQ configuration. Default set to 60 seconds.
	Sleep pulumi.IntPtrInput
	// Configurable timeout time in seconds for RabbitMQ configuration. Default set to 3600 seconds.
	Timeout pulumi.IntPtrInput
	// When the server will enter memory based flow-control as relative to the maximum available memory.
	VmMemoryHighWatermark pulumi.Float64PtrInput
}

func (RabbitConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rabbitConfigurationArgs)(nil)).Elem()
}

type RabbitConfigurationInput interface {
	pulumi.Input

	ToRabbitConfigurationOutput() RabbitConfigurationOutput
	ToRabbitConfigurationOutputWithContext(ctx context.Context) RabbitConfigurationOutput
}

func (*RabbitConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitConfiguration)(nil)).Elem()
}

func (i *RabbitConfiguration) ToRabbitConfigurationOutput() RabbitConfigurationOutput {
	return i.ToRabbitConfigurationOutputWithContext(context.Background())
}

func (i *RabbitConfiguration) ToRabbitConfigurationOutputWithContext(ctx context.Context) RabbitConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitConfigurationOutput)
}

// RabbitConfigurationArrayInput is an input type that accepts RabbitConfigurationArray and RabbitConfigurationArrayOutput values.
// You can construct a concrete instance of `RabbitConfigurationArrayInput` via:
//
//	RabbitConfigurationArray{ RabbitConfigurationArgs{...} }
type RabbitConfigurationArrayInput interface {
	pulumi.Input

	ToRabbitConfigurationArrayOutput() RabbitConfigurationArrayOutput
	ToRabbitConfigurationArrayOutputWithContext(context.Context) RabbitConfigurationArrayOutput
}

type RabbitConfigurationArray []RabbitConfigurationInput

func (RabbitConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RabbitConfiguration)(nil)).Elem()
}

func (i RabbitConfigurationArray) ToRabbitConfigurationArrayOutput() RabbitConfigurationArrayOutput {
	return i.ToRabbitConfigurationArrayOutputWithContext(context.Background())
}

func (i RabbitConfigurationArray) ToRabbitConfigurationArrayOutputWithContext(ctx context.Context) RabbitConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitConfigurationArrayOutput)
}

// RabbitConfigurationMapInput is an input type that accepts RabbitConfigurationMap and RabbitConfigurationMapOutput values.
// You can construct a concrete instance of `RabbitConfigurationMapInput` via:
//
//	RabbitConfigurationMap{ "key": RabbitConfigurationArgs{...} }
type RabbitConfigurationMapInput interface {
	pulumi.Input

	ToRabbitConfigurationMapOutput() RabbitConfigurationMapOutput
	ToRabbitConfigurationMapOutputWithContext(context.Context) RabbitConfigurationMapOutput
}

type RabbitConfigurationMap map[string]RabbitConfigurationInput

func (RabbitConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RabbitConfiguration)(nil)).Elem()
}

func (i RabbitConfigurationMap) ToRabbitConfigurationMapOutput() RabbitConfigurationMapOutput {
	return i.ToRabbitConfigurationMapOutputWithContext(context.Background())
}

func (i RabbitConfigurationMap) ToRabbitConfigurationMapOutputWithContext(ctx context.Context) RabbitConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitConfigurationMapOutput)
}

type RabbitConfigurationOutput struct{ *pulumi.OutputState }

func (RabbitConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitConfiguration)(nil)).Elem()
}

func (o RabbitConfigurationOutput) ToRabbitConfigurationOutput() RabbitConfigurationOutput {
	return o
}

func (o RabbitConfigurationOutput) ToRabbitConfigurationOutputWithContext(ctx context.Context) RabbitConfigurationOutput {
	return o
}

// Set the maximum permissible number of channels per connection.
func (o RabbitConfigurationOutput) ChannelMax() pulumi.IntOutput {
	return o.ApplyT(func(v *RabbitConfiguration) pulumi.IntOutput { return v.ChannelMax }).(pulumi.IntOutput)
}

// Set how the cluster should handle network partition.
func (o RabbitConfigurationOutput) ClusterPartitionHandling() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitConfiguration) pulumi.StringOutput { return v.ClusterPartitionHandling }).(pulumi.StringOutput)
}

// Set the maximum permissible number of connection.
func (o RabbitConfigurationOutput) ConnectionMax() pulumi.IntOutput {
	return o.ApplyT(func(v *RabbitConfiguration) pulumi.IntOutput { return v.ConnectionMax }).(pulumi.IntOutput)
}

// A consumer that has recevied a message and does not acknowledge that message within the timeout in milliseconds
func (o RabbitConfigurationOutput) ConsumerTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *RabbitConfiguration) pulumi.IntOutput { return v.ConsumerTimeout }).(pulumi.IntOutput)
}

// Set the server AMQP 0-9-1 heartbeat timeout in seconds.
func (o RabbitConfigurationOutput) Heartbeat() pulumi.IntOutput {
	return o.ApplyT(func(v *RabbitConfiguration) pulumi.IntOutput { return v.Heartbeat }).(pulumi.IntOutput)
}

// The CloudAMQP instance ID.
func (o RabbitConfigurationOutput) InstanceId() pulumi.IntOutput {
	return o.ApplyT(func(v *RabbitConfiguration) pulumi.IntOutput { return v.InstanceId }).(pulumi.IntOutput)
}

// Log level for the logger used for log integrations and the CloudAMQP Console log view.
//
// *Note: Requires a restart of RabbitMQ to be applied.*
func (o RabbitConfigurationOutput) LogExchangeLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitConfiguration) pulumi.StringOutput { return v.LogExchangeLevel }).(pulumi.StringOutput)
}

// The largest allowed message payload size in bytes.
func (o RabbitConfigurationOutput) MaxMessageSize() pulumi.IntOutput {
	return o.ApplyT(func(v *RabbitConfiguration) pulumi.IntOutput { return v.MaxMessageSize }).(pulumi.IntOutput)
}

// Size in bytes below which to embed messages in the queue index. 0 will turn off payload embedding in the queue index.
func (o RabbitConfigurationOutput) QueueIndexEmbedMsgsBelow() pulumi.IntOutput {
	return o.ApplyT(func(v *RabbitConfiguration) pulumi.IntOutput { return v.QueueIndexEmbedMsgsBelow }).(pulumi.IntOutput)
}

// Configurable sleep time in seconds between retries for RabbitMQ configuration. Default set to 60 seconds.
func (o RabbitConfigurationOutput) Sleep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RabbitConfiguration) pulumi.IntPtrOutput { return v.Sleep }).(pulumi.IntPtrOutput)
}

// Configurable timeout time in seconds for RabbitMQ configuration. Default set to 3600 seconds.
func (o RabbitConfigurationOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RabbitConfiguration) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

// When the server will enter memory based flow-control as relative to the maximum available memory.
func (o RabbitConfigurationOutput) VmMemoryHighWatermark() pulumi.Float64Output {
	return o.ApplyT(func(v *RabbitConfiguration) pulumi.Float64Output { return v.VmMemoryHighWatermark }).(pulumi.Float64Output)
}

type RabbitConfigurationArrayOutput struct{ *pulumi.OutputState }

func (RabbitConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RabbitConfiguration)(nil)).Elem()
}

func (o RabbitConfigurationArrayOutput) ToRabbitConfigurationArrayOutput() RabbitConfigurationArrayOutput {
	return o
}

func (o RabbitConfigurationArrayOutput) ToRabbitConfigurationArrayOutputWithContext(ctx context.Context) RabbitConfigurationArrayOutput {
	return o
}

func (o RabbitConfigurationArrayOutput) Index(i pulumi.IntInput) RabbitConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RabbitConfiguration {
		return vs[0].([]*RabbitConfiguration)[vs[1].(int)]
	}).(RabbitConfigurationOutput)
}

type RabbitConfigurationMapOutput struct{ *pulumi.OutputState }

func (RabbitConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RabbitConfiguration)(nil)).Elem()
}

func (o RabbitConfigurationMapOutput) ToRabbitConfigurationMapOutput() RabbitConfigurationMapOutput {
	return o
}

func (o RabbitConfigurationMapOutput) ToRabbitConfigurationMapOutputWithContext(ctx context.Context) RabbitConfigurationMapOutput {
	return o
}

func (o RabbitConfigurationMapOutput) MapIndex(k pulumi.StringInput) RabbitConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RabbitConfiguration {
		return vs[0].(map[string]*RabbitConfiguration)[vs[1].(string)]
	}).(RabbitConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitConfigurationInput)(nil)).Elem(), &RabbitConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitConfigurationArrayInput)(nil)).Elem(), RabbitConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitConfigurationMapInput)(nil)).Elem(), RabbitConfigurationMap{})
	pulumi.RegisterOutputType(RabbitConfigurationOutput{})
	pulumi.RegisterOutputType(RabbitConfigurationArrayOutput{})
	pulumi.RegisterOutputType(RabbitConfigurationMapOutput{})
}
