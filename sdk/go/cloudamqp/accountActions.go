// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudamqp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccountActions struct {
	pulumi.CustomResourceState

	// The action to perform on the node
	Action pulumi.StringOutput `pulumi:"action"`
	// Instance identifier
	InstanceId pulumi.IntOutput `pulumi:"instanceId"`
}

// NewAccountActions registers a new resource with the given unique name, arguments, and options.
func NewAccountActions(ctx *pulumi.Context,
	name string, args *AccountActionsArgs, opts ...pulumi.ResourceOption) (*AccountActions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountActions
	err := ctx.RegisterResource("cloudamqp:index/accountActions:AccountActions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountActions gets an existing AccountActions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountActions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountActionsState, opts ...pulumi.ResourceOption) (*AccountActions, error) {
	var resource AccountActions
	err := ctx.ReadResource("cloudamqp:index/accountActions:AccountActions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountActions resources.
type accountActionsState struct {
	// The action to perform on the node
	Action *string `pulumi:"action"`
	// Instance identifier
	InstanceId *int `pulumi:"instanceId"`
}

type AccountActionsState struct {
	// The action to perform on the node
	Action pulumi.StringPtrInput
	// Instance identifier
	InstanceId pulumi.IntPtrInput
}

func (AccountActionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountActionsState)(nil)).Elem()
}

type accountActionsArgs struct {
	// The action to perform on the node
	Action string `pulumi:"action"`
	// Instance identifier
	InstanceId int `pulumi:"instanceId"`
}

// The set of arguments for constructing a AccountActions resource.
type AccountActionsArgs struct {
	// The action to perform on the node
	Action pulumi.StringInput
	// Instance identifier
	InstanceId pulumi.IntInput
}

func (AccountActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountActionsArgs)(nil)).Elem()
}

type AccountActionsInput interface {
	pulumi.Input

	ToAccountActionsOutput() AccountActionsOutput
	ToAccountActionsOutputWithContext(ctx context.Context) AccountActionsOutput
}

func (*AccountActions) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountActions)(nil)).Elem()
}

func (i *AccountActions) ToAccountActionsOutput() AccountActionsOutput {
	return i.ToAccountActionsOutputWithContext(context.Background())
}

func (i *AccountActions) ToAccountActionsOutputWithContext(ctx context.Context) AccountActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountActionsOutput)
}

// AccountActionsArrayInput is an input type that accepts AccountActionsArray and AccountActionsArrayOutput values.
// You can construct a concrete instance of `AccountActionsArrayInput` via:
//
//	AccountActionsArray{ AccountActionsArgs{...} }
type AccountActionsArrayInput interface {
	pulumi.Input

	ToAccountActionsArrayOutput() AccountActionsArrayOutput
	ToAccountActionsArrayOutputWithContext(context.Context) AccountActionsArrayOutput
}

type AccountActionsArray []AccountActionsInput

func (AccountActionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountActions)(nil)).Elem()
}

func (i AccountActionsArray) ToAccountActionsArrayOutput() AccountActionsArrayOutput {
	return i.ToAccountActionsArrayOutputWithContext(context.Background())
}

func (i AccountActionsArray) ToAccountActionsArrayOutputWithContext(ctx context.Context) AccountActionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountActionsArrayOutput)
}

// AccountActionsMapInput is an input type that accepts AccountActionsMap and AccountActionsMapOutput values.
// You can construct a concrete instance of `AccountActionsMapInput` via:
//
//	AccountActionsMap{ "key": AccountActionsArgs{...} }
type AccountActionsMapInput interface {
	pulumi.Input

	ToAccountActionsMapOutput() AccountActionsMapOutput
	ToAccountActionsMapOutputWithContext(context.Context) AccountActionsMapOutput
}

type AccountActionsMap map[string]AccountActionsInput

func (AccountActionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountActions)(nil)).Elem()
}

func (i AccountActionsMap) ToAccountActionsMapOutput() AccountActionsMapOutput {
	return i.ToAccountActionsMapOutputWithContext(context.Background())
}

func (i AccountActionsMap) ToAccountActionsMapOutputWithContext(ctx context.Context) AccountActionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountActionsMapOutput)
}

type AccountActionsOutput struct{ *pulumi.OutputState }

func (AccountActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountActions)(nil)).Elem()
}

func (o AccountActionsOutput) ToAccountActionsOutput() AccountActionsOutput {
	return o
}

func (o AccountActionsOutput) ToAccountActionsOutputWithContext(ctx context.Context) AccountActionsOutput {
	return o
}

// The action to perform on the node
func (o AccountActionsOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountActions) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Instance identifier
func (o AccountActionsOutput) InstanceId() pulumi.IntOutput {
	return o.ApplyT(func(v *AccountActions) pulumi.IntOutput { return v.InstanceId }).(pulumi.IntOutput)
}

type AccountActionsArrayOutput struct{ *pulumi.OutputState }

func (AccountActionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountActions)(nil)).Elem()
}

func (o AccountActionsArrayOutput) ToAccountActionsArrayOutput() AccountActionsArrayOutput {
	return o
}

func (o AccountActionsArrayOutput) ToAccountActionsArrayOutputWithContext(ctx context.Context) AccountActionsArrayOutput {
	return o
}

func (o AccountActionsArrayOutput) Index(i pulumi.IntInput) AccountActionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountActions {
		return vs[0].([]*AccountActions)[vs[1].(int)]
	}).(AccountActionsOutput)
}

type AccountActionsMapOutput struct{ *pulumi.OutputState }

func (AccountActionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountActions)(nil)).Elem()
}

func (o AccountActionsMapOutput) ToAccountActionsMapOutput() AccountActionsMapOutput {
	return o
}

func (o AccountActionsMapOutput) ToAccountActionsMapOutputWithContext(ctx context.Context) AccountActionsMapOutput {
	return o
}

func (o AccountActionsMapOutput) MapIndex(k pulumi.StringInput) AccountActionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountActions {
		return vs[0].(map[string]*AccountActions)[vs[1].(string)]
	}).(AccountActionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountActionsInput)(nil)).Elem(), &AccountActions{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountActionsArrayInput)(nil)).Elem(), AccountActionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountActionsMapInput)(nil)).Elem(), AccountActionsMap{})
	pulumi.RegisterOutputType(AccountActionsOutput{})
	pulumi.RegisterOutputType(AccountActionsArrayOutput{})
	pulumi.RegisterOutputType(AccountActionsMapOutput{})
}
