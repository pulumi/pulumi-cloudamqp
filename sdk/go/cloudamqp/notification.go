// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package cloudamqp

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Notification struct {
	pulumi.CustomResourceState

	// Instance identifier
	InstanceId pulumi.IntOutput `pulumi:"instanceId"`
	// Optional display name of the recipient
	Name pulumi.StringOutput `pulumi:"name"`
	// Type of the notification, valid options are: email, webhook, pagerduty, victorops, opsgenie, opsgenie-eu, slack
	Type pulumi.StringOutput `pulumi:"type"`
	// Notification endpoint, where to send the notifcation
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewNotification registers a new resource with the given unique name, arguments, and options.
func NewNotification(ctx *pulumi.Context,
	name string, args *NotificationArgs, opts ...pulumi.ResourceOption) (*Notification, error) {
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	if args == nil {
		args = &NotificationArgs{}
	}
	var resource Notification
	err := ctx.RegisterResource("cloudamqp:index/notification:Notification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotification gets an existing Notification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationState, opts ...pulumi.ResourceOption) (*Notification, error) {
	var resource Notification
	err := ctx.ReadResource("cloudamqp:index/notification:Notification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Notification resources.
type notificationState struct {
	// Instance identifier
	InstanceId *int `pulumi:"instanceId"`
	// Optional display name of the recipient
	Name *string `pulumi:"name"`
	// Type of the notification, valid options are: email, webhook, pagerduty, victorops, opsgenie, opsgenie-eu, slack
	Type *string `pulumi:"type"`
	// Notification endpoint, where to send the notifcation
	Value *string `pulumi:"value"`
}

type NotificationState struct {
	// Instance identifier
	InstanceId pulumi.IntPtrInput
	// Optional display name of the recipient
	Name pulumi.StringPtrInput
	// Type of the notification, valid options are: email, webhook, pagerduty, victorops, opsgenie, opsgenie-eu, slack
	Type pulumi.StringPtrInput
	// Notification endpoint, where to send the notifcation
	Value pulumi.StringPtrInput
}

func (NotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationState)(nil)).Elem()
}

type notificationArgs struct {
	// Instance identifier
	InstanceId int `pulumi:"instanceId"`
	// Optional display name of the recipient
	Name *string `pulumi:"name"`
	// Type of the notification, valid options are: email, webhook, pagerduty, victorops, opsgenie, opsgenie-eu, slack
	Type string `pulumi:"type"`
	// Notification endpoint, where to send the notifcation
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a Notification resource.
type NotificationArgs struct {
	// Instance identifier
	InstanceId pulumi.IntInput
	// Optional display name of the recipient
	Name pulumi.StringPtrInput
	// Type of the notification, valid options are: email, webhook, pagerduty, victorops, opsgenie, opsgenie-eu, slack
	Type pulumi.StringInput
	// Notification endpoint, where to send the notifcation
	Value pulumi.StringInput
}

func (NotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationArgs)(nil)).Elem()
}
