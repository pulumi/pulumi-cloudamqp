// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudamqp

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Instance struct {
	s *pulumi.ResourceState
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOpt) (*Instance, error) {
	if args == nil || args.Plan == nil {
		return nil, errors.New("missing required argument 'Plan'")
	}
	if args == nil || args.Region == nil {
		return nil, errors.New("missing required argument 'Region'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
		inputs["nodes"] = nil
		inputs["plan"] = nil
		inputs["region"] = nil
		inputs["rmqVersion"] = nil
		inputs["tags"] = nil
		inputs["vpcSubnet"] = nil
	} else {
		inputs["name"] = args.Name
		inputs["nodes"] = args.Nodes
		inputs["plan"] = args.Plan
		inputs["region"] = args.Region
		inputs["rmqVersion"] = args.RmqVersion
		inputs["tags"] = args.Tags
		inputs["vpcSubnet"] = args.VpcSubnet
	}
	inputs["apikey"] = nil
	inputs["host"] = nil
	inputs["url"] = nil
	inputs["vhost"] = nil
	s, err := ctx.RegisterResource("cloudamqp:index/instance:Instance", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Instance{s: s}, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.ID, state *InstanceState, opts ...pulumi.ResourceOpt) (*Instance, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["apikey"] = state.Apikey
		inputs["host"] = state.Host
		inputs["name"] = state.Name
		inputs["nodes"] = state.Nodes
		inputs["plan"] = state.Plan
		inputs["region"] = state.Region
		inputs["rmqVersion"] = state.RmqVersion
		inputs["tags"] = state.Tags
		inputs["url"] = state.Url
		inputs["vhost"] = state.Vhost
		inputs["vpcSubnet"] = state.VpcSubnet
	}
	s, err := ctx.ReadResource("cloudamqp:index/instance:Instance", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Instance{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Instance) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Instance) ID() pulumi.IDOutput {
	return r.s.ID()
}

// API key for the CloudAMQP instance
func (r *Instance) Apikey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["apikey"])
}

// Host name for the CloudAMQP instance
func (r *Instance) Host() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["host"])
}

// Name of the instance
func (r *Instance) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Number of nodes in cluster (plan must support it)
func (r *Instance) Nodes() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["nodes"])
}

// Name of the plan, valid options are: lemur, tiger, bunny, rabbit, panda, ape, hippo, lion
func (r *Instance) Plan() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["plan"])
}

// Name of the region you want to create your instance in
func (r *Instance) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// RabbitMQ version
func (r *Instance) RmqVersion() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["rmqVersion"])
}

// Tag the instances with optional tags
func (r *Instance) Tags() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tags"])
}

// URL of the CloudAMQP instance
func (r *Instance) Url() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["url"])
}

// The virtual host
func (r *Instance) Vhost() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vhost"])
}

// Dedicated VPC subnet, shouldn't overlap with your current VPC's subnet
func (r *Instance) VpcSubnet() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vpcSubnet"])
}

// Input properties used for looking up and filtering Instance resources.
type InstanceState struct {
	// API key for the CloudAMQP instance
	Apikey interface{}
	// Host name for the CloudAMQP instance
	Host interface{}
	// Name of the instance
	Name interface{}
	// Number of nodes in cluster (plan must support it)
	Nodes interface{}
	// Name of the plan, valid options are: lemur, tiger, bunny, rabbit, panda, ape, hippo, lion
	Plan interface{}
	// Name of the region you want to create your instance in
	Region interface{}
	// RabbitMQ version
	RmqVersion interface{}
	// Tag the instances with optional tags
	Tags interface{}
	// URL of the CloudAMQP instance
	Url interface{}
	// The virtual host
	Vhost interface{}
	// Dedicated VPC subnet, shouldn't overlap with your current VPC's subnet
	VpcSubnet interface{}
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Name of the instance
	Name interface{}
	// Number of nodes in cluster (plan must support it)
	Nodes interface{}
	// Name of the plan, valid options are: lemur, tiger, bunny, rabbit, panda, ape, hippo, lion
	Plan interface{}
	// Name of the region you want to create your instance in
	Region interface{}
	// RabbitMQ version
	RmqVersion interface{}
	// Tag the instances with optional tags
	Tags interface{}
	// Dedicated VPC subnet, shouldn't overlap with your current VPC's subnet
	VpcSubnet interface{}
}
