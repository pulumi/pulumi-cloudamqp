// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package cloudamqp

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Instance struct {
	pulumi.CustomResourceState

	// API key for the CloudAMQP instance
	Apikey pulumi.StringOutput `pulumi:"apikey"`
	// Host name for the CloudAMQP instance
	Host pulumi.StringOutput `pulumi:"host"`
	// Name of the instance
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of nodes in cluster (plan must support it)
	Nodes pulumi.IntPtrOutput `pulumi:"nodes"`
	// Name of the plan, valid options are: lemur, tiger, bunny, rabbit, panda, ape, hippo, lion
	Plan pulumi.StringOutput `pulumi:"plan"`
	// Name of the region you want to create your instance in
	Region pulumi.StringOutput `pulumi:"region"`
	// RabbitMQ version
	RmqVersion pulumi.StringPtrOutput `pulumi:"rmqVersion"`
	// Tag the instances with optional tags
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// URL of the CloudAMQP instance
	Url pulumi.StringOutput `pulumi:"url"`
	// The virtual host
	Vhost pulumi.StringOutput `pulumi:"vhost"`
	// Dedicated VPC subnet, shouldn't overlap with your current VPC's subnet
	VpcSubnet pulumi.StringPtrOutput `pulumi:"vpcSubnet"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil || args.Plan == nil {
		return nil, errors.New("missing required argument 'Plan'")
	}
	if args == nil || args.Region == nil {
		return nil, errors.New("missing required argument 'Region'")
	}
	if args == nil {
		args = &InstanceArgs{}
	}
	var resource Instance
	err := ctx.RegisterResource("cloudamqp:index/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("cloudamqp:index/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// API key for the CloudAMQP instance
	Apikey *string `pulumi:"apikey"`
	// Host name for the CloudAMQP instance
	Host *string `pulumi:"host"`
	// Name of the instance
	Name *string `pulumi:"name"`
	// Number of nodes in cluster (plan must support it)
	Nodes *int `pulumi:"nodes"`
	// Name of the plan, valid options are: lemur, tiger, bunny, rabbit, panda, ape, hippo, lion
	Plan *string `pulumi:"plan"`
	// Name of the region you want to create your instance in
	Region *string `pulumi:"region"`
	// RabbitMQ version
	RmqVersion *string `pulumi:"rmqVersion"`
	// Tag the instances with optional tags
	Tags []string `pulumi:"tags"`
	// URL of the CloudAMQP instance
	Url *string `pulumi:"url"`
	// The virtual host
	Vhost *string `pulumi:"vhost"`
	// Dedicated VPC subnet, shouldn't overlap with your current VPC's subnet
	VpcSubnet *string `pulumi:"vpcSubnet"`
}

type InstanceState struct {
	// API key for the CloudAMQP instance
	Apikey pulumi.StringPtrInput
	// Host name for the CloudAMQP instance
	Host pulumi.StringPtrInput
	// Name of the instance
	Name pulumi.StringPtrInput
	// Number of nodes in cluster (plan must support it)
	Nodes pulumi.IntPtrInput
	// Name of the plan, valid options are: lemur, tiger, bunny, rabbit, panda, ape, hippo, lion
	Plan pulumi.StringPtrInput
	// Name of the region you want to create your instance in
	Region pulumi.StringPtrInput
	// RabbitMQ version
	RmqVersion pulumi.StringPtrInput
	// Tag the instances with optional tags
	Tags pulumi.StringArrayInput
	// URL of the CloudAMQP instance
	Url pulumi.StringPtrInput
	// The virtual host
	Vhost pulumi.StringPtrInput
	// Dedicated VPC subnet, shouldn't overlap with your current VPC's subnet
	VpcSubnet pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Name of the instance
	Name *string `pulumi:"name"`
	// Number of nodes in cluster (plan must support it)
	Nodes *int `pulumi:"nodes"`
	// Name of the plan, valid options are: lemur, tiger, bunny, rabbit, panda, ape, hippo, lion
	Plan string `pulumi:"plan"`
	// Name of the region you want to create your instance in
	Region string `pulumi:"region"`
	// RabbitMQ version
	RmqVersion *string `pulumi:"rmqVersion"`
	// Tag the instances with optional tags
	Tags []string `pulumi:"tags"`
	// Dedicated VPC subnet, shouldn't overlap with your current VPC's subnet
	VpcSubnet *string `pulumi:"vpcSubnet"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Name of the instance
	Name pulumi.StringPtrInput
	// Number of nodes in cluster (plan must support it)
	Nodes pulumi.IntPtrInput
	// Name of the plan, valid options are: lemur, tiger, bunny, rabbit, panda, ape, hippo, lion
	Plan pulumi.StringInput
	// Name of the region you want to create your instance in
	Region pulumi.StringInput
	// RabbitMQ version
	RmqVersion pulumi.StringPtrInput
	// Tag the instances with optional tags
	Tags pulumi.StringArrayInput
	// Dedicated VPC subnet, shouldn't overlap with your current VPC's subnet
	VpcSubnet pulumi.StringPtrInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}
