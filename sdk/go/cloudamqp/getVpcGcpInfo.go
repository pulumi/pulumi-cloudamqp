// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudamqp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetVpcGcpInfo(ctx *pulumi.Context, args *GetVpcGcpInfoArgs, opts ...pulumi.InvokeOption) (*GetVpcGcpInfoResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVpcGcpInfoResult
	err := ctx.Invoke("cloudamqp:index/getVpcGcpInfo:getVpcGcpInfo", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcGcpInfo.
type GetVpcGcpInfoArgs struct {
	// The CloudAMQP instance identifier.
	//
	// ***Deprecated:*** from [v1.16.0], will be removed in next major version (v2.0)
	InstanceId *int `pulumi:"instanceId"`
	// Configurable sleep time (seconds) between retries when reading peering.
	// Default set to 10 seconds.
	Sleep *int `pulumi:"sleep"`
	// Configurable timeout time (seconds) before retries times out. Default
	// set to 1800 seconds.
	Timeout *int `pulumi:"timeout"`
	// The managed VPC identifier.
	//
	// ***Note:*** Available from [v1.16.0], will be removed in next major version (v2.0)
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getVpcGcpInfo.
type GetVpcGcpInfoResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId *int   `pulumi:"instanceId"`
	// The name of the VPC.
	Name string `pulumi:"name"`
	// VPC network uri.
	Network string  `pulumi:"network"`
	Sleep   *int    `pulumi:"sleep"`
	Timeout *int    `pulumi:"timeout"`
	VpcId   *string `pulumi:"vpcId"`
	// Dedicated VPC subnet.
	VpcSubnet string `pulumi:"vpcSubnet"`
}

func GetVpcGcpInfoOutput(ctx *pulumi.Context, args GetVpcGcpInfoOutputArgs, opts ...pulumi.InvokeOption) GetVpcGcpInfoResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetVpcGcpInfoResultOutput, error) {
			args := v.(GetVpcGcpInfoArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudamqp:index/getVpcGcpInfo:getVpcGcpInfo", args, GetVpcGcpInfoResultOutput{}, options).(GetVpcGcpInfoResultOutput), nil
		}).(GetVpcGcpInfoResultOutput)
}

// A collection of arguments for invoking getVpcGcpInfo.
type GetVpcGcpInfoOutputArgs struct {
	// The CloudAMQP instance identifier.
	//
	// ***Deprecated:*** from [v1.16.0], will be removed in next major version (v2.0)
	InstanceId pulumi.IntPtrInput `pulumi:"instanceId"`
	// Configurable sleep time (seconds) between retries when reading peering.
	// Default set to 10 seconds.
	Sleep pulumi.IntPtrInput `pulumi:"sleep"`
	// Configurable timeout time (seconds) before retries times out. Default
	// set to 1800 seconds.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// The managed VPC identifier.
	//
	// ***Note:*** Available from [v1.16.0], will be removed in next major version (v2.0)
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (GetVpcGcpInfoOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcGcpInfoArgs)(nil)).Elem()
}

// A collection of values returned by getVpcGcpInfo.
type GetVpcGcpInfoResultOutput struct{ *pulumi.OutputState }

func (GetVpcGcpInfoResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcGcpInfoResult)(nil)).Elem()
}

func (o GetVpcGcpInfoResultOutput) ToGetVpcGcpInfoResultOutput() GetVpcGcpInfoResultOutput {
	return o
}

func (o GetVpcGcpInfoResultOutput) ToGetVpcGcpInfoResultOutputWithContext(ctx context.Context) GetVpcGcpInfoResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetVpcGcpInfoResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcGcpInfoResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVpcGcpInfoResultOutput) InstanceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetVpcGcpInfoResult) *int { return v.InstanceId }).(pulumi.IntPtrOutput)
}

// The name of the VPC.
func (o GetVpcGcpInfoResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcGcpInfoResult) string { return v.Name }).(pulumi.StringOutput)
}

// VPC network uri.
func (o GetVpcGcpInfoResultOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcGcpInfoResult) string { return v.Network }).(pulumi.StringOutput)
}

func (o GetVpcGcpInfoResultOutput) Sleep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetVpcGcpInfoResult) *int { return v.Sleep }).(pulumi.IntPtrOutput)
}

func (o GetVpcGcpInfoResultOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetVpcGcpInfoResult) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

func (o GetVpcGcpInfoResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpcGcpInfoResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

// Dedicated VPC subnet.
func (o GetVpcGcpInfoResultOutput) VpcSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcGcpInfoResult) string { return v.VpcSubnet }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVpcGcpInfoResultOutput{})
}
