// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudamqp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve information about an already created CloudAMQP instance. In order
// to retrieve the correct information, the CoudAMQP instance identifier is needed.
func LookupInstance(ctx *pulumi.Context, args *LookupInstanceArgs, opts ...pulumi.InvokeOption) (*LookupInstanceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInstanceResult
	err := ctx.Invoke("cloudamqp:index/getInstance:getInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstance.
type LookupInstanceArgs struct {
	// The CloudAMQP instance identifier.
	InstanceId int `pulumi:"instanceId"`
}

// A collection of values returned by getInstance.
type LookupInstanceResult struct {
	// (Sensitive) The API key to secondary API handing alarms, integration etc.
	Apikey string `pulumi:"apikey"`
	// Information if the CloudAMQP instance runs either RabbitMQ or LavinMQ.
	Backend string `pulumi:"backend"`
	// Information if the CloudAMQP instance is shared or dedicated.
	Dedicated bool `pulumi:"dedicated"`
	// The external hostname for the CloudAMQP instance.
	Host string `pulumi:"host"`
	// The internal hostname for the CloudAMQP instance.
	HostInternal string `pulumi:"hostInternal"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId int    `pulumi:"instanceId"`
	// The name of the CloudAMQP instance.
	Name            string `pulumi:"name"`
	NoDefaultAlarms bool   `pulumi:"noDefaultAlarms"`
	// Number of nodes in the cluster of the CloudAMQP instance.
	Nodes int `pulumi:"nodes"`
	// The subscription plan for the CloudAMQP instance.
	Plan  string `pulumi:"plan"`
	Ready bool   `pulumi:"ready"`
	// The cloud platform and region that host the CloudAMQP instance,
	// `{platform}::{region}`.
	Region string `pulumi:"region"`
	// The version of installed Rabbit MQ.
	RmqVersion string `pulumi:"rmqVersion"`
	// Tags the CloudAMQP instance with categories.
	Tags []string `pulumi:"tags"`
	// (Sensitive) The AMQP URL (uses the internal hostname if the instance was created
	// with VPC), used by clients to connect for pub/sub.
	Url string `pulumi:"url"`
	// The virtual host configured in Rabbit MQ.
	Vhost string `pulumi:"vhost"`
	// ID of the VPC configured for the CloudAMQP instance.
	VpcId int `pulumi:"vpcId"`
	// Dedicated VPC subnet configured for the CloudAMQP instance.
	VpcSubnet string `pulumi:"vpcSubnet"`
}

func LookupInstanceOutput(ctx *pulumi.Context, args LookupInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupInstanceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupInstanceResultOutput, error) {
			args := v.(LookupInstanceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudamqp:index/getInstance:getInstance", args, LookupInstanceResultOutput{}, options).(LookupInstanceResultOutput), nil
		}).(LookupInstanceResultOutput)
}

// A collection of arguments for invoking getInstance.
type LookupInstanceOutputArgs struct {
	// The CloudAMQP instance identifier.
	InstanceId pulumi.IntInput `pulumi:"instanceId"`
}

func (LookupInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getInstance.
type LookupInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceResult)(nil)).Elem()
}

func (o LookupInstanceResultOutput) ToLookupInstanceResultOutput() LookupInstanceResultOutput {
	return o
}

func (o LookupInstanceResultOutput) ToLookupInstanceResultOutputWithContext(ctx context.Context) LookupInstanceResultOutput {
	return o
}

// (Sensitive) The API key to secondary API handing alarms, integration etc.
func (o LookupInstanceResultOutput) Apikey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Apikey }).(pulumi.StringOutput)
}

// Information if the CloudAMQP instance runs either RabbitMQ or LavinMQ.
func (o LookupInstanceResultOutput) Backend() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Backend }).(pulumi.StringOutput)
}

// Information if the CloudAMQP instance is shared or dedicated.
func (o LookupInstanceResultOutput) Dedicated() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInstanceResult) bool { return v.Dedicated }).(pulumi.BoolOutput)
}

// The external hostname for the CloudAMQP instance.
func (o LookupInstanceResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Host }).(pulumi.StringOutput)
}

// The internal hostname for the CloudAMQP instance.
func (o LookupInstanceResultOutput) HostInternal() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.HostInternal }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) InstanceId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInstanceResult) int { return v.InstanceId }).(pulumi.IntOutput)
}

// The name of the CloudAMQP instance.
func (o LookupInstanceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) NoDefaultAlarms() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInstanceResult) bool { return v.NoDefaultAlarms }).(pulumi.BoolOutput)
}

// Number of nodes in the cluster of the CloudAMQP instance.
func (o LookupInstanceResultOutput) Nodes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInstanceResult) int { return v.Nodes }).(pulumi.IntOutput)
}

// The subscription plan for the CloudAMQP instance.
func (o LookupInstanceResultOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Plan }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) Ready() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInstanceResult) bool { return v.Ready }).(pulumi.BoolOutput)
}

// The cloud platform and region that host the CloudAMQP instance,
// `{platform}::{region}`.
func (o LookupInstanceResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Region }).(pulumi.StringOutput)
}

// The version of installed Rabbit MQ.
func (o LookupInstanceResultOutput) RmqVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.RmqVersion }).(pulumi.StringOutput)
}

// Tags the CloudAMQP instance with categories.
func (o LookupInstanceResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// (Sensitive) The AMQP URL (uses the internal hostname if the instance was created
// with VPC), used by clients to connect for pub/sub.
func (o LookupInstanceResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Url }).(pulumi.StringOutput)
}

// The virtual host configured in Rabbit MQ.
func (o LookupInstanceResultOutput) Vhost() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Vhost }).(pulumi.StringOutput)
}

// ID of the VPC configured for the CloudAMQP instance.
func (o LookupInstanceResultOutput) VpcId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInstanceResult) int { return v.VpcId }).(pulumi.IntOutput)
}

// Dedicated VPC subnet configured for the CloudAMQP instance.
func (o LookupInstanceResultOutput) VpcSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.VpcSubnet }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInstanceResultOutput{})
}
