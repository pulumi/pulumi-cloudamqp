// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudamqp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to upgrade RabbitMQ version. Depending on initial versions of RabbitMQ and Erlang of the CloudAMQP instance, multiple runs may be needed to get to the latest or wanted version. Reason for this is certain supported RabbitMQ version will also automatically upgrade Erlang version.
//
// # There is three different ways to trigger the version upgrade
//
// > - Specify RabbitMQ version to upgrade to
// > - Upgrade to latest RabbitMQ version
// > - Old behaviour to upgrade to latest RabbitMQ version
//
// See, below example usage for the difference.
//
// Only available for dedicated subscription plans running ***RabbitMQ***.
//
// ## Example Usage
//
// <details>
//
//	<summary>
//	  <b>
//	    <i>Specify version upgrade, from v1.40.0</i>
//	  </b>
//	</summary>
//
// Specify the version to upgrade to. List available upgradable versions, use [CloudAMQP API](https://docs.cloudamqp.com/cloudamqp_api.html#get-available-versions).
// After the upgrade finished, there can still be newer versions available.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			instance, err := cloudamqp.NewInstance(ctx, "instance", &cloudamqp.InstanceArgs{
//				Name:   pulumi.String("rabbitmq-version-upgrade-test"),
//				Plan:   pulumi.String("bunny-1"),
//				Region: pulumi.String("amazon-web-services::us-west-1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudamqp.NewUpgradeRabbitmq(ctx, "upgrade", &cloudamqp.UpgradeRabbitmqArgs{
//				InstanceId: instance.ID(),
//				NewVersion: pulumi.String("3.13.2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// </details>
//
// <details>
//
//	<summary>
//	  <b>
//	    <i>Upgrade to latest possible version, from v1.40.0</i>
//	  </b>
//	</summary>
//
// This will upgrade RabbitMQ to the latest possible version detected by the data source `getUpgradableVersions`.
// Multiple runs can be needed to upgrade the version even further.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			instance, err := cloudamqp.NewInstance(ctx, "instance", &cloudamqp.InstanceArgs{
//				Name:   pulumi.String("rabbitmq-version-upgrade-test"),
//				Plan:   pulumi.String("bunny-1"),
//				Region: pulumi.String("amazon-web-services::us-west-1"),
//			})
//			if err != nil {
//				return err
//			}
//			upgradableVersions := instance.ID().ApplyT(func(id string) (cloudamqp.GetUpgradableVersionsResult, error) {
//				return cloudamqp.GetUpgradableVersionsResult(interface{}(cloudamqp.GetUpgradableVersionsOutput(ctx, cloudamqp.GetUpgradableVersionsOutputArgs{
//					InstanceId: id,
//				}, nil))), nil
//			}).(cloudamqp.GetUpgradableVersionsResultOutput)
//			_, err = cloudamqp.NewUpgradeRabbitmq(ctx, "upgrade", &cloudamqp.UpgradeRabbitmqArgs{
//				InstanceId:     instance.ID(),
//				CurrentVersion: instance.RmqVersion,
//				NewVersion: pulumi.String(upgradableVersions.ApplyT(func(upgradableVersions cloudamqp.GetUpgradableVersionsResult) (*string, error) {
//					return &upgradableVersions.NewRabbitmqVersion, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// </details>
//
// <details>
//
//	<summary>
//	  <b>
//	    <i>Upgrade to latest possible version, before v1.40.0</i>
//	  </b>
//	</summary>
//
// Old behaviour of the upgrading the RabbitMQ version. No longer recommended.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Retrieve latest possible upgradable versions for RabbitMQ and Erlang
//			_, err := cloudamqp.GetUpgradableVersions(ctx, &cloudamqp.GetUpgradableVersionsArgs{
//				InstanceId: instance.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Invoke automatically upgrade to latest possible upgradable versions for RabbitMQ and Erlang
//			_, err = cloudamqp.NewUpgradeRabbitmq(ctx, "upgrade", &cloudamqp.UpgradeRabbitmqArgs{
//				InstanceId: pulumi.Any(instance.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Retrieve latest possible upgradable versions for RabbitMQ and Erlang
//			_, err := cloudamqp.GetUpgradableVersions(ctx, &cloudamqp.GetUpgradableVersionsArgs{
//				InstanceId: instance.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// If newer version is still available to be upgradable in the data source, re-run again.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Retrieve latest possible upgradable versions for RabbitMQ and Erlang
//			_, err := cloudamqp.GetUpgradableVersions(ctx, &cloudamqp.GetUpgradableVersionsArgs{
//				InstanceId: instance.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Invoke automatically upgrade to latest possible upgradable versions for RabbitMQ and Erlang
//			_, err = cloudamqp.NewUpgradeRabbitmq(ctx, "upgrade", &cloudamqp.UpgradeRabbitmqArgs{
//				InstanceId: pulumi.Any(instance.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// </details>
//
// ## Important Upgrade Information
//
// > - All single node upgrades will require some downtime since RabbitMQ needs a restart.
// > - From RabbitMQ version 3.9, rolling upgrades between minor versions (e.g. 3.9 to 3.10), in a multi-node cluster are possible without downtime. This means that one node is upgraded at a time while the other nodes are still running. For versions older than 3.9, patch version upgrades (e.g. 3.8.x to 3.8.y) are possible without downtime in a multi-node cluster, but minor version upgrades will require downtime.
// > - Auto delete queues (queues that are marked AD) will be deleted during the update.
// > - Any custom plugins support has installed on your behalf will be disabled and you need to contact <support@cloudamqp.com> and ask to have them re-installed.
// > - TLS 1.0 and 1.1 will not be supported after the update.
//
// ## Multiple runs
//
// Depending on initial versions of RabbitMQ and Erlang of the CloudAMQP instance, multiple runs may be needed to get to the latest or wanted version.
//
// # Example steps needed when starting at RabbitMQ version 3.12.2
//
// | Version |        Supported upgrading        | Min version to upgrade |
// |---------|-----------------------------------|------------------------|
// | 3.12.2  | 3.12.4, 3.12.6, 3.12.10, 3.12.12, | 3.12.13                |
// | 3.12.13 | 3.13.2                            | 3.13.2                 |
// | 3.13.2  | -                                 | -                      |
//
// ## Import
//
// Not possible to import this resource.
type UpgradeRabbitmq struct {
	pulumi.CustomResourceState

	// Helper argument to change upgrade behaviour to latest possible version
	CurrentVersion pulumi.StringPtrOutput `pulumi:"currentVersion"`
	// The CloudAMQP instance identifier
	InstanceId pulumi.IntOutput `pulumi:"instanceId"`
	// The new version to upgrade to
	NewVersion pulumi.StringPtrOutput `pulumi:"newVersion"`
}

// NewUpgradeRabbitmq registers a new resource with the given unique name, arguments, and options.
func NewUpgradeRabbitmq(ctx *pulumi.Context,
	name string, args *UpgradeRabbitmqArgs, opts ...pulumi.ResourceOption) (*UpgradeRabbitmq, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UpgradeRabbitmq
	err := ctx.RegisterResource("cloudamqp:index/upgradeRabbitmq:UpgradeRabbitmq", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUpgradeRabbitmq gets an existing UpgradeRabbitmq resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUpgradeRabbitmq(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UpgradeRabbitmqState, opts ...pulumi.ResourceOption) (*UpgradeRabbitmq, error) {
	var resource UpgradeRabbitmq
	err := ctx.ReadResource("cloudamqp:index/upgradeRabbitmq:UpgradeRabbitmq", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UpgradeRabbitmq resources.
type upgradeRabbitmqState struct {
	// Helper argument to change upgrade behaviour to latest possible version
	CurrentVersion *string `pulumi:"currentVersion"`
	// The CloudAMQP instance identifier
	InstanceId *int `pulumi:"instanceId"`
	// The new version to upgrade to
	NewVersion *string `pulumi:"newVersion"`
}

type UpgradeRabbitmqState struct {
	// Helper argument to change upgrade behaviour to latest possible version
	CurrentVersion pulumi.StringPtrInput
	// The CloudAMQP instance identifier
	InstanceId pulumi.IntPtrInput
	// The new version to upgrade to
	NewVersion pulumi.StringPtrInput
}

func (UpgradeRabbitmqState) ElementType() reflect.Type {
	return reflect.TypeOf((*upgradeRabbitmqState)(nil)).Elem()
}

type upgradeRabbitmqArgs struct {
	// Helper argument to change upgrade behaviour to latest possible version
	CurrentVersion *string `pulumi:"currentVersion"`
	// The CloudAMQP instance identifier
	InstanceId int `pulumi:"instanceId"`
	// The new version to upgrade to
	NewVersion *string `pulumi:"newVersion"`
}

// The set of arguments for constructing a UpgradeRabbitmq resource.
type UpgradeRabbitmqArgs struct {
	// Helper argument to change upgrade behaviour to latest possible version
	CurrentVersion pulumi.StringPtrInput
	// The CloudAMQP instance identifier
	InstanceId pulumi.IntInput
	// The new version to upgrade to
	NewVersion pulumi.StringPtrInput
}

func (UpgradeRabbitmqArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*upgradeRabbitmqArgs)(nil)).Elem()
}

type UpgradeRabbitmqInput interface {
	pulumi.Input

	ToUpgradeRabbitmqOutput() UpgradeRabbitmqOutput
	ToUpgradeRabbitmqOutputWithContext(ctx context.Context) UpgradeRabbitmqOutput
}

func (*UpgradeRabbitmq) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeRabbitmq)(nil)).Elem()
}

func (i *UpgradeRabbitmq) ToUpgradeRabbitmqOutput() UpgradeRabbitmqOutput {
	return i.ToUpgradeRabbitmqOutputWithContext(context.Background())
}

func (i *UpgradeRabbitmq) ToUpgradeRabbitmqOutputWithContext(ctx context.Context) UpgradeRabbitmqOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeRabbitmqOutput)
}

// UpgradeRabbitmqArrayInput is an input type that accepts UpgradeRabbitmqArray and UpgradeRabbitmqArrayOutput values.
// You can construct a concrete instance of `UpgradeRabbitmqArrayInput` via:
//
//	UpgradeRabbitmqArray{ UpgradeRabbitmqArgs{...} }
type UpgradeRabbitmqArrayInput interface {
	pulumi.Input

	ToUpgradeRabbitmqArrayOutput() UpgradeRabbitmqArrayOutput
	ToUpgradeRabbitmqArrayOutputWithContext(context.Context) UpgradeRabbitmqArrayOutput
}

type UpgradeRabbitmqArray []UpgradeRabbitmqInput

func (UpgradeRabbitmqArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UpgradeRabbitmq)(nil)).Elem()
}

func (i UpgradeRabbitmqArray) ToUpgradeRabbitmqArrayOutput() UpgradeRabbitmqArrayOutput {
	return i.ToUpgradeRabbitmqArrayOutputWithContext(context.Background())
}

func (i UpgradeRabbitmqArray) ToUpgradeRabbitmqArrayOutputWithContext(ctx context.Context) UpgradeRabbitmqArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeRabbitmqArrayOutput)
}

// UpgradeRabbitmqMapInput is an input type that accepts UpgradeRabbitmqMap and UpgradeRabbitmqMapOutput values.
// You can construct a concrete instance of `UpgradeRabbitmqMapInput` via:
//
//	UpgradeRabbitmqMap{ "key": UpgradeRabbitmqArgs{...} }
type UpgradeRabbitmqMapInput interface {
	pulumi.Input

	ToUpgradeRabbitmqMapOutput() UpgradeRabbitmqMapOutput
	ToUpgradeRabbitmqMapOutputWithContext(context.Context) UpgradeRabbitmqMapOutput
}

type UpgradeRabbitmqMap map[string]UpgradeRabbitmqInput

func (UpgradeRabbitmqMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UpgradeRabbitmq)(nil)).Elem()
}

func (i UpgradeRabbitmqMap) ToUpgradeRabbitmqMapOutput() UpgradeRabbitmqMapOutput {
	return i.ToUpgradeRabbitmqMapOutputWithContext(context.Background())
}

func (i UpgradeRabbitmqMap) ToUpgradeRabbitmqMapOutputWithContext(ctx context.Context) UpgradeRabbitmqMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeRabbitmqMapOutput)
}

type UpgradeRabbitmqOutput struct{ *pulumi.OutputState }

func (UpgradeRabbitmqOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeRabbitmq)(nil)).Elem()
}

func (o UpgradeRabbitmqOutput) ToUpgradeRabbitmqOutput() UpgradeRabbitmqOutput {
	return o
}

func (o UpgradeRabbitmqOutput) ToUpgradeRabbitmqOutputWithContext(ctx context.Context) UpgradeRabbitmqOutput {
	return o
}

// Helper argument to change upgrade behaviour to latest possible version
func (o UpgradeRabbitmqOutput) CurrentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeRabbitmq) pulumi.StringPtrOutput { return v.CurrentVersion }).(pulumi.StringPtrOutput)
}

// The CloudAMQP instance identifier
func (o UpgradeRabbitmqOutput) InstanceId() pulumi.IntOutput {
	return o.ApplyT(func(v *UpgradeRabbitmq) pulumi.IntOutput { return v.InstanceId }).(pulumi.IntOutput)
}

// The new version to upgrade to
func (o UpgradeRabbitmqOutput) NewVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeRabbitmq) pulumi.StringPtrOutput { return v.NewVersion }).(pulumi.StringPtrOutput)
}

type UpgradeRabbitmqArrayOutput struct{ *pulumi.OutputState }

func (UpgradeRabbitmqArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UpgradeRabbitmq)(nil)).Elem()
}

func (o UpgradeRabbitmqArrayOutput) ToUpgradeRabbitmqArrayOutput() UpgradeRabbitmqArrayOutput {
	return o
}

func (o UpgradeRabbitmqArrayOutput) ToUpgradeRabbitmqArrayOutputWithContext(ctx context.Context) UpgradeRabbitmqArrayOutput {
	return o
}

func (o UpgradeRabbitmqArrayOutput) Index(i pulumi.IntInput) UpgradeRabbitmqOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UpgradeRabbitmq {
		return vs[0].([]*UpgradeRabbitmq)[vs[1].(int)]
	}).(UpgradeRabbitmqOutput)
}

type UpgradeRabbitmqMapOutput struct{ *pulumi.OutputState }

func (UpgradeRabbitmqMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UpgradeRabbitmq)(nil)).Elem()
}

func (o UpgradeRabbitmqMapOutput) ToUpgradeRabbitmqMapOutput() UpgradeRabbitmqMapOutput {
	return o
}

func (o UpgradeRabbitmqMapOutput) ToUpgradeRabbitmqMapOutputWithContext(ctx context.Context) UpgradeRabbitmqMapOutput {
	return o
}

func (o UpgradeRabbitmqMapOutput) MapIndex(k pulumi.StringInput) UpgradeRabbitmqOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UpgradeRabbitmq {
		return vs[0].(map[string]*UpgradeRabbitmq)[vs[1].(string)]
	}).(UpgradeRabbitmqOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeRabbitmqInput)(nil)).Elem(), &UpgradeRabbitmq{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeRabbitmqArrayInput)(nil)).Elem(), UpgradeRabbitmqArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeRabbitmqMapInput)(nil)).Elem(), UpgradeRabbitmqMap{})
	pulumi.RegisterOutputType(UpgradeRabbitmqOutput{})
	pulumi.RegisterOutputType(UpgradeRabbitmqArrayOutput{})
	pulumi.RegisterOutputType(UpgradeRabbitmqMapOutput{})
}
