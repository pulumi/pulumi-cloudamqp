// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudamqp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to create and manage third party log integrations for a CloudAMQP instance. Once configured, the logs produced will be forward to corresponding integration.
//
// Only available for dedicated subscription plans.
//
// ## Argument Reference (cloudwatchlog)
//
// Cloudwatch argument reference and example. Create an IAM user with programmatic access and the following permissions:
//
// * CreateLogGroup
// * CreateLogStream
// * DescribeLogGroups
// * DescribeLogStreams
// * PutLogEvents
//
// ## Integration service reference
//
// Valid names for third party log integration.
//
// | Name       | Description |
// |------------|---------------------------------------------------------------|
// | cloudwatchlog | Create a IAM with programmatic access. |
// | logentries | Create a Logentries token at https://logentries.com/app#/add-log/manual  |
// | loggly     | Create a Loggly token at https://your-company}.loggly.com/tokens |
// | papertrail | Create a Papertrail endpoint https://papertrailapp.com/systems/setup |
// | splunk     | Create a HTTP Event Collector token at `https://<your-splunk>.cloud.splunk.com/en-US/manager/search/http-eventcollector` |
// | datadog       | Create a Datadog API key at app.datadoghq.com |
// | stackdriver   | Create a service account and add 'monitor metrics writer' role from your Google Cloud Account |
// | scalyr        | Create a Log write token at https://app.scalyr.com/keys |
// | coralogix     | Create Send-Your-Data API key https://coralogix.com/docs/send-your-data-api-key/ |
//
// ## Integration Type reference
//
// Valid arguments for third party log integrations.
//
// Required arguments for all integrations: name
//
// | Name | Type | Required arguments |
// | ---- | ---- | ---- |
// | CloudWatch | cloudwatchlog | access_key_id, secret_access_key, region |
// | Log Entries | logentries | token |
// | Loggly | loggly | token |
// | Papertrail | papertrail | url |
// | Splunk | splunk | token, host_port, sourcetype |
// | Data Dog | datadog | region, api_keys, tags |
// | Stackdriver | stackdriver | credentials |
// | Scalyr | scalyr | token, host |
// | Coralogix | coralogix | private_key, endpoint, application, subsystem |
//
// ***Note:*** Stackdriver (v1.20.2 or earlier versions) required arguments  : project_id, private_key, clientEmail
//
// ## Dependency
//
// This resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.
//
// ## Import
//
// `cloudamqp_integration_log`can be imported using the resource identifier together with CloudAMQP instance identifier. The name and identifier are CSV separated, see example below.
//
// ```sh
//
//	$ pulumi import cloudamqp:index/integrationLog:IntegrationLog <resource_name> <id>,<instance_id>`
//
// ```
type IntegrationLog struct {
	pulumi.CustomResourceState

	// AWS access key identifier.
	AccessKeyId pulumi.StringPtrOutput `pulumi:"accessKeyId"`
	// The API key.
	ApiKey pulumi.StringPtrOutput `pulumi:"apiKey"`
	// The application name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
	Application pulumi.StringPtrOutput `pulumi:"application"`
	// The client email registered for the integration service.
	ClientEmail pulumi.StringOutput `pulumi:"clientEmail"`
	// Google Service Account private key credentials.
	Credentials pulumi.StringPtrOutput `pulumi:"credentials"`
	// The syslog destination to send the logs to for Coralogix. See endpoint [documentations](https://coralogix.com/docs/coralogix-endpoints/).
	Endpoint pulumi.StringPtrOutput `pulumi:"endpoint"`
	// The host for Scalyr integration. (app.scalyr.com, app.eu.scalyr.com)
	Host pulumi.StringPtrOutput `pulumi:"host"`
	// Destination to send the logs.
	HostPort pulumi.StringPtrOutput `pulumi:"hostPort"`
	// Instance identifier used to make proxy calls
	InstanceId pulumi.IntOutput `pulumi:"instanceId"`
	// The name of the third party log integration. See
	Name pulumi.StringOutput `pulumi:"name"`
	// The private access key.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// Private key identifier. (Stackdriver)
	PrivateKeyId pulumi.StringOutput `pulumi:"privateKeyId"`
	// The project identifier.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Region hosting the integration service.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// AWS secret access key.
	SecretAccessKey pulumi.StringPtrOutput `pulumi:"secretAccessKey"`
	// Assign source type to the data exported, eg. generic_single_line. (Splunk)
	Sourcetype pulumi.StringPtrOutput `pulumi:"sourcetype"`
	// The subsystem name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
	//
	// This is the full list of all arguments. Only a subset of arguments are used based on which type of integration used. See Integration Type reference table below for more information.
	Subsystem pulumi.StringPtrOutput `pulumi:"subsystem"`
	// Tag the integration, e.g. env=prod, region=europe.
	Tags pulumi.StringPtrOutput `pulumi:"tags"`
	// Token used for authentication.
	Token pulumi.StringPtrOutput `pulumi:"token"`
	// Endpoint to log integration.
	Url pulumi.StringPtrOutput `pulumi:"url"`
}

// NewIntegrationLog registers a new resource with the given unique name, arguments, and options.
func NewIntegrationLog(ctx *pulumi.Context,
	name string, args *IntegrationLogArgs, opts ...pulumi.ResourceOption) (*IntegrationLog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.AccessKeyId != nil {
		args.AccessKeyId = pulumi.ToSecret(args.AccessKeyId).(pulumi.StringPtrInput)
	}
	if args.ApiKey != nil {
		args.ApiKey = pulumi.ToSecret(args.ApiKey).(pulumi.StringPtrInput)
	}
	if args.Credentials != nil {
		args.Credentials = pulumi.ToSecret(args.Credentials).(pulumi.StringPtrInput)
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringPtrInput)
	}
	if args.PrivateKeyId != nil {
		args.PrivateKeyId = pulumi.ToSecret(args.PrivateKeyId).(pulumi.StringPtrInput)
	}
	if args.SecretAccessKey != nil {
		args.SecretAccessKey = pulumi.ToSecret(args.SecretAccessKey).(pulumi.StringPtrInput)
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessKeyId",
		"apiKey",
		"credentials",
		"privateKey",
		"privateKeyId",
		"secretAccessKey",
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationLog
	err := ctx.RegisterResource("cloudamqp:index/integrationLog:IntegrationLog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationLog gets an existing IntegrationLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationLogState, opts ...pulumi.ResourceOption) (*IntegrationLog, error) {
	var resource IntegrationLog
	err := ctx.ReadResource("cloudamqp:index/integrationLog:IntegrationLog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationLog resources.
type integrationLogState struct {
	// AWS access key identifier.
	AccessKeyId *string `pulumi:"accessKeyId"`
	// The API key.
	ApiKey *string `pulumi:"apiKey"`
	// The application name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
	Application *string `pulumi:"application"`
	// The client email registered for the integration service.
	ClientEmail *string `pulumi:"clientEmail"`
	// Google Service Account private key credentials.
	Credentials *string `pulumi:"credentials"`
	// The syslog destination to send the logs to for Coralogix. See endpoint [documentations](https://coralogix.com/docs/coralogix-endpoints/).
	Endpoint *string `pulumi:"endpoint"`
	// The host for Scalyr integration. (app.scalyr.com, app.eu.scalyr.com)
	Host *string `pulumi:"host"`
	// Destination to send the logs.
	HostPort *string `pulumi:"hostPort"`
	// Instance identifier used to make proxy calls
	InstanceId *int `pulumi:"instanceId"`
	// The name of the third party log integration. See
	Name *string `pulumi:"name"`
	// The private access key.
	PrivateKey *string `pulumi:"privateKey"`
	// Private key identifier. (Stackdriver)
	PrivateKeyId *string `pulumi:"privateKeyId"`
	// The project identifier.
	ProjectId *string `pulumi:"projectId"`
	// Region hosting the integration service.
	Region *string `pulumi:"region"`
	// AWS secret access key.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// Assign source type to the data exported, eg. generic_single_line. (Splunk)
	Sourcetype *string `pulumi:"sourcetype"`
	// The subsystem name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
	//
	// This is the full list of all arguments. Only a subset of arguments are used based on which type of integration used. See Integration Type reference table below for more information.
	Subsystem *string `pulumi:"subsystem"`
	// Tag the integration, e.g. env=prod, region=europe.
	Tags *string `pulumi:"tags"`
	// Token used for authentication.
	Token *string `pulumi:"token"`
	// Endpoint to log integration.
	Url *string `pulumi:"url"`
}

type IntegrationLogState struct {
	// AWS access key identifier.
	AccessKeyId pulumi.StringPtrInput
	// The API key.
	ApiKey pulumi.StringPtrInput
	// The application name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
	Application pulumi.StringPtrInput
	// The client email registered for the integration service.
	ClientEmail pulumi.StringPtrInput
	// Google Service Account private key credentials.
	Credentials pulumi.StringPtrInput
	// The syslog destination to send the logs to for Coralogix. See endpoint [documentations](https://coralogix.com/docs/coralogix-endpoints/).
	Endpoint pulumi.StringPtrInput
	// The host for Scalyr integration. (app.scalyr.com, app.eu.scalyr.com)
	Host pulumi.StringPtrInput
	// Destination to send the logs.
	HostPort pulumi.StringPtrInput
	// Instance identifier used to make proxy calls
	InstanceId pulumi.IntPtrInput
	// The name of the third party log integration. See
	Name pulumi.StringPtrInput
	// The private access key.
	PrivateKey pulumi.StringPtrInput
	// Private key identifier. (Stackdriver)
	PrivateKeyId pulumi.StringPtrInput
	// The project identifier.
	ProjectId pulumi.StringPtrInput
	// Region hosting the integration service.
	Region pulumi.StringPtrInput
	// AWS secret access key.
	SecretAccessKey pulumi.StringPtrInput
	// Assign source type to the data exported, eg. generic_single_line. (Splunk)
	Sourcetype pulumi.StringPtrInput
	// The subsystem name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
	//
	// This is the full list of all arguments. Only a subset of arguments are used based on which type of integration used. See Integration Type reference table below for more information.
	Subsystem pulumi.StringPtrInput
	// Tag the integration, e.g. env=prod, region=europe.
	Tags pulumi.StringPtrInput
	// Token used for authentication.
	Token pulumi.StringPtrInput
	// Endpoint to log integration.
	Url pulumi.StringPtrInput
}

func (IntegrationLogState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationLogState)(nil)).Elem()
}

type integrationLogArgs struct {
	// AWS access key identifier.
	AccessKeyId *string `pulumi:"accessKeyId"`
	// The API key.
	ApiKey *string `pulumi:"apiKey"`
	// The application name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
	Application *string `pulumi:"application"`
	// The client email registered for the integration service.
	ClientEmail *string `pulumi:"clientEmail"`
	// Google Service Account private key credentials.
	Credentials *string `pulumi:"credentials"`
	// The syslog destination to send the logs to for Coralogix. See endpoint [documentations](https://coralogix.com/docs/coralogix-endpoints/).
	Endpoint *string `pulumi:"endpoint"`
	// The host for Scalyr integration. (app.scalyr.com, app.eu.scalyr.com)
	Host *string `pulumi:"host"`
	// Destination to send the logs.
	HostPort *string `pulumi:"hostPort"`
	// Instance identifier used to make proxy calls
	InstanceId int `pulumi:"instanceId"`
	// The name of the third party log integration. See
	Name *string `pulumi:"name"`
	// The private access key.
	PrivateKey *string `pulumi:"privateKey"`
	// Private key identifier. (Stackdriver)
	PrivateKeyId *string `pulumi:"privateKeyId"`
	// The project identifier.
	ProjectId *string `pulumi:"projectId"`
	// Region hosting the integration service.
	Region *string `pulumi:"region"`
	// AWS secret access key.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// Assign source type to the data exported, eg. generic_single_line. (Splunk)
	Sourcetype *string `pulumi:"sourcetype"`
	// The subsystem name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
	//
	// This is the full list of all arguments. Only a subset of arguments are used based on which type of integration used. See Integration Type reference table below for more information.
	Subsystem *string `pulumi:"subsystem"`
	// Tag the integration, e.g. env=prod, region=europe.
	Tags *string `pulumi:"tags"`
	// Token used for authentication.
	Token *string `pulumi:"token"`
	// Endpoint to log integration.
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a IntegrationLog resource.
type IntegrationLogArgs struct {
	// AWS access key identifier.
	AccessKeyId pulumi.StringPtrInput
	// The API key.
	ApiKey pulumi.StringPtrInput
	// The application name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
	Application pulumi.StringPtrInput
	// The client email registered for the integration service.
	ClientEmail pulumi.StringPtrInput
	// Google Service Account private key credentials.
	Credentials pulumi.StringPtrInput
	// The syslog destination to send the logs to for Coralogix. See endpoint [documentations](https://coralogix.com/docs/coralogix-endpoints/).
	Endpoint pulumi.StringPtrInput
	// The host for Scalyr integration. (app.scalyr.com, app.eu.scalyr.com)
	Host pulumi.StringPtrInput
	// Destination to send the logs.
	HostPort pulumi.StringPtrInput
	// Instance identifier used to make proxy calls
	InstanceId pulumi.IntInput
	// The name of the third party log integration. See
	Name pulumi.StringPtrInput
	// The private access key.
	PrivateKey pulumi.StringPtrInput
	// Private key identifier. (Stackdriver)
	PrivateKeyId pulumi.StringPtrInput
	// The project identifier.
	ProjectId pulumi.StringPtrInput
	// Region hosting the integration service.
	Region pulumi.StringPtrInput
	// AWS secret access key.
	SecretAccessKey pulumi.StringPtrInput
	// Assign source type to the data exported, eg. generic_single_line. (Splunk)
	Sourcetype pulumi.StringPtrInput
	// The subsystem name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
	//
	// This is the full list of all arguments. Only a subset of arguments are used based on which type of integration used. See Integration Type reference table below for more information.
	Subsystem pulumi.StringPtrInput
	// Tag the integration, e.g. env=prod, region=europe.
	Tags pulumi.StringPtrInput
	// Token used for authentication.
	Token pulumi.StringPtrInput
	// Endpoint to log integration.
	Url pulumi.StringPtrInput
}

func (IntegrationLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationLogArgs)(nil)).Elem()
}

type IntegrationLogInput interface {
	pulumi.Input

	ToIntegrationLogOutput() IntegrationLogOutput
	ToIntegrationLogOutputWithContext(ctx context.Context) IntegrationLogOutput
}

func (*IntegrationLog) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationLog)(nil)).Elem()
}

func (i *IntegrationLog) ToIntegrationLogOutput() IntegrationLogOutput {
	return i.ToIntegrationLogOutputWithContext(context.Background())
}

func (i *IntegrationLog) ToIntegrationLogOutputWithContext(ctx context.Context) IntegrationLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationLogOutput)
}

// IntegrationLogArrayInput is an input type that accepts IntegrationLogArray and IntegrationLogArrayOutput values.
// You can construct a concrete instance of `IntegrationLogArrayInput` via:
//
//	IntegrationLogArray{ IntegrationLogArgs{...} }
type IntegrationLogArrayInput interface {
	pulumi.Input

	ToIntegrationLogArrayOutput() IntegrationLogArrayOutput
	ToIntegrationLogArrayOutputWithContext(context.Context) IntegrationLogArrayOutput
}

type IntegrationLogArray []IntegrationLogInput

func (IntegrationLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationLog)(nil)).Elem()
}

func (i IntegrationLogArray) ToIntegrationLogArrayOutput() IntegrationLogArrayOutput {
	return i.ToIntegrationLogArrayOutputWithContext(context.Background())
}

func (i IntegrationLogArray) ToIntegrationLogArrayOutputWithContext(ctx context.Context) IntegrationLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationLogArrayOutput)
}

// IntegrationLogMapInput is an input type that accepts IntegrationLogMap and IntegrationLogMapOutput values.
// You can construct a concrete instance of `IntegrationLogMapInput` via:
//
//	IntegrationLogMap{ "key": IntegrationLogArgs{...} }
type IntegrationLogMapInput interface {
	pulumi.Input

	ToIntegrationLogMapOutput() IntegrationLogMapOutput
	ToIntegrationLogMapOutputWithContext(context.Context) IntegrationLogMapOutput
}

type IntegrationLogMap map[string]IntegrationLogInput

func (IntegrationLogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationLog)(nil)).Elem()
}

func (i IntegrationLogMap) ToIntegrationLogMapOutput() IntegrationLogMapOutput {
	return i.ToIntegrationLogMapOutputWithContext(context.Background())
}

func (i IntegrationLogMap) ToIntegrationLogMapOutputWithContext(ctx context.Context) IntegrationLogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationLogMapOutput)
}

type IntegrationLogOutput struct{ *pulumi.OutputState }

func (IntegrationLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationLog)(nil)).Elem()
}

func (o IntegrationLogOutput) ToIntegrationLogOutput() IntegrationLogOutput {
	return o
}

func (o IntegrationLogOutput) ToIntegrationLogOutputWithContext(ctx context.Context) IntegrationLogOutput {
	return o
}

// AWS access key identifier.
func (o IntegrationLogOutput) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringPtrOutput { return v.AccessKeyId }).(pulumi.StringPtrOutput)
}

// The API key.
func (o IntegrationLogOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringPtrOutput { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// The application name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
func (o IntegrationLogOutput) Application() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringPtrOutput { return v.Application }).(pulumi.StringPtrOutput)
}

// The client email registered for the integration service.
func (o IntegrationLogOutput) ClientEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringOutput { return v.ClientEmail }).(pulumi.StringOutput)
}

// Google Service Account private key credentials.
func (o IntegrationLogOutput) Credentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringPtrOutput { return v.Credentials }).(pulumi.StringPtrOutput)
}

// The syslog destination to send the logs to for Coralogix. See endpoint [documentations](https://coralogix.com/docs/coralogix-endpoints/).
func (o IntegrationLogOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringPtrOutput { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The host for Scalyr integration. (app.scalyr.com, app.eu.scalyr.com)
func (o IntegrationLogOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringPtrOutput { return v.Host }).(pulumi.StringPtrOutput)
}

// Destination to send the logs.
func (o IntegrationLogOutput) HostPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringPtrOutput { return v.HostPort }).(pulumi.StringPtrOutput)
}

// Instance identifier used to make proxy calls
func (o IntegrationLogOutput) InstanceId() pulumi.IntOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.IntOutput { return v.InstanceId }).(pulumi.IntOutput)
}

// The name of the third party log integration. See
func (o IntegrationLogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The private access key.
func (o IntegrationLogOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// Private key identifier. (Stackdriver)
func (o IntegrationLogOutput) PrivateKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringOutput { return v.PrivateKeyId }).(pulumi.StringOutput)
}

// The project identifier.
func (o IntegrationLogOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Region hosting the integration service.
func (o IntegrationLogOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// AWS secret access key.
func (o IntegrationLogOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringPtrOutput { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// Assign source type to the data exported, eg. generic_single_line. (Splunk)
func (o IntegrationLogOutput) Sourcetype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringPtrOutput { return v.Sourcetype }).(pulumi.StringPtrOutput)
}

// The subsystem name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
//
// This is the full list of all arguments. Only a subset of arguments are used based on which type of integration used. See Integration Type reference table below for more information.
func (o IntegrationLogOutput) Subsystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringPtrOutput { return v.Subsystem }).(pulumi.StringPtrOutput)
}

// Tag the integration, e.g. env=prod, region=europe.
func (o IntegrationLogOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringPtrOutput { return v.Tags }).(pulumi.StringPtrOutput)
}

// Token used for authentication.
func (o IntegrationLogOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringPtrOutput { return v.Token }).(pulumi.StringPtrOutput)
}

// Endpoint to log integration.
func (o IntegrationLogOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationLog) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

type IntegrationLogArrayOutput struct{ *pulumi.OutputState }

func (IntegrationLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationLog)(nil)).Elem()
}

func (o IntegrationLogArrayOutput) ToIntegrationLogArrayOutput() IntegrationLogArrayOutput {
	return o
}

func (o IntegrationLogArrayOutput) ToIntegrationLogArrayOutputWithContext(ctx context.Context) IntegrationLogArrayOutput {
	return o
}

func (o IntegrationLogArrayOutput) Index(i pulumi.IntInput) IntegrationLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationLog {
		return vs[0].([]*IntegrationLog)[vs[1].(int)]
	}).(IntegrationLogOutput)
}

type IntegrationLogMapOutput struct{ *pulumi.OutputState }

func (IntegrationLogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationLog)(nil)).Elem()
}

func (o IntegrationLogMapOutput) ToIntegrationLogMapOutput() IntegrationLogMapOutput {
	return o
}

func (o IntegrationLogMapOutput) ToIntegrationLogMapOutputWithContext(ctx context.Context) IntegrationLogMapOutput {
	return o
}

func (o IntegrationLogMapOutput) MapIndex(k pulumi.StringInput) IntegrationLogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationLog {
		return vs[0].(map[string]*IntegrationLog)[vs[1].(string)]
	}).(IntegrationLogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationLogInput)(nil)).Elem(), &IntegrationLog{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationLogArrayInput)(nil)).Elem(), IntegrationLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationLogMapInput)(nil)).Elem(), IntegrationLogMap{})
	pulumi.RegisterOutputType(IntegrationLogOutput{})
	pulumi.RegisterOutputType(IntegrationLogArrayOutput{})
	pulumi.RegisterOutputType(IntegrationLogMapOutput{})
}
