// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudamqp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationMetricState extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationMetricState Empty = new IntegrationMetricState();

    /**
     * AWS access key identifier. (Cloudwatch)
     * 
     */
    @Import(name="accessKeyId")
    private @Nullable Output<String> accessKeyId;

    /**
     * @return AWS access key identifier. (Cloudwatch)
     * 
     */
    public Optional<Output<String>> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }

    /**
     * The API key for the integration service. (Librato)
     * 
     */
    @Import(name="apiKey")
    private @Nullable Output<String> apiKey;

    /**
     * @return The API key for the integration service. (Librato)
     * 
     */
    public Optional<Output<String>> apiKey() {
        return Optional.ofNullable(this.apiKey);
    }

    /**
     * The client email. (Stackdriver)
     * 
     */
    @Import(name="clientEmail")
    private @Nullable Output<String> clientEmail;

    /**
     * @return The client email. (Stackdriver)
     * 
     */
    public Optional<Output<String>> clientEmail() {
        return Optional.ofNullable(this.clientEmail);
    }

    /**
     * Base64Encoded credentials. (Stackdriver)
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<String> credentials;

    /**
     * @return Base64Encoded credentials. (Stackdriver)
     * 
     */
    public Optional<Output<String>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * The email address registred for the integration service. (Librato)
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return The email address registred for the integration service. (Librato)
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * External identifier that match the role you created. (Cloudwatch)
     * 
     */
    @Import(name="iamExternalId")
    private @Nullable Output<String> iamExternalId;

    /**
     * @return External identifier that match the role you created. (Cloudwatch)
     * 
     */
    public Optional<Output<String>> iamExternalId() {
        return Optional.ofNullable(this.iamExternalId);
    }

    /**
     * The ARN of the role to be assumed when publishing metrics. (Cloudwatch)
     * 
     */
    @Import(name="iamRole")
    private @Nullable Output<String> iamRole;

    /**
     * @return The ARN of the role to be assumed when publishing metrics. (Cloudwatch)
     * 
     */
    public Optional<Output<String>> iamRole() {
        return Optional.ofNullable(this.iamRole);
    }

    /**
     * (optional) Include Auto-Delete queues
     * 
     */
    @Import(name="includeAdQueues")
    private @Nullable Output<Boolean> includeAdQueues;

    /**
     * @return (optional) Include Auto-Delete queues
     * 
     */
    public Optional<Output<Boolean>> includeAdQueues() {
        return Optional.ofNullable(this.includeAdQueues);
    }

    /**
     * Instance identifier
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<Integer> instanceId;

    /**
     * @return Instance identifier
     * 
     */
    public Optional<Output<Integer>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * The license key registred for the integration service. (New Relic)
     * 
     */
    @Import(name="licenseKey")
    private @Nullable Output<String> licenseKey;

    /**
     * @return The license key registred for the integration service. (New Relic)
     * 
     */
    public Optional<Output<String>> licenseKey() {
        return Optional.ofNullable(this.licenseKey);
    }

    /**
     * The name of metrics integration
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of metrics integration
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The private key. (Stackdriver)
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return The private key. (Stackdriver)
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * Private key identifier. (Stackdriver)
     * 
     */
    @Import(name="privateKeyId")
    private @Nullable Output<String> privateKeyId;

    /**
     * @return Private key identifier. (Stackdriver)
     * 
     */
    public Optional<Output<String>> privateKeyId() {
        return Optional.ofNullable(this.privateKeyId);
    }

    /**
     * Project ID. (Stackdriver)
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Project ID. (Stackdriver)
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * (optional) allowlist using regular expression
     * 
     */
    @Import(name="queueAllowlist")
    private @Nullable Output<String> queueAllowlist;

    /**
     * @return (optional) allowlist using regular expression
     * 
     */
    public Optional<Output<String>> queueAllowlist() {
        return Optional.ofNullable(this.queueAllowlist);
    }

    /**
     * **Deprecated**
     * 
     * @deprecated
     * use queue_allowlist instead
     * 
     */
    @Deprecated /* use queue_allowlist instead */
    @Import(name="queueWhitelist")
    private @Nullable Output<String> queueWhitelist;

    /**
     * @return **Deprecated**
     * 
     * @deprecated
     * use queue_allowlist instead
     * 
     */
    @Deprecated /* use queue_allowlist instead */
    public Optional<Output<String>> queueWhitelist() {
        return Optional.ofNullable(this.queueWhitelist);
    }

    /**
     * AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * AWS secret key. (Cloudwatch)
     * 
     */
    @Import(name="secretAccessKey")
    private @Nullable Output<String> secretAccessKey;

    /**
     * @return AWS secret key. (Cloudwatch)
     * 
     */
    public Optional<Output<String>> secretAccessKey() {
        return Optional.ofNullable(this.secretAccessKey);
    }

    /**
     * (optional) tags. E.g. env=prod,region=europe
     * 
     */
    @Import(name="tags")
    private @Nullable Output<String> tags;

    /**
     * @return (optional) tags. E.g. env=prod,region=europe
     * 
     */
    public Optional<Output<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * (optional) allowlist using regular expression
     * 
     */
    @Import(name="vhostAllowlist")
    private @Nullable Output<String> vhostAllowlist;

    /**
     * @return (optional) allowlist using regular expression
     * 
     */
    public Optional<Output<String>> vhostAllowlist() {
        return Optional.ofNullable(this.vhostAllowlist);
    }

    /**
     * **Deprecated**
     * 
     * @deprecated
     * use vhost_allowlist instead
     * 
     */
    @Deprecated /* use vhost_allowlist instead */
    @Import(name="vhostWhitelist")
    private @Nullable Output<String> vhostWhitelist;

    /**
     * @return **Deprecated**
     * 
     * @deprecated
     * use vhost_allowlist instead
     * 
     */
    @Deprecated /* use vhost_allowlist instead */
    public Optional<Output<String>> vhostWhitelist() {
        return Optional.ofNullable(this.vhostWhitelist);
    }

    private IntegrationMetricState() {}

    private IntegrationMetricState(IntegrationMetricState $) {
        this.accessKeyId = $.accessKeyId;
        this.apiKey = $.apiKey;
        this.clientEmail = $.clientEmail;
        this.credentials = $.credentials;
        this.email = $.email;
        this.iamExternalId = $.iamExternalId;
        this.iamRole = $.iamRole;
        this.includeAdQueues = $.includeAdQueues;
        this.instanceId = $.instanceId;
        this.licenseKey = $.licenseKey;
        this.name = $.name;
        this.privateKey = $.privateKey;
        this.privateKeyId = $.privateKeyId;
        this.projectId = $.projectId;
        this.queueAllowlist = $.queueAllowlist;
        this.queueWhitelist = $.queueWhitelist;
        this.region = $.region;
        this.secretAccessKey = $.secretAccessKey;
        this.tags = $.tags;
        this.vhostAllowlist = $.vhostAllowlist;
        this.vhostWhitelist = $.vhostWhitelist;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationMetricState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationMetricState $;

        public Builder() {
            $ = new IntegrationMetricState();
        }

        public Builder(IntegrationMetricState defaults) {
            $ = new IntegrationMetricState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyId AWS access key identifier. (Cloudwatch)
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(@Nullable Output<String> accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * @param accessKeyId AWS access key identifier. (Cloudwatch)
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(String accessKeyId) {
            return accessKeyId(Output.of(accessKeyId));
        }

        /**
         * @param apiKey The API key for the integration service. (Librato)
         * 
         * @return builder
         * 
         */
        public Builder apiKey(@Nullable Output<String> apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param apiKey The API key for the integration service. (Librato)
         * 
         * @return builder
         * 
         */
        public Builder apiKey(String apiKey) {
            return apiKey(Output.of(apiKey));
        }

        /**
         * @param clientEmail The client email. (Stackdriver)
         * 
         * @return builder
         * 
         */
        public Builder clientEmail(@Nullable Output<String> clientEmail) {
            $.clientEmail = clientEmail;
            return this;
        }

        /**
         * @param clientEmail The client email. (Stackdriver)
         * 
         * @return builder
         * 
         */
        public Builder clientEmail(String clientEmail) {
            return clientEmail(Output.of(clientEmail));
        }

        /**
         * @param credentials Base64Encoded credentials. (Stackdriver)
         * 
         * @return builder
         * 
         */
        public Builder credentials(@Nullable Output<String> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials Base64Encoded credentials. (Stackdriver)
         * 
         * @return builder
         * 
         */
        public Builder credentials(String credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param email The email address registred for the integration service. (Librato)
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The email address registred for the integration service. (Librato)
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param iamExternalId External identifier that match the role you created. (Cloudwatch)
         * 
         * @return builder
         * 
         */
        public Builder iamExternalId(@Nullable Output<String> iamExternalId) {
            $.iamExternalId = iamExternalId;
            return this;
        }

        /**
         * @param iamExternalId External identifier that match the role you created. (Cloudwatch)
         * 
         * @return builder
         * 
         */
        public Builder iamExternalId(String iamExternalId) {
            return iamExternalId(Output.of(iamExternalId));
        }

        /**
         * @param iamRole The ARN of the role to be assumed when publishing metrics. (Cloudwatch)
         * 
         * @return builder
         * 
         */
        public Builder iamRole(@Nullable Output<String> iamRole) {
            $.iamRole = iamRole;
            return this;
        }

        /**
         * @param iamRole The ARN of the role to be assumed when publishing metrics. (Cloudwatch)
         * 
         * @return builder
         * 
         */
        public Builder iamRole(String iamRole) {
            return iamRole(Output.of(iamRole));
        }

        /**
         * @param includeAdQueues (optional) Include Auto-Delete queues
         * 
         * @return builder
         * 
         */
        public Builder includeAdQueues(@Nullable Output<Boolean> includeAdQueues) {
            $.includeAdQueues = includeAdQueues;
            return this;
        }

        /**
         * @param includeAdQueues (optional) Include Auto-Delete queues
         * 
         * @return builder
         * 
         */
        public Builder includeAdQueues(Boolean includeAdQueues) {
            return includeAdQueues(Output.of(includeAdQueues));
        }

        /**
         * @param instanceId Instance identifier
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<Integer> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId Instance identifier
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Integer instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param licenseKey The license key registred for the integration service. (New Relic)
         * 
         * @return builder
         * 
         */
        public Builder licenseKey(@Nullable Output<String> licenseKey) {
            $.licenseKey = licenseKey;
            return this;
        }

        /**
         * @param licenseKey The license key registred for the integration service. (New Relic)
         * 
         * @return builder
         * 
         */
        public Builder licenseKey(String licenseKey) {
            return licenseKey(Output.of(licenseKey));
        }

        /**
         * @param name The name of metrics integration
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of metrics integration
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param privateKey The private key. (Stackdriver)
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The private key. (Stackdriver)
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param privateKeyId Private key identifier. (Stackdriver)
         * 
         * @return builder
         * 
         */
        public Builder privateKeyId(@Nullable Output<String> privateKeyId) {
            $.privateKeyId = privateKeyId;
            return this;
        }

        /**
         * @param privateKeyId Private key identifier. (Stackdriver)
         * 
         * @return builder
         * 
         */
        public Builder privateKeyId(String privateKeyId) {
            return privateKeyId(Output.of(privateKeyId));
        }

        /**
         * @param projectId Project ID. (Stackdriver)
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID. (Stackdriver)
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param queueAllowlist (optional) allowlist using regular expression
         * 
         * @return builder
         * 
         */
        public Builder queueAllowlist(@Nullable Output<String> queueAllowlist) {
            $.queueAllowlist = queueAllowlist;
            return this;
        }

        /**
         * @param queueAllowlist (optional) allowlist using regular expression
         * 
         * @return builder
         * 
         */
        public Builder queueAllowlist(String queueAllowlist) {
            return queueAllowlist(Output.of(queueAllowlist));
        }

        /**
         * @param queueWhitelist **Deprecated**
         * 
         * @return builder
         * 
         * @deprecated
         * use queue_allowlist instead
         * 
         */
        @Deprecated /* use queue_allowlist instead */
        public Builder queueWhitelist(@Nullable Output<String> queueWhitelist) {
            $.queueWhitelist = queueWhitelist;
            return this;
        }

        /**
         * @param queueWhitelist **Deprecated**
         * 
         * @return builder
         * 
         * @deprecated
         * use queue_allowlist instead
         * 
         */
        @Deprecated /* use queue_allowlist instead */
        public Builder queueWhitelist(String queueWhitelist) {
            return queueWhitelist(Output.of(queueWhitelist));
        }

        /**
         * @param region AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secretAccessKey AWS secret key. (Cloudwatch)
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(@Nullable Output<String> secretAccessKey) {
            $.secretAccessKey = secretAccessKey;
            return this;
        }

        /**
         * @param secretAccessKey AWS secret key. (Cloudwatch)
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(String secretAccessKey) {
            return secretAccessKey(Output.of(secretAccessKey));
        }

        /**
         * @param tags (optional) tags. E.g. env=prod,region=europe
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags (optional) tags. E.g. env=prod,region=europe
         * 
         * @return builder
         * 
         */
        public Builder tags(String tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param vhostAllowlist (optional) allowlist using regular expression
         * 
         * @return builder
         * 
         */
        public Builder vhostAllowlist(@Nullable Output<String> vhostAllowlist) {
            $.vhostAllowlist = vhostAllowlist;
            return this;
        }

        /**
         * @param vhostAllowlist (optional) allowlist using regular expression
         * 
         * @return builder
         * 
         */
        public Builder vhostAllowlist(String vhostAllowlist) {
            return vhostAllowlist(Output.of(vhostAllowlist));
        }

        /**
         * @param vhostWhitelist **Deprecated**
         * 
         * @return builder
         * 
         * @deprecated
         * use vhost_allowlist instead
         * 
         */
        @Deprecated /* use vhost_allowlist instead */
        public Builder vhostWhitelist(@Nullable Output<String> vhostWhitelist) {
            $.vhostWhitelist = vhostWhitelist;
            return this;
        }

        /**
         * @param vhostWhitelist **Deprecated**
         * 
         * @return builder
         * 
         * @deprecated
         * use vhost_allowlist instead
         * 
         */
        @Deprecated /* use vhost_allowlist instead */
        public Builder vhostWhitelist(String vhostWhitelist) {
            return vhostWhitelist(Output.of(vhostWhitelist));
        }

        public IntegrationMetricState build() {
            return $;
        }
    }

}
