// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudamqp.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNodesNode {
    private Integer additionalDiskSize;
    private Boolean configured;
    private Integer diskSize;
    private String erlangVersion;
    private Boolean hipe;
    private String hostname;
    private String name;
    private String rabbitmqVersion;
    private Boolean running;

    private GetNodesNode() {}
    public Integer additionalDiskSize() {
        return this.additionalDiskSize;
    }
    public Boolean configured() {
        return this.configured;
    }
    public Integer diskSize() {
        return this.diskSize;
    }
    public String erlangVersion() {
        return this.erlangVersion;
    }
    public Boolean hipe() {
        return this.hipe;
    }
    public String hostname() {
        return this.hostname;
    }
    public String name() {
        return this.name;
    }
    public String rabbitmqVersion() {
        return this.rabbitmqVersion;
    }
    public Boolean running() {
        return this.running;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodesNode defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer additionalDiskSize;
        private Boolean configured;
        private Integer diskSize;
        private String erlangVersion;
        private Boolean hipe;
        private String hostname;
        private String name;
        private String rabbitmqVersion;
        private Boolean running;
        public Builder() {}
        public Builder(GetNodesNode defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalDiskSize = defaults.additionalDiskSize;
    	      this.configured = defaults.configured;
    	      this.diskSize = defaults.diskSize;
    	      this.erlangVersion = defaults.erlangVersion;
    	      this.hipe = defaults.hipe;
    	      this.hostname = defaults.hostname;
    	      this.name = defaults.name;
    	      this.rabbitmqVersion = defaults.rabbitmqVersion;
    	      this.running = defaults.running;
        }

        @CustomType.Setter
        public Builder additionalDiskSize(Integer additionalDiskSize) {
            this.additionalDiskSize = Objects.requireNonNull(additionalDiskSize);
            return this;
        }
        @CustomType.Setter
        public Builder configured(Boolean configured) {
            this.configured = Objects.requireNonNull(configured);
            return this;
        }
        @CustomType.Setter
        public Builder diskSize(Integer diskSize) {
            this.diskSize = Objects.requireNonNull(diskSize);
            return this;
        }
        @CustomType.Setter
        public Builder erlangVersion(String erlangVersion) {
            this.erlangVersion = Objects.requireNonNull(erlangVersion);
            return this;
        }
        @CustomType.Setter
        public Builder hipe(Boolean hipe) {
            this.hipe = Objects.requireNonNull(hipe);
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            this.hostname = Objects.requireNonNull(hostname);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder rabbitmqVersion(String rabbitmqVersion) {
            this.rabbitmqVersion = Objects.requireNonNull(rabbitmqVersion);
            return this;
        }
        @CustomType.Setter
        public Builder running(Boolean running) {
            this.running = Objects.requireNonNull(running);
            return this;
        }
        public GetNodesNode build() {
            final var _resultValue = new GetNodesNode();
            _resultValue.additionalDiskSize = additionalDiskSize;
            _resultValue.configured = configured;
            _resultValue.diskSize = diskSize;
            _resultValue.erlangVersion = erlangVersion;
            _resultValue.hipe = hipe;
            _resultValue.hostname = hostname;
            _resultValue.name = name;
            _resultValue.rabbitmqVersion = rabbitmqVersion;
            _resultValue.running = running;
            return _resultValue;
        }
    }
}
