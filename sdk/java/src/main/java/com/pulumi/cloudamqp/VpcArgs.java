// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudamqp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpcArgs Empty = new VpcArgs();

    /**
     * The name of the VPC.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the VPC.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The hosted region for the managed standalone VPC
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The hosted region for the managed standalone VPC
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * The VPC subnet
     * 
     */
    @Import(name="subnet", required=true)
    private Output<String> subnet;

    /**
     * @return The VPC subnet
     * 
     */
    public Output<String> subnet() {
        return this.subnet;
    }

    /**
     * Tag the VPC with optional tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tag the VPC with optional tags
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private VpcArgs() {}

    private VpcArgs(VpcArgs $) {
        this.name = $.name;
        this.region = $.region;
        this.subnet = $.subnet;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcArgs $;

        public Builder() {
            $ = new VpcArgs();
        }

        public Builder(VpcArgs defaults) {
            $ = new VpcArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name of the VPC.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the VPC.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The hosted region for the managed standalone VPC
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The hosted region for the managed standalone VPC
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param subnet The VPC subnet
         * 
         * @return builder
         * 
         */
        public Builder subnet(Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet The VPC subnet
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        /**
         * @param tags Tag the VPC with optional tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tag the VPC with optional tags
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tag the VPC with optional tags
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public VpcArgs build() {
            if ($.region == null) {
                throw new MissingRequiredPropertyException("VpcArgs", "region");
            }
            if ($.subnet == null) {
                throw new MissingRequiredPropertyException("VpcArgs", "subnet");
            }
            return $;
        }
    }

}
