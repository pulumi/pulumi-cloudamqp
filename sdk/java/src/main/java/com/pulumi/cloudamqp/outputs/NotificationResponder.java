// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudamqp.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NotificationResponder {
    /**
     * @return Identifier in UUID format
     * 
     */
    private @Nullable String id;
    /**
     * @return Name of the responder
     * 
     */
    private @Nullable String name;
    /**
     * @return Type of responder. [`team`, `user`, `escalation`, `schedule`]
     * 
     */
    private String type;
    /**
     * @return Username of the responder
     * 
     * Responders of type `team`, `escalation` and `schedule` can use either id or name.
     * While `user` can use either id or username.
     * 
     */
    private @Nullable String username;

    private NotificationResponder() {}
    /**
     * @return Identifier in UUID format
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Name of the responder
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Type of responder. [`team`, `user`, `escalation`, `schedule`]
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Username of the responder
     * 
     * Responders of type `team`, `escalation` and `schedule` can use either id or name.
     * While `user` can use either id or username.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotificationResponder defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String id;
        private @Nullable String name;
        private String type;
        private @Nullable String username;
        public Builder() {}
        public Builder(NotificationResponder defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.type = defaults.type;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("NotificationResponder", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        public NotificationResponder build() {
            final var _resultValue = new NotificationResponder();
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.type = type;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
