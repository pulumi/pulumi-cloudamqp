// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudamqp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExtraDiskSizeNodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExtraDiskSizeNodeArgs Empty = new ExtraDiskSizeNodeArgs();

    /**
     * Additional added disk size
     * 
     */
    @Import(name="additionalDiskSize")
    private @Nullable Output<Integer> additionalDiskSize;

    /**
     * @return Additional added disk size
     * 
     */
    public Optional<Output<Integer>> additionalDiskSize() {
        return Optional.ofNullable(this.additionalDiskSize);
    }

    /**
     * Subscription plan disk size
     * 
     */
    @Import(name="diskSize")
    private @Nullable Output<Integer> diskSize;

    /**
     * @return Subscription plan disk size
     * 
     */
    public Optional<Output<Integer>> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }

    /**
     * Name of the node.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the node.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private ExtraDiskSizeNodeArgs() {}

    private ExtraDiskSizeNodeArgs(ExtraDiskSizeNodeArgs $) {
        this.additionalDiskSize = $.additionalDiskSize;
        this.diskSize = $.diskSize;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExtraDiskSizeNodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExtraDiskSizeNodeArgs $;

        public Builder() {
            $ = new ExtraDiskSizeNodeArgs();
        }

        public Builder(ExtraDiskSizeNodeArgs defaults) {
            $ = new ExtraDiskSizeNodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalDiskSize Additional added disk size
         * 
         * @return builder
         * 
         */
        public Builder additionalDiskSize(@Nullable Output<Integer> additionalDiskSize) {
            $.additionalDiskSize = additionalDiskSize;
            return this;
        }

        /**
         * @param additionalDiskSize Additional added disk size
         * 
         * @return builder
         * 
         */
        public Builder additionalDiskSize(Integer additionalDiskSize) {
            return additionalDiskSize(Output.of(additionalDiskSize));
        }

        /**
         * @param diskSize Subscription plan disk size
         * 
         * @return builder
         * 
         */
        public Builder diskSize(@Nullable Output<Integer> diskSize) {
            $.diskSize = diskSize;
            return this;
        }

        /**
         * @param diskSize Subscription plan disk size
         * 
         * @return builder
         * 
         */
        public Builder diskSize(Integer diskSize) {
            return diskSize(Output.of(diskSize));
        }

        /**
         * @param name Name of the node.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the node.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ExtraDiskSizeNodeArgs build() {
            return $;
        }
    }

}
