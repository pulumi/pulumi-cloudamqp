// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudamqp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class WebhookArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebhookArgs Empty = new WebhookArgs();

    /**
     * Max simultaneous requests to the endpoint.
     * 
     */
    @Import(name="concurrency", required=true)
    private Output<Integer> concurrency;

    /**
     * @return Max simultaneous requests to the endpoint.
     * 
     */
    public Output<Integer> concurrency() {
        return this.concurrency;
    }

    /**
     * The CloudAMQP instance ID.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<Integer> instanceId;

    /**
     * @return The CloudAMQP instance ID.
     * 
     */
    public Output<Integer> instanceId() {
        return this.instanceId;
    }

    /**
     * A (durable) queue on your RabbitMQ instance.
     * 
     */
    @Import(name="queue", required=true)
    private Output<String> queue;

    /**
     * @return A (durable) queue on your RabbitMQ instance.
     * 
     */
    public Output<String> queue() {
        return this.queue;
    }

    /**
     * How often we retry if your endpoint fails (in seconds).
     * 
     */
    @Import(name="retryInterval", required=true)
    private Output<Integer> retryInterval;

    /**
     * @return How often we retry if your endpoint fails (in seconds).
     * 
     */
    public Output<Integer> retryInterval() {
        return this.retryInterval;
    }

    /**
     * The vhost the queue resides in.
     * 
     */
    @Import(name="vhost", required=true)
    private Output<String> vhost;

    /**
     * @return The vhost the queue resides in.
     * 
     */
    public Output<String> vhost() {
        return this.vhost;
    }

    /**
     * A POST request will be made for each message in the queue to this endpoint.
     * 
     */
    @Import(name="webhookUri", required=true)
    private Output<String> webhookUri;

    /**
     * @return A POST request will be made for each message in the queue to this endpoint.
     * 
     */
    public Output<String> webhookUri() {
        return this.webhookUri;
    }

    private WebhookArgs() {}

    private WebhookArgs(WebhookArgs $) {
        this.concurrency = $.concurrency;
        this.instanceId = $.instanceId;
        this.queue = $.queue;
        this.retryInterval = $.retryInterval;
        this.vhost = $.vhost;
        this.webhookUri = $.webhookUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebhookArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebhookArgs $;

        public Builder() {
            $ = new WebhookArgs();
        }

        public Builder(WebhookArgs defaults) {
            $ = new WebhookArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param concurrency Max simultaneous requests to the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder concurrency(Output<Integer> concurrency) {
            $.concurrency = concurrency;
            return this;
        }

        /**
         * @param concurrency Max simultaneous requests to the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder concurrency(Integer concurrency) {
            return concurrency(Output.of(concurrency));
        }

        /**
         * @param instanceId The CloudAMQP instance ID.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<Integer> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The CloudAMQP instance ID.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Integer instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param queue A (durable) queue on your RabbitMQ instance.
         * 
         * @return builder
         * 
         */
        public Builder queue(Output<String> queue) {
            $.queue = queue;
            return this;
        }

        /**
         * @param queue A (durable) queue on your RabbitMQ instance.
         * 
         * @return builder
         * 
         */
        public Builder queue(String queue) {
            return queue(Output.of(queue));
        }

        /**
         * @param retryInterval How often we retry if your endpoint fails (in seconds).
         * 
         * @return builder
         * 
         */
        public Builder retryInterval(Output<Integer> retryInterval) {
            $.retryInterval = retryInterval;
            return this;
        }

        /**
         * @param retryInterval How often we retry if your endpoint fails (in seconds).
         * 
         * @return builder
         * 
         */
        public Builder retryInterval(Integer retryInterval) {
            return retryInterval(Output.of(retryInterval));
        }

        /**
         * @param vhost The vhost the queue resides in.
         * 
         * @return builder
         * 
         */
        public Builder vhost(Output<String> vhost) {
            $.vhost = vhost;
            return this;
        }

        /**
         * @param vhost The vhost the queue resides in.
         * 
         * @return builder
         * 
         */
        public Builder vhost(String vhost) {
            return vhost(Output.of(vhost));
        }

        /**
         * @param webhookUri A POST request will be made for each message in the queue to this endpoint.
         * 
         * @return builder
         * 
         */
        public Builder webhookUri(Output<String> webhookUri) {
            $.webhookUri = webhookUri;
            return this;
        }

        /**
         * @param webhookUri A POST request will be made for each message in the queue to this endpoint.
         * 
         * @return builder
         * 
         */
        public Builder webhookUri(String webhookUri) {
            return webhookUri(Output.of(webhookUri));
        }

        public WebhookArgs build() {
            if ($.concurrency == null) {
                throw new MissingRequiredPropertyException("WebhookArgs", "concurrency");
            }
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("WebhookArgs", "instanceId");
            }
            if ($.queue == null) {
                throw new MissingRequiredPropertyException("WebhookArgs", "queue");
            }
            if ($.retryInterval == null) {
                throw new MissingRequiredPropertyException("WebhookArgs", "retryInterval");
            }
            if ($.vhost == null) {
                throw new MissingRequiredPropertyException("WebhookArgs", "vhost");
            }
            if ($.webhookUri == null) {
                throw new MissingRequiredPropertyException("WebhookArgs", "webhookUri");
            }
            return $;
        }
    }

}
