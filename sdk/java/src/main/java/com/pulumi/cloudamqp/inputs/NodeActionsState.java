// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudamqp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodeActionsState extends com.pulumi.resources.ResourceArgs {

    public static final NodeActionsState Empty = new NodeActionsState();

    /**
     * The action to invoke on the node.
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return The action to invoke on the node.
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The CloudAMQP instance ID.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<Integer> instanceId;

    /**
     * @return The CloudAMQP instance ID.
     * 
     */
    public Optional<Output<Integer>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * The node name, e.g `green-guinea-pig-01`.
     * 
     */
    @Import(name="nodeName")
    private @Nullable Output<String> nodeName;

    /**
     * @return The node name, e.g `green-guinea-pig-01`.
     * 
     */
    public Optional<Output<String>> nodeName() {
        return Optional.ofNullable(this.nodeName);
    }

    /**
     * If the node is running.
     * 
     */
    @Import(name="running")
    private @Nullable Output<Boolean> running;

    /**
     * @return If the node is running.
     * 
     */
    public Optional<Output<Boolean>> running() {
        return Optional.ofNullable(this.running);
    }

    private NodeActionsState() {}

    private NodeActionsState(NodeActionsState $) {
        this.action = $.action;
        this.instanceId = $.instanceId;
        this.nodeName = $.nodeName;
        this.running = $.running;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeActionsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeActionsState $;

        public Builder() {
            $ = new NodeActionsState();
        }

        public Builder(NodeActionsState defaults) {
            $ = new NodeActionsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action to invoke on the node.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action to invoke on the node.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param instanceId The CloudAMQP instance ID.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<Integer> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The CloudAMQP instance ID.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Integer instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param nodeName The node name, e.g `green-guinea-pig-01`.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(@Nullable Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName The node name, e.g `green-guinea-pig-01`.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        /**
         * @param running If the node is running.
         * 
         * @return builder
         * 
         */
        public Builder running(@Nullable Output<Boolean> running) {
            $.running = running;
            return this;
        }

        /**
         * @param running If the node is running.
         * 
         * @return builder
         * 
         */
        public Builder running(Boolean running) {
            return running(Output.of(running));
        }

        public NodeActionsState build() {
            return $;
        }
    }

}
