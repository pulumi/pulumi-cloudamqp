// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudamqp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationResponderArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationResponderArgs Empty = new NotificationResponderArgs();

    /**
     * Identifier in UUID format
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Identifier in UUID format
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the responder
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the responder
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Type of responder. [`team`, `user`, `escalation`, `schedule`]
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of responder. [`team`, `user`, `escalation`, `schedule`]
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Username of the responder
     * 
     * Responders of type `team`, `escalation` and `schedule` can use either id or name.
     * While `user` can use either id or username.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Username of the responder
     * 
     * Responders of type `team`, `escalation` and `schedule` can use either id or name.
     * While `user` can use either id or username.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private NotificationResponderArgs() {}

    private NotificationResponderArgs(NotificationResponderArgs $) {
        this.id = $.id;
        this.name = $.name;
        this.type = $.type;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationResponderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationResponderArgs $;

        public Builder() {
            $ = new NotificationResponderArgs();
        }

        public Builder(NotificationResponderArgs defaults) {
            $ = new NotificationResponderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id Identifier in UUID format
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Identifier in UUID format
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Name of the responder
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the responder
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type Type of responder. [`team`, `user`, `escalation`, `schedule`]
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of responder. [`team`, `user`, `escalation`, `schedule`]
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param username Username of the responder
         * 
         * Responders of type `team`, `escalation` and `schedule` can use either id or name.
         * While `user` can use either id or username.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username of the responder
         * 
         * Responders of type `team`, `escalation` and `schedule` can use either id or name.
         * While `user` can use either id or username.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public NotificationResponderArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("NotificationResponderArgs", "type");
            }
            return $;
        }
    }

}
