# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ExtraDiskSizeNode',
    'InstanceCopySetting',
    'SecurityFirewallRule',
    'GetAccountInstanceResult',
    'GetAccountVpcsVpcResult',
    'GetNodesNodeResult',
    'GetPluginsCommunityPluginResult',
    'GetPluginsPluginResult',
]

@pulumi.output_type
class ExtraDiskSizeNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalDiskSize":
            suggest = "additional_disk_size"
        elif key == "diskSize":
            suggest = "disk_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtraDiskSizeNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtraDiskSizeNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtraDiskSizeNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_disk_size: Optional[int] = None,
                 disk_size: Optional[int] = None,
                 name: Optional[str] = None):
        ExtraDiskSizeNode._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            additional_disk_size=additional_disk_size,
            disk_size=disk_size,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             additional_disk_size: Optional[int] = None,
             disk_size: Optional[int] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if additional_disk_size is None and 'additionalDiskSize' in kwargs:
            additional_disk_size = kwargs['additionalDiskSize']
        if disk_size is None and 'diskSize' in kwargs:
            disk_size = kwargs['diskSize']

        if additional_disk_size is not None:
            _setter("additional_disk_size", additional_disk_size)
        if disk_size is not None:
            _setter("disk_size", disk_size)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="additionalDiskSize")
    def additional_disk_size(self) -> Optional[int]:
        return pulumi.get(self, "additional_disk_size")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class InstanceCopySetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subscriptionId":
            suggest = "subscription_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceCopySetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceCopySetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceCopySetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 settings: Sequence[str],
                 subscription_id: str):
        """
        :param Sequence[str] settings: Array of one or more settings to be copied. Allowed values: [alarms, config, definitions, firewall, logs, metrics, plugins]
               
               See more below, copy settings
        :param str subscription_id: Instance identifier of the CloudAMQP instance to copy the settings from.
        """
        InstanceCopySetting._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            settings=settings,
            subscription_id=subscription_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             settings: Optional[Sequence[str]] = None,
             subscription_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if settings is None:
            raise TypeError("Missing 'settings' argument")
        if subscription_id is None and 'subscriptionId' in kwargs:
            subscription_id = kwargs['subscriptionId']
        if subscription_id is None:
            raise TypeError("Missing 'subscription_id' argument")

        _setter("settings", settings)
        _setter("subscription_id", subscription_id)

    @property
    @pulumi.getter
    def settings(self) -> Sequence[str]:
        """
        Array of one or more settings to be copied. Allowed values: [alarms, config, definitions, firewall, logs, metrics, plugins]

        See more below, copy settings
        """
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        """
        Instance identifier of the CloudAMQP instance to copy the settings from.
        """
        return pulumi.get(self, "subscription_id")


@pulumi.output_type
class SecurityFirewallRule(dict):
    def __init__(__self__, *,
                 ip: str,
                 description: Optional[str] = None,
                 ports: Optional[Sequence[int]] = None,
                 services: Optional[Sequence[str]] = None):
        """
        :param str ip: CIDR address: IP address with CIDR notation (e.g. 10.56.72.0/24)
        :param str description: Description name of the rule. e.g. Default.
               
               Pre-defined services for RabbitMQ:
               
               | Service name | Port  |
               |--------------|-------|
               | AMQP         | 5672  |
               | AMQPS        | 5671  |
               | HTTPS        | 443   |
               | MQTT         | 1883  |
               | MQTTS        | 8883  |
               | STOMP        | 61613 |
               | STOMPS       | 61614 |
               | STREAM       | 5552  |
               | STREAM_SSL   | 5551  |
               
               Pre-defined services for LavinMQ:
               
               | Service name | Port  |
               |--------------|-------|
               | AMQP         | 5672  |
               | AMQPS        | 5671  |
               | HTTPS        | 443   |
        :param Sequence[int] ports: Custom ports to be opened
        :param Sequence[str] services: Pre-defined service ports, see table below
        """
        SecurityFirewallRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip=ip,
            description=description,
            ports=ports,
            services=services,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip: Optional[str] = None,
             description: Optional[str] = None,
             ports: Optional[Sequence[int]] = None,
             services: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if ip is None:
            raise TypeError("Missing 'ip' argument")

        _setter("ip", ip)
        if description is not None:
            _setter("description", description)
        if ports is not None:
            _setter("ports", ports)
        if services is not None:
            _setter("services", services)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        CIDR address: IP address with CIDR notation (e.g. 10.56.72.0/24)
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description name of the rule. e.g. Default.

        Pre-defined services for RabbitMQ:

        | Service name | Port  |
        |--------------|-------|
        | AMQP         | 5672  |
        | AMQPS        | 5671  |
        | HTTPS        | 443   |
        | MQTT         | 1883  |
        | MQTTS        | 8883  |
        | STOMP        | 61613 |
        | STOMPS       | 61614 |
        | STREAM       | 5552  |
        | STREAM_SSL   | 5551  |

        Pre-defined services for LavinMQ:

        | Service name | Port  |
        |--------------|-------|
        | AMQP         | 5672  |
        | AMQPS        | 5671  |
        | HTTPS        | 443   |
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[int]]:
        """
        Custom ports to be opened
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence[str]]:
        """
        Pre-defined service ports, see table below
        """
        return pulumi.get(self, "services")


@pulumi.output_type
class GetAccountInstanceResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 plan: str,
                 region: str,
                 tags: Optional[Sequence[str]] = None):
        GetAccountInstanceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
            plan=plan,
            region=region,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             plan: Optional[str] = None,
             region: Optional[str] = None,
             tags: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if plan is None:
            raise TypeError("Missing 'plan' argument")
        if region is None:
            raise TypeError("Missing 'region' argument")

        _setter("id", id)
        _setter("name", name)
        _setter("plan", plan)
        _setter("region", region)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def plan(self) -> str:
        return pulumi.get(self, "plan")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetAccountVpcsVpcResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 region: str,
                 subnet: str,
                 vpc_name: str,
                 tags: Optional[Sequence[str]] = None):
        GetAccountVpcsVpcResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
            region=region,
            subnet=subnet,
            vpc_name=vpc_name,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[int] = None,
             name: Optional[str] = None,
             region: Optional[str] = None,
             subnet: Optional[str] = None,
             vpc_name: Optional[str] = None,
             tags: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if region is None:
            raise TypeError("Missing 'region' argument")
        if subnet is None:
            raise TypeError("Missing 'subnet' argument")
        if vpc_name is None and 'vpcName' in kwargs:
            vpc_name = kwargs['vpcName']
        if vpc_name is None:
            raise TypeError("Missing 'vpc_name' argument")

        _setter("id", id)
        _setter("name", name)
        _setter("region", region)
        _setter("subnet", subnet)
        _setter("vpc_name", vpc_name)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> str:
        return pulumi.get(self, "vpc_name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetNodesNodeResult(dict):
    def __init__(__self__, *,
                 additional_disk_size: int,
                 configured: bool,
                 disk_size: int,
                 erlang_version: str,
                 hipe: bool,
                 hostname: str,
                 name: str,
                 rabbitmq_version: str,
                 running: bool):
        GetNodesNodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            additional_disk_size=additional_disk_size,
            configured=configured,
            disk_size=disk_size,
            erlang_version=erlang_version,
            hipe=hipe,
            hostname=hostname,
            name=name,
            rabbitmq_version=rabbitmq_version,
            running=running,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             additional_disk_size: Optional[int] = None,
             configured: Optional[bool] = None,
             disk_size: Optional[int] = None,
             erlang_version: Optional[str] = None,
             hipe: Optional[bool] = None,
             hostname: Optional[str] = None,
             name: Optional[str] = None,
             rabbitmq_version: Optional[str] = None,
             running: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if additional_disk_size is None and 'additionalDiskSize' in kwargs:
            additional_disk_size = kwargs['additionalDiskSize']
        if additional_disk_size is None:
            raise TypeError("Missing 'additional_disk_size' argument")
        if configured is None:
            raise TypeError("Missing 'configured' argument")
        if disk_size is None and 'diskSize' in kwargs:
            disk_size = kwargs['diskSize']
        if disk_size is None:
            raise TypeError("Missing 'disk_size' argument")
        if erlang_version is None and 'erlangVersion' in kwargs:
            erlang_version = kwargs['erlangVersion']
        if erlang_version is None:
            raise TypeError("Missing 'erlang_version' argument")
        if hipe is None:
            raise TypeError("Missing 'hipe' argument")
        if hostname is None:
            raise TypeError("Missing 'hostname' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if rabbitmq_version is None and 'rabbitmqVersion' in kwargs:
            rabbitmq_version = kwargs['rabbitmqVersion']
        if rabbitmq_version is None:
            raise TypeError("Missing 'rabbitmq_version' argument")
        if running is None:
            raise TypeError("Missing 'running' argument")

        _setter("additional_disk_size", additional_disk_size)
        _setter("configured", configured)
        _setter("disk_size", disk_size)
        _setter("erlang_version", erlang_version)
        _setter("hipe", hipe)
        _setter("hostname", hostname)
        _setter("name", name)
        _setter("rabbitmq_version", rabbitmq_version)
        _setter("running", running)

    @property
    @pulumi.getter(name="additionalDiskSize")
    def additional_disk_size(self) -> int:
        return pulumi.get(self, "additional_disk_size")

    @property
    @pulumi.getter
    def configured(self) -> bool:
        return pulumi.get(self, "configured")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="erlangVersion")
    def erlang_version(self) -> str:
        return pulumi.get(self, "erlang_version")

    @property
    @pulumi.getter
    def hipe(self) -> bool:
        return pulumi.get(self, "hipe")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rabbitmqVersion")
    def rabbitmq_version(self) -> str:
        return pulumi.get(self, "rabbitmq_version")

    @property
    @pulumi.getter
    def running(self) -> bool:
        return pulumi.get(self, "running")


@pulumi.output_type
class GetPluginsCommunityPluginResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 require: str):
        GetPluginsCommunityPluginResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            name=name,
            require=require,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             name: Optional[str] = None,
             require: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if description is None:
            raise TypeError("Missing 'description' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if require is None:
            raise TypeError("Missing 'require' argument")

        _setter("description", description)
        _setter("name", name)
        _setter("require", require)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def require(self) -> str:
        return pulumi.get(self, "require")


@pulumi.output_type
class GetPluginsPluginResult(dict):
    def __init__(__self__, *,
                 description: str,
                 enabled: bool,
                 name: str,
                 version: str):
        GetPluginsPluginResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            enabled=enabled,
            name=name,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             enabled: Optional[bool] = None,
             name: Optional[str] = None,
             version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if description is None:
            raise TypeError("Missing 'description' argument")
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if version is None:
            raise TypeError("Missing 'version' argument")

        _setter("description", description)
        _setter("enabled", enabled)
        _setter("name", name)
        _setter("version", version)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


