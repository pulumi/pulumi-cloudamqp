// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CloudAmqp.Outputs
{

    [OutputType]
    public sealed class GetAlarmsAlarmResult
    {
        /// <summary>
        /// The alarm identifier.
        /// </summary>
        public readonly int? AlarmId;
        /// <summary>
        /// Enable/disable status of the alarm.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Message type `(total, unacked, ready)` used by queue alarm type.
        /// </summary>
        public readonly string MessageType;
        /// <summary>
        /// Regular expression for which queue to check.
        /// </summary>
        public readonly string QueueRegex;
        /// <summary>
        /// Identifier for recipient to be notified.
        /// </summary>
        public readonly ImmutableArray<int> Recipients;
        /// <summary>
        /// The reminder interval (in seconds) to resend the alarm if not resolved.
        /// Set to 0 for no reminders.
        /// </summary>
        public readonly int ReminderInterval;
        /// <summary>
        /// The time interval (in seconds) the `ValueThreshold` should be active
        /// before trigger an alarm.
        /// </summary>
        public readonly int TimeThreshold;
        /// <summary>
        /// The alarm type to filter for. Supported
        /// alarm types.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// Disk value threshold calculation, `(fixed, percentage)` of disk space
        /// remaining.
        /// </summary>
        public readonly string? ValueCalculation;
        /// <summary>
        /// The value threshold that triggers the alarm.
        /// </summary>
        public readonly int ValueThreshold;
        /// <summary>
        /// Regular expression for which vhost to check
        /// </summary>
        public readonly string VhostRegex;

        [OutputConstructor]
        private GetAlarmsAlarmResult(
            int? alarmId,

            bool enabled,

            string messageType,

            string queueRegex,

            ImmutableArray<int> recipients,

            int reminderInterval,

            int timeThreshold,

            string? type,

            string? valueCalculation,

            int valueThreshold,

            string vhostRegex)
        {
            AlarmId = alarmId;
            Enabled = enabled;
            MessageType = messageType;
            QueueRegex = queueRegex;
            Recipients = recipients;
            ReminderInterval = reminderInterval;
            TimeThreshold = timeThreshold;
            Type = type;
            ValueCalculation = valueCalculation;
            ValueThreshold = valueThreshold;
            VhostRegex = vhostRegex;
        }
    }
}
