// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CloudAmqp
{
    public static class GetInstance
    {
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("cloudamqp:index/getInstance:getInstance", args ?? new GetInstanceArgs(), options.WithVersion());
    }


    public sealed class GetInstanceArgs : Pulumi.InvokeArgs
    {
        [Input("instanceId", required: true)]
        public int InstanceId { get; set; }

        [Input("vpcSubnet")]
        public string? VpcSubnet { get; set; }

        public GetInstanceArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        public readonly string Apikey;
        public readonly string Host;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int InstanceId;
        public readonly string Name;
        public readonly int Nodes;
        public readonly string Plan;
        public readonly string Region;
        public readonly string RmqVersion;
        public readonly ImmutableArray<string> Tags;
        public readonly string Url;
        public readonly string Vhost;
        public readonly string? VpcSubnet;

        [OutputConstructor]
        private GetInstanceResult(
            string apikey,

            string host,

            string id,

            int instanceId,

            string name,

            int nodes,

            string plan,

            string region,

            string rmqVersion,

            ImmutableArray<string> tags,

            string url,

            string vhost,

            string? vpcSubnet)
        {
            Apikey = apikey;
            Host = host;
            Id = id;
            InstanceId = instanceId;
            Name = name;
            Nodes = nodes;
            Plan = plan;
            Region = region;
            RmqVersion = rmqVersion;
            Tags = tags;
            Url = url;
            Vhost = vhost;
            VpcSubnet = vpcSubnet;
        }
    }
}
