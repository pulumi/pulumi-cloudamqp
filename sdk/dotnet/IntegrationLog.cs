// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CloudAmqp
{
    /// <summary>
    /// This resource allows you to create and manage third party log integrations for a CloudAMQP instance. Once configured, the logs produced will be forward to corresponding integration.
    /// 
    /// Only available for dedicated subscription plans.
    /// 
    /// ## Argument Reference (cloudwatchlog)
    /// 
    /// Cloudwatch argument reference and example. Create an IAM user with programmatic access and the following permissions:
    /// 
    /// * CreateLogGroup
    /// * CreateLogStream
    /// * DescribeLogGroups
    /// * DescribeLogStreams
    /// * PutLogEvents
    /// 
    /// ## Integration service reference
    /// 
    /// Valid names for third party log integration.
    /// 
    /// | Name       | Description |
    /// |------------|---------------------------------------------------------------|
    /// | cloudwatchlog | Create a IAM with programmatic access. |
    /// | logentries | Create a Logentries token at https://logentries.com/app#/add-log/manual  |
    /// | loggly     | Create a Loggly token at https://your-company}.loggly.com/tokens |
    /// | papertrail | Create a Papertrail endpoint https://papertrailapp.com/systems/setup |
    /// | splunk     | Create a HTTP Event Collector token at `https://&lt;your-splunk&gt;.cloud.splunk.com/en-US/manager/search/http-eventcollector` |
    /// | datadog       | Create a Datadog API key at app.datadoghq.com |
    /// | stackdriver   | Create a service account and add 'monitor metrics writer' role from your Google Cloud Account |
    /// | scalyr        | Create a Log write token at https://app.scalyr.com/keys |
    /// | coralogix     | Create Send-Your-Data API key https://coralogix.com/docs/send-your-data-api-key/ |
    /// 
    /// ## Integration Type reference
    /// 
    /// Valid arguments for third party log integrations.
    /// 
    /// Required arguments for all integrations: name
    /// 
    /// | Name | Type | Required arguments |
    /// | ---- | ---- | ---- |
    /// | CloudWatch | cloudwatchlog | access_key_id, secret_access_key, region |
    /// | Log Entries | logentries | token |
    /// | Loggly | loggly | token |
    /// | Papertrail | papertrail | url |
    /// | Splunk | splunk | token, host_port, sourcetype |
    /// | Data Dog | datadog | region, api_keys, tags |
    /// | Stackdriver | stackdriver | credentials |
    /// | Scalyr | scalyr | token, host |
    /// | Coralogix | coralogix | private_key, endpoint, application, subsystem |
    /// 
    /// ***Note:*** Stackdriver (v1.20.2 or earlier versions) required arguments  : project_id, private_key, client_email
    /// 
    /// ## Dependency
    /// 
    /// This resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.
    /// 
    /// ## Import
    /// 
    /// `cloudamqp_integration_log`can be imported using the resource identifier together with CloudAMQP instance identifier. The name and identifier are CSV separated, see example below.
    /// 
    /// ```sh
    ///  $ pulumi import cloudamqp:index/integrationLog:IntegrationLog &lt;resource_name&gt; &lt;id&gt;,&lt;instance_id&gt;`
    /// ```
    /// </summary>
    [CloudAmqpResourceType("cloudamqp:index/integrationLog:IntegrationLog")]
    public partial class IntegrationLog : global::Pulumi.CustomResource
    {
        /// <summary>
        /// AWS access key identifier.
        /// </summary>
        [Output("accessKeyId")]
        public Output<string?> AccessKeyId { get; private set; } = null!;

        /// <summary>
        /// The API key.
        /// </summary>
        [Output("apiKey")]
        public Output<string?> ApiKey { get; private set; } = null!;

        /// <summary>
        /// The application name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
        /// </summary>
        [Output("application")]
        public Output<string?> Application { get; private set; } = null!;

        /// <summary>
        /// The client email registered for the integration service.
        /// </summary>
        [Output("clientEmail")]
        public Output<string> ClientEmail { get; private set; } = null!;

        /// <summary>
        /// Google Service Account private key credentials.
        /// </summary>
        [Output("credentials")]
        public Output<string?> Credentials { get; private set; } = null!;

        /// <summary>
        /// The syslog destination to send the logs to for Coralogix. See endpoint [documentations](https://coralogix.com/docs/coralogix-endpoints/).
        /// </summary>
        [Output("endpoint")]
        public Output<string?> Endpoint { get; private set; } = null!;

        /// <summary>
        /// The host for Scalyr integration. (app.scalyr.com, app.eu.scalyr.com)
        /// </summary>
        [Output("host")]
        public Output<string?> Host { get; private set; } = null!;

        /// <summary>
        /// Destination to send the logs.
        /// </summary>
        [Output("hostPort")]
        public Output<string?> HostPort { get; private set; } = null!;

        /// <summary>
        /// Instance identifier used to make proxy calls
        /// </summary>
        [Output("instanceId")]
        public Output<int> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The name of the third party log integration. See
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The private access key.
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// Private key identifier. (Stackdriver)
        /// </summary>
        [Output("privateKeyId")]
        public Output<string> PrivateKeyId { get; private set; } = null!;

        /// <summary>
        /// The project identifier.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Region hosting the integration service.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// AWS secret access key.
        /// </summary>
        [Output("secretAccessKey")]
        public Output<string?> SecretAccessKey { get; private set; } = null!;

        /// <summary>
        /// Assign source type to the data exported, eg. generic_single_line. (Splunk)
        /// </summary>
        [Output("sourcetype")]
        public Output<string?> Sourcetype { get; private set; } = null!;

        /// <summary>
        /// The subsystem name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
        /// 
        /// This is the full list of all arguments. Only a subset of arguments are used based on which type of integration used. See Integration Type reference table below for more information.
        /// </summary>
        [Output("subsystem")]
        public Output<string?> Subsystem { get; private set; } = null!;

        /// <summary>
        /// Tag the integration, e.g. env=prod, region=europe.
        /// </summary>
        [Output("tags")]
        public Output<string?> Tags { get; private set; } = null!;

        /// <summary>
        /// Token used for authentication.
        /// </summary>
        [Output("token")]
        public Output<string?> Token { get; private set; } = null!;

        /// <summary>
        /// Endpoint to log integration.
        /// </summary>
        [Output("url")]
        public Output<string?> Url { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationLog resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationLog(string name, IntegrationLogArgs args, CustomResourceOptions? options = null)
            : base("cloudamqp:index/integrationLog:IntegrationLog", name, args ?? new IntegrationLogArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationLog(string name, Input<string> id, IntegrationLogState? state = null, CustomResourceOptions? options = null)
            : base("cloudamqp:index/integrationLog:IntegrationLog", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "accessKeyId",
                    "apiKey",
                    "credentials",
                    "privateKey",
                    "privateKeyId",
                    "secretAccessKey",
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationLog resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationLog Get(string name, Input<string> id, IntegrationLogState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationLog(name, id, state, options);
        }
    }

    public sealed class IntegrationLogArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessKeyId")]
        private Input<string>? _accessKeyId;

        /// <summary>
        /// AWS access key identifier.
        /// </summary>
        public Input<string>? AccessKeyId
        {
            get => _accessKeyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessKeyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apiKey")]
        private Input<string>? _apiKey;

        /// <summary>
        /// The API key.
        /// </summary>
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The application name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
        /// </summary>
        [Input("application")]
        public Input<string>? Application { get; set; }

        /// <summary>
        /// The client email registered for the integration service.
        /// </summary>
        [Input("clientEmail")]
        public Input<string>? ClientEmail { get; set; }

        [Input("credentials")]
        private Input<string>? _credentials;

        /// <summary>
        /// Google Service Account private key credentials.
        /// </summary>
        public Input<string>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The syslog destination to send the logs to for Coralogix. See endpoint [documentations](https://coralogix.com/docs/coralogix-endpoints/).
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// The host for Scalyr integration. (app.scalyr.com, app.eu.scalyr.com)
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Destination to send the logs.
        /// </summary>
        [Input("hostPort")]
        public Input<string>? HostPort { get; set; }

        /// <summary>
        /// Instance identifier used to make proxy calls
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<int> InstanceId { get; set; } = null!;

        /// <summary>
        /// The name of the third party log integration. See
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// The private access key.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateKeyId")]
        private Input<string>? _privateKeyId;

        /// <summary>
        /// Private key identifier. (Stackdriver)
        /// </summary>
        public Input<string>? PrivateKeyId
        {
            get => _privateKeyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKeyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The project identifier.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Region hosting the integration service.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("secretAccessKey")]
        private Input<string>? _secretAccessKey;

        /// <summary>
        /// AWS secret access key.
        /// </summary>
        public Input<string>? SecretAccessKey
        {
            get => _secretAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Assign source type to the data exported, eg. generic_single_line. (Splunk)
        /// </summary>
        [Input("sourcetype")]
        public Input<string>? Sourcetype { get; set; }

        /// <summary>
        /// The subsystem name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
        /// 
        /// This is the full list of all arguments. Only a subset of arguments are used based on which type of integration used. See Integration Type reference table below for more information.
        /// </summary>
        [Input("subsystem")]
        public Input<string>? Subsystem { get; set; }

        /// <summary>
        /// Tag the integration, e.g. env=prod, region=europe.
        /// </summary>
        [Input("tags")]
        public Input<string>? Tags { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// Token used for authentication.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Endpoint to log integration.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public IntegrationLogArgs()
        {
        }
        public static new IntegrationLogArgs Empty => new IntegrationLogArgs();
    }

    public sealed class IntegrationLogState : global::Pulumi.ResourceArgs
    {
        [Input("accessKeyId")]
        private Input<string>? _accessKeyId;

        /// <summary>
        /// AWS access key identifier.
        /// </summary>
        public Input<string>? AccessKeyId
        {
            get => _accessKeyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessKeyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apiKey")]
        private Input<string>? _apiKey;

        /// <summary>
        /// The API key.
        /// </summary>
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The application name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
        /// </summary>
        [Input("application")]
        public Input<string>? Application { get; set; }

        /// <summary>
        /// The client email registered for the integration service.
        /// </summary>
        [Input("clientEmail")]
        public Input<string>? ClientEmail { get; set; }

        [Input("credentials")]
        private Input<string>? _credentials;

        /// <summary>
        /// Google Service Account private key credentials.
        /// </summary>
        public Input<string>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The syslog destination to send the logs to for Coralogix. See endpoint [documentations](https://coralogix.com/docs/coralogix-endpoints/).
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// The host for Scalyr integration. (app.scalyr.com, app.eu.scalyr.com)
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Destination to send the logs.
        /// </summary>
        [Input("hostPort")]
        public Input<string>? HostPort { get; set; }

        /// <summary>
        /// Instance identifier used to make proxy calls
        /// </summary>
        [Input("instanceId")]
        public Input<int>? InstanceId { get; set; }

        /// <summary>
        /// The name of the third party log integration. See
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// The private access key.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateKeyId")]
        private Input<string>? _privateKeyId;

        /// <summary>
        /// Private key identifier. (Stackdriver)
        /// </summary>
        public Input<string>? PrivateKeyId
        {
            get => _privateKeyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKeyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The project identifier.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Region hosting the integration service.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("secretAccessKey")]
        private Input<string>? _secretAccessKey;

        /// <summary>
        /// AWS secret access key.
        /// </summary>
        public Input<string>? SecretAccessKey
        {
            get => _secretAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Assign source type to the data exported, eg. generic_single_line. (Splunk)
        /// </summary>
        [Input("sourcetype")]
        public Input<string>? Sourcetype { get; set; }

        /// <summary>
        /// The subsystem name for Coralogix. See application [documentations](https://coralogix.com/docs/application-and-subsystem-names/)
        /// 
        /// This is the full list of all arguments. Only a subset of arguments are used based on which type of integration used. See Integration Type reference table below for more information.
        /// </summary>
        [Input("subsystem")]
        public Input<string>? Subsystem { get; set; }

        /// <summary>
        /// Tag the integration, e.g. env=prod, region=europe.
        /// </summary>
        [Input("tags")]
        public Input<string>? Tags { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// Token used for authentication.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Endpoint to log integration.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public IntegrationLogState()
        {
        }
        public static new IntegrationLogState Empty => new IntegrationLogState();
    }
}
