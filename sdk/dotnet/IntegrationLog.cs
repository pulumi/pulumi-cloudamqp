// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CloudAmqp
{
    /// <summary>
    /// This resource allows you to create and manage third party log integrations for a CloudAMQP instance.
    /// Once configured, the logs produced will be forward to corresponding integration.
    /// 
    /// Only available for dedicated subscription plans.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;details&gt;
    ///   &lt;summary&gt;
    ///     &lt;b&gt;
    ///       &lt;i&gt;Azure monitor log integration&lt;/i&gt;
    ///     &lt;/b&gt;
    ///   &lt;/summary&gt;
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using CloudAmqp = Pulumi.CloudAmqp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var azureMonitor = new CloudAmqp.IntegrationLog("azure_monitor", new()
    ///     {
    ///         InstanceId = instance.Id,
    ///         Name = "azure_monitor",
    ///         TenantId = azmTentantId,
    ///         ApplicationId = azmApplicationId,
    ///         ApplicationSecret = azmApplicationSecret,
    ///         DceUri = azmDceUri,
    ///         Table = azmTable,
    ///         DcrId = azmDcrId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &lt;/details&gt;
    /// 
    /// &lt;details&gt;
    ///   &lt;summary&gt;
    ///     &lt;b&gt;
    ///       &lt;i&gt;Cloudwatch log integration&lt;/i&gt;
    ///     &lt;/b&gt;
    ///   &lt;/summary&gt;
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using CloudAmqp = Pulumi.CloudAmqp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var cloudwatch = new CloudAmqp.IntegrationLog("cloudwatch", new()
    ///     {
    ///         InstanceId = instance.Id,
    ///         Name = "cloudwatchlog",
    ///         AccessKeyId = awsAccessKeyId,
    ///         SecretAccessKey = awsSecretAccessKey,
    ///         Region = awsRegion,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &lt;/details&gt;
    /// 
    /// &lt;details&gt;
    ///   &lt;summary&gt;
    ///     &lt;b&gt;
    ///       &lt;i&gt;Coralogix log integration&lt;/i&gt;
    ///     &lt;/b&gt;
    ///   &lt;/summary&gt;
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using CloudAmqp = Pulumi.CloudAmqp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var coralogix = new CloudAmqp.IntegrationLog("coralogix", new()
    ///     {
    ///         InstanceId = instance.Id,
    ///         Name = "coralogix",
    ///         PrivateKey = coralogixSendDataKey,
    ///         Endpoint = coralogixEndpoint,
    ///         Application = coralogixApplication,
    ///         Subsystem = instance.Host,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &lt;/details&gt;
    /// 
    /// &lt;details&gt;
    ///   &lt;summary&gt;
    ///     &lt;b&gt;
    ///       &lt;i&gt;Datadog log integration&lt;/i&gt;
    ///     &lt;/b&gt;
    ///   &lt;/summary&gt;
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using CloudAmqp = Pulumi.CloudAmqp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var datadog = new CloudAmqp.IntegrationLog("datadog", new()
    ///     {
    ///         InstanceId = instance.Id,
    ///         Name = "datadog",
    ///         Region = datadogRegion,
    ///         ApiKey = datadogApiKey,
    ///         Tags = "env=prod,region=us1,version=v1.0",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &lt;/details&gt;
    /// 
    /// &lt;details&gt;
    ///   &lt;summary&gt;
    ///     &lt;b&gt;
    ///       &lt;i&gt;Logentries log integration&lt;/i&gt;
    ///     &lt;/b&gt;
    ///   &lt;/summary&gt;
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using CloudAmqp = Pulumi.CloudAmqp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var logentries = new CloudAmqp.IntegrationLog("logentries", new()
    ///     {
    ///         InstanceId = instance.Id,
    ///         Name = "logentries",
    ///         Token = logentriesToken,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &lt;/details&gt;
    /// 
    /// &lt;details&gt;
    ///   &lt;summary&gt;
    ///     &lt;b&gt;
    ///       &lt;i&gt;Loggly log integration&lt;/i&gt;
    ///     &lt;/b&gt;
    ///   &lt;/summary&gt;
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using CloudAmqp = Pulumi.CloudAmqp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var loggly = new CloudAmqp.IntegrationLog("loggly", new()
    ///     {
    ///         InstanceId = instance.Id,
    ///         Name = "loggly",
    ///         Token = logglyToken,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &lt;/details&gt;
    /// 
    /// &lt;details&gt;
    ///   &lt;summary&gt;
    ///     &lt;b&gt;
    ///       &lt;i&gt;Papertrail log integration&lt;/i&gt;
    ///     &lt;/b&gt;
    ///   &lt;/summary&gt;
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using CloudAmqp = Pulumi.CloudAmqp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var papertrail = new CloudAmqp.IntegrationLog("papertrail", new()
    ///     {
    ///         InstanceId = instance.Id,
    ///         Name = "papertrail",
    ///         Url = papertrailUrl,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &lt;/details&gt;
    /// 
    /// &lt;details&gt;
    ///   &lt;summary&gt;
    ///     &lt;b&gt;
    ///       &lt;i&gt;Scalyr log integration&lt;/i&gt;
    ///     &lt;/b&gt;
    ///   &lt;/summary&gt;
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using CloudAmqp = Pulumi.CloudAmqp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var scalyr = new CloudAmqp.IntegrationLog("scalyr", new()
    ///     {
    ///         InstanceId = instance.Id,
    ///         Name = "scalyr",
    ///         Token = scalyrToken,
    ///         Host = scalyrHost,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &lt;/details&gt;
    /// 
    /// &lt;details&gt;
    ///   &lt;summary&gt;
    ///     &lt;b&gt;
    ///       &lt;i&gt;Splunk log integration&lt;/i&gt;
    ///     &lt;/b&gt;
    ///   &lt;/summary&gt;
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using CloudAmqp = Pulumi.CloudAmqp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var splunk = new CloudAmqp.IntegrationLog("splunk", new()
    ///     {
    ///         InstanceId = instance.Id,
    ///         Name = "splunk",
    ///         Token = splunkToken,
    ///         HostPort = splunkHostPort,
    ///         SourceType = "generic_single_line",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &lt;/details&gt;
    /// 
    /// &lt;details&gt;
    ///   &lt;summary&gt;
    ///     &lt;b&gt;
    ///       &lt;i&gt;Stackdriver log integration (v1.20.2 or older versions)&lt;/i&gt;
    ///     &lt;/b&gt;
    ///   &lt;/summary&gt;
    /// 
    /// Use variable file populated with project_id, private_key and client_email
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using CloudAmqp = Pulumi.CloudAmqp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var stackdriver = new CloudAmqp.IntegrationLog("stackdriver", new()
    ///     {
    ///         InstanceId = instance.Id,
    ///         Name = "stackdriver",
    ///         ProjectId = stackdriverProjectId,
    ///         PrivateKey = stackdriverPrivateKey,
    ///         ClientEmail = stackdriverClientEmail,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// or by using google_service_account_key resource from Google provider
    /// 
    /// ## Import
    /// 
    /// `cloudamqp_integration_log`can be imported using the resource identifier together with CloudAMQP
    /// 
    /// instance identifier. The identifiers are CSV separated, see example below. To retrieve the resource,
    /// 
    /// use [CloudAMQP API list integration].
    /// 
    /// From Terraform v1.5.0, the `import` block can be used to import this resource:
    /// 
    /// hcl
    /// 
    /// import {
    /// 
    ///   to = cloudamqp_integration_log.this
    /// 
    ///   id = format("&lt;id&gt;,%s", cloudamqp_instance.instance.id)
    /// 
    /// }
    /// 
    /// ```sh
    /// $ pulumi import cloudamqp:index/integrationLog:IntegrationLog this &lt;id&gt;,&lt;instance_id&gt;`
    /// ```
    /// 
    /// [CloudAMQP API add integration]: https://docs.cloudamqp.com/cloudamqp_api.html#add-log-integration
    /// 
    /// [CloudAMQP API list integration]: https://docs.cloudamqp.com/cloudamqp_api.html#list-log-integrations
    /// 
    /// [Datadog documentation]: https://docs.datadoghq.com/getting_started/tagging/#define-tags
    /// 
    /// [integration type reference]: #integration-type-reference
    /// </summary>
    [CloudAmqpResourceType("cloudamqp:index/integrationLog:IntegrationLog")]
    public partial class IntegrationLog : global::Pulumi.CustomResource
    {
        /// <summary>
        /// AWS access key identifier.
        /// </summary>
        [Output("accessKeyId")]
        public Output<string?> AccessKeyId { get; private set; } = null!;

        /// <summary>
        /// The API key.
        /// </summary>
        [Output("apiKey")]
        public Output<string?> ApiKey { get; private set; } = null!;

        /// <summary>
        /// The application name for Coralogix.
        /// </summary>
        [Output("application")]
        public Output<string?> Application { get; private set; } = null!;

        /// <summary>
        /// The application identifier for Azure monitor.
        /// </summary>
        [Output("applicationId")]
        public Output<string?> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// The application secret for Azure monitor.
        /// </summary>
        [Output("applicationSecret")]
        public Output<string?> ApplicationSecret { get; private set; } = null!;

        /// <summary>
        /// The client email registered for the integration service.
        /// </summary>
        [Output("clientEmail")]
        public Output<string> ClientEmail { get; private set; } = null!;

        /// <summary>
        /// Google Service Account private key credentials.
        /// </summary>
        [Output("credentials")]
        public Output<string?> Credentials { get; private set; } = null!;

        /// <summary>
        /// The data collection endpoint for Azure monitor.
        /// </summary>
        [Output("dceUri")]
        public Output<string?> DceUri { get; private set; } = null!;

        /// <summary>
        /// ID of data collection rule that your DCE is linked to for Azure
        /// Monitor.
        /// 
        /// This is the full list of all arguments. Only a subset of arguments are used based on which type of
        /// integration used. See [integration type reference] table below for more information.
        /// </summary>
        [Output("dcrId")]
        public Output<string?> DcrId { get; private set; } = null!;

        /// <summary>
        /// The syslog destination to send the logs to for Coralogix.
        /// </summary>
        [Output("endpoint")]
        public Output<string?> Endpoint { get; private set; } = null!;

        /// <summary>
        /// The host for Scalyr integration. (app.scalyr.com,
        /// app.eu.scalyr.com)
        /// </summary>
        [Output("host")]
        public Output<string?> Host { get; private set; } = null!;

        /// <summary>
        /// Destination to send the logs.
        /// </summary>
        [Output("hostPort")]
        public Output<string?> HostPort { get; private set; } = null!;

        /// <summary>
        /// Instance identifier used to make proxy calls
        /// </summary>
        [Output("instanceId")]
        public Output<int> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The name of the third party log integration. See
        /// [integration type reference]
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The private access key.
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// Private key identifier. (Stackdriver)
        /// </summary>
        [Output("privateKeyId")]
        public Output<string> PrivateKeyId { get; private set; } = null!;

        /// <summary>
        /// The project identifier.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Region hosting the integration service.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// AWS secret access key.
        /// </summary>
        [Output("secretAccessKey")]
        public Output<string?> SecretAccessKey { get; private set; } = null!;

        /// <summary>
        /// Assign source type to the data exported, eg. generic_single_line.
        /// (Splunk)
        /// </summary>
        [Output("sourcetype")]
        public Output<string?> Sourcetype { get; private set; } = null!;

        /// <summary>
        /// The subsystem name for Coralogix.
        /// </summary>
        [Output("subsystem")]
        public Output<string?> Subsystem { get; private set; } = null!;

        /// <summary>
        /// The table name for Azure monitor.
        /// </summary>
        [Output("table")]
        public Output<string?> Table { get; private set; } = null!;

        /// <summary>
        /// Tags. e.g. `env=prod,region=europe`.
        /// 
        /// ***Note:*** If tags are used with Datadog. The value part (prod, europe, ...) must start with a
        /// letter, read more about tags format in the [Datadog documentation].
        /// </summary>
        [Output("tags")]
        public Output<string?> Tags { get; private set; } = null!;

        /// <summary>
        /// The tenant identifier for Azure monitor.
        /// </summary>
        [Output("tenantId")]
        public Output<string?> TenantId { get; private set; } = null!;

        /// <summary>
        /// Token used for authentication.
        /// </summary>
        [Output("token")]
        public Output<string?> Token { get; private set; } = null!;

        /// <summary>
        /// Endpoint to log integration.
        /// </summary>
        [Output("url")]
        public Output<string?> Url { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationLog resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationLog(string name, IntegrationLogArgs args, CustomResourceOptions? options = null)
            : base("cloudamqp:index/integrationLog:IntegrationLog", name, args ?? new IntegrationLogArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationLog(string name, Input<string> id, IntegrationLogState? state = null, CustomResourceOptions? options = null)
            : base("cloudamqp:index/integrationLog:IntegrationLog", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "accessKeyId",
                    "apiKey",
                    "applicationSecret",
                    "credentials",
                    "privateKey",
                    "privateKeyId",
                    "secretAccessKey",
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationLog resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationLog Get(string name, Input<string> id, IntegrationLogState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationLog(name, id, state, options);
        }
    }

    public sealed class IntegrationLogArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessKeyId")]
        private Input<string>? _accessKeyId;

        /// <summary>
        /// AWS access key identifier.
        /// </summary>
        public Input<string>? AccessKeyId
        {
            get => _accessKeyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessKeyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apiKey")]
        private Input<string>? _apiKey;

        /// <summary>
        /// The API key.
        /// </summary>
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The application name for Coralogix.
        /// </summary>
        [Input("application")]
        public Input<string>? Application { get; set; }

        /// <summary>
        /// The application identifier for Azure monitor.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        [Input("applicationSecret")]
        private Input<string>? _applicationSecret;

        /// <summary>
        /// The application secret for Azure monitor.
        /// </summary>
        public Input<string>? ApplicationSecret
        {
            get => _applicationSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _applicationSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The client email registered for the integration service.
        /// </summary>
        [Input("clientEmail")]
        public Input<string>? ClientEmail { get; set; }

        [Input("credentials")]
        private Input<string>? _credentials;

        /// <summary>
        /// Google Service Account private key credentials.
        /// </summary>
        public Input<string>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The data collection endpoint for Azure monitor.
        /// </summary>
        [Input("dceUri")]
        public Input<string>? DceUri { get; set; }

        /// <summary>
        /// ID of data collection rule that your DCE is linked to for Azure
        /// Monitor.
        /// 
        /// This is the full list of all arguments. Only a subset of arguments are used based on which type of
        /// integration used. See [integration type reference] table below for more information.
        /// </summary>
        [Input("dcrId")]
        public Input<string>? DcrId { get; set; }

        /// <summary>
        /// The syslog destination to send the logs to for Coralogix.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// The host for Scalyr integration. (app.scalyr.com,
        /// app.eu.scalyr.com)
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Destination to send the logs.
        /// </summary>
        [Input("hostPort")]
        public Input<string>? HostPort { get; set; }

        /// <summary>
        /// Instance identifier used to make proxy calls
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<int> InstanceId { get; set; } = null!;

        /// <summary>
        /// The name of the third party log integration. See
        /// [integration type reference]
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// The private access key.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateKeyId")]
        private Input<string>? _privateKeyId;

        /// <summary>
        /// Private key identifier. (Stackdriver)
        /// </summary>
        public Input<string>? PrivateKeyId
        {
            get => _privateKeyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKeyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The project identifier.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Region hosting the integration service.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("secretAccessKey")]
        private Input<string>? _secretAccessKey;

        /// <summary>
        /// AWS secret access key.
        /// </summary>
        public Input<string>? SecretAccessKey
        {
            get => _secretAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Assign source type to the data exported, eg. generic_single_line.
        /// (Splunk)
        /// </summary>
        [Input("sourcetype")]
        public Input<string>? Sourcetype { get; set; }

        /// <summary>
        /// The subsystem name for Coralogix.
        /// </summary>
        [Input("subsystem")]
        public Input<string>? Subsystem { get; set; }

        /// <summary>
        /// The table name for Azure monitor.
        /// </summary>
        [Input("table")]
        public Input<string>? Table { get; set; }

        /// <summary>
        /// Tags. e.g. `env=prod,region=europe`.
        /// 
        /// ***Note:*** If tags are used with Datadog. The value part (prod, europe, ...) must start with a
        /// letter, read more about tags format in the [Datadog documentation].
        /// </summary>
        [Input("tags")]
        public Input<string>? Tags { get; set; }

        /// <summary>
        /// The tenant identifier for Azure monitor.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// Token used for authentication.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Endpoint to log integration.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public IntegrationLogArgs()
        {
        }
        public static new IntegrationLogArgs Empty => new IntegrationLogArgs();
    }

    public sealed class IntegrationLogState : global::Pulumi.ResourceArgs
    {
        [Input("accessKeyId")]
        private Input<string>? _accessKeyId;

        /// <summary>
        /// AWS access key identifier.
        /// </summary>
        public Input<string>? AccessKeyId
        {
            get => _accessKeyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessKeyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apiKey")]
        private Input<string>? _apiKey;

        /// <summary>
        /// The API key.
        /// </summary>
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The application name for Coralogix.
        /// </summary>
        [Input("application")]
        public Input<string>? Application { get; set; }

        /// <summary>
        /// The application identifier for Azure monitor.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        [Input("applicationSecret")]
        private Input<string>? _applicationSecret;

        /// <summary>
        /// The application secret for Azure monitor.
        /// </summary>
        public Input<string>? ApplicationSecret
        {
            get => _applicationSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _applicationSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The client email registered for the integration service.
        /// </summary>
        [Input("clientEmail")]
        public Input<string>? ClientEmail { get; set; }

        [Input("credentials")]
        private Input<string>? _credentials;

        /// <summary>
        /// Google Service Account private key credentials.
        /// </summary>
        public Input<string>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The data collection endpoint for Azure monitor.
        /// </summary>
        [Input("dceUri")]
        public Input<string>? DceUri { get; set; }

        /// <summary>
        /// ID of data collection rule that your DCE is linked to for Azure
        /// Monitor.
        /// 
        /// This is the full list of all arguments. Only a subset of arguments are used based on which type of
        /// integration used. See [integration type reference] table below for more information.
        /// </summary>
        [Input("dcrId")]
        public Input<string>? DcrId { get; set; }

        /// <summary>
        /// The syslog destination to send the logs to for Coralogix.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// The host for Scalyr integration. (app.scalyr.com,
        /// app.eu.scalyr.com)
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Destination to send the logs.
        /// </summary>
        [Input("hostPort")]
        public Input<string>? HostPort { get; set; }

        /// <summary>
        /// Instance identifier used to make proxy calls
        /// </summary>
        [Input("instanceId")]
        public Input<int>? InstanceId { get; set; }

        /// <summary>
        /// The name of the third party log integration. See
        /// [integration type reference]
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// The private access key.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateKeyId")]
        private Input<string>? _privateKeyId;

        /// <summary>
        /// Private key identifier. (Stackdriver)
        /// </summary>
        public Input<string>? PrivateKeyId
        {
            get => _privateKeyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKeyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The project identifier.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Region hosting the integration service.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("secretAccessKey")]
        private Input<string>? _secretAccessKey;

        /// <summary>
        /// AWS secret access key.
        /// </summary>
        public Input<string>? SecretAccessKey
        {
            get => _secretAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Assign source type to the data exported, eg. generic_single_line.
        /// (Splunk)
        /// </summary>
        [Input("sourcetype")]
        public Input<string>? Sourcetype { get; set; }

        /// <summary>
        /// The subsystem name for Coralogix.
        /// </summary>
        [Input("subsystem")]
        public Input<string>? Subsystem { get; set; }

        /// <summary>
        /// The table name for Azure monitor.
        /// </summary>
        [Input("table")]
        public Input<string>? Table { get; set; }

        /// <summary>
        /// Tags. e.g. `env=prod,region=europe`.
        /// 
        /// ***Note:*** If tags are used with Datadog. The value part (prod, europe, ...) must start with a
        /// letter, read more about tags format in the [Datadog documentation].
        /// </summary>
        [Input("tags")]
        public Input<string>? Tags { get; set; }

        /// <summary>
        /// The tenant identifier for Azure monitor.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// Token used for authentication.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Endpoint to log integration.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public IntegrationLogState()
        {
        }
        public static new IntegrationLogState Empty => new IntegrationLogState();
    }
}
