// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CloudAmqp
{
    public partial class SecurityFirewall : Pulumi.CustomResource
    {
        /// <summary>
        /// Instance identifier
        /// </summary>
        [Output("instanceId")]
        public Output<int> InstanceId { get; private set; } = null!;

        [Output("rules")]
        public Output<ImmutableArray<Outputs.SecurityFirewallRules>> Rules { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityFirewall resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityFirewall(string name, SecurityFirewallArgs args, CustomResourceOptions? options = null)
            : base("cloudamqp:index/securityFirewall:SecurityFirewall", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private SecurityFirewall(string name, Input<string> id, SecurityFirewallState? state = null, CustomResourceOptions? options = null)
            : base("cloudamqp:index/securityFirewall:SecurityFirewall", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityFirewall resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityFirewall Get(string name, Input<string> id, SecurityFirewallState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityFirewall(name, id, state, options);
        }
    }

    public sealed class SecurityFirewallArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Instance identifier
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<int> InstanceId { get; set; } = null!;

        [Input("rules", required: true)]
        private InputList<Inputs.SecurityFirewallRulesArgs>? _rules;
        public InputList<Inputs.SecurityFirewallRulesArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.SecurityFirewallRulesArgs>());
            set => _rules = value;
        }

        public SecurityFirewallArgs()
        {
        }
    }

    public sealed class SecurityFirewallState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Instance identifier
        /// </summary>
        [Input("instanceId")]
        public Input<int>? InstanceId { get; set; }

        [Input("rules")]
        private InputList<Inputs.SecurityFirewallRulesGetArgs>? _rules;
        public InputList<Inputs.SecurityFirewallRulesGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.SecurityFirewallRulesGetArgs>());
            set => _rules = value;
        }

        public SecurityFirewallState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class SecurityFirewallRulesArgs : Pulumi.ResourceArgs
    {
        [Input("ip", required: true)]
        public Input<string> Ip { get; set; } = null!;

        [Input("ports")]
        private InputList<int>? _ports;
        public InputList<int> Ports
        {
            get => _ports ?? (_ports = new InputList<int>());
            set => _ports = value;
        }

        [Input("services")]
        private InputList<string>? _services;
        public InputList<string> Services
        {
            get => _services ?? (_services = new InputList<string>());
            set => _services = value;
        }

        public SecurityFirewallRulesArgs()
        {
        }
    }

    public sealed class SecurityFirewallRulesGetArgs : Pulumi.ResourceArgs
    {
        [Input("ip", required: true)]
        public Input<string> Ip { get; set; } = null!;

        [Input("ports")]
        private InputList<int>? _ports;
        public InputList<int> Ports
        {
            get => _ports ?? (_ports = new InputList<int>());
            set => _ports = value;
        }

        [Input("services")]
        private InputList<string>? _services;
        public InputList<string> Services
        {
            get => _services ?? (_services = new InputList<string>());
            set => _services = value;
        }

        public SecurityFirewallRulesGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class SecurityFirewallRules
    {
        public readonly string Ip;
        public readonly ImmutableArray<int> Ports;
        public readonly ImmutableArray<string> Services;

        [OutputConstructor]
        private SecurityFirewallRules(
            string ip,
            ImmutableArray<int> ports,
            ImmutableArray<string> services)
        {
            Ip = ip;
            Ports = ports;
            Services = services;
        }
    }
    }
}
