// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CloudAmqp
{
    /// <summary>
    /// This resource is a generic way to handle PrivateLink (AWS and Azure) and Private Service Connect (GCP).
    /// Communication between resources can be done just as they were living inside a VPC. CloudAMQP creates an Endpoint
    /// Service to connect the VPC and creating a new network interface to handle the communicate.
    /// 
    /// If no existing VPC available when enable VPC connect, a new VPC will be created with subnet `10.52.72.0/24`.
    /// 
    /// More information can be found at: [CloudAMQP VPC Connect](https://www.cloudamqp.com/docs/cloudamqp-vpc-connect.html)
    /// 
    /// &gt; **Note:** Enabling VPC Connect will automatically add a firewall rule.
    /// 
    /// &lt;details&gt;
    ///  &lt;summary&gt;
    ///     &lt;b&gt;
    ///       &lt;i&gt;Default PrivateLink firewall rule [AWS, Azure]&lt;/i&gt;
    ///     &lt;/b&gt;
    ///   &lt;/summary&gt;
    /// 
    /// ## Example Usage
    /// 
    /// &lt;details&gt;
    ///   &lt;summary&gt;
    ///     &lt;b&gt;
    ///       &lt;i&gt;Enable VPC Connect (PrivateLink) in AWS&lt;/i&gt;
    ///     &lt;/b&gt;
    ///   &lt;/summary&gt;
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using CloudAmqp = Pulumi.CloudAmqp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vpc = new CloudAmqp.Vpc("vpc", new()
    ///     {
    ///         Name = "Standalone VPC",
    ///         Region = "amazon-web-services::us-west-1",
    ///         Subnet = "10.56.72.0/24",
    ///         Tags = new[] {},
    ///     });
    /// 
    ///     var instance = new CloudAmqp.Instance("instance", new()
    ///     {
    ///         Name = "Instance 01",
    ///         Plan = "bunny-1",
    ///         Region = "amazon-web-services::us-west-1",
    ///         Tags = new[] {},
    ///         VpcId = vpc.Id,
    ///         KeepAssociatedVpc = true,
    ///     });
    /// 
    ///     var vpcConnect = new CloudAmqp.VpcConnect("vpc_connect", new()
    ///     {
    ///         InstanceId = instance.Id,
    ///         Region = instance.Region,
    ///         AllowedPrincipals = new[]
    ///         {
    ///             "arn:aws:iam::aws-account-id:user/user-name",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &lt;/details&gt;
    /// 
    /// &lt;details&gt;
    ///   &lt;summary&gt;
    ///     &lt;b&gt;
    ///       &lt;i&gt;Enable VPC Connect (PrivateLink) in Azure&lt;/i&gt;
    ///     &lt;/b&gt;
    ///   &lt;/summary&gt;
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using CloudAmqp = Pulumi.CloudAmqp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vpc = new CloudAmqp.Vpc("vpc", new()
    ///     {
    ///         Name = "Standalone VPC",
    ///         Region = "azure-arm::westus",
    ///         Subnet = "10.56.72.0/24",
    ///         Tags = new[] {},
    ///     });
    /// 
    ///     var instance = new CloudAmqp.Instance("instance", new()
    ///     {
    ///         Name = "Instance 01",
    ///         Plan = "bunny-1",
    ///         Region = "azure-arm::westus",
    ///         Tags = new[] {},
    ///         VpcId = vpc.Id,
    ///         KeepAssociatedVpc = true,
    ///     });
    /// 
    ///     var vpcConnect = new CloudAmqp.VpcConnect("vpc_connect", new()
    ///     {
    ///         InstanceId = instance.Id,
    ///         Region = instance.Region,
    ///         ApprovedSubscriptions = new[]
    ///         {
    ///             "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &lt;/details&gt;
    /// 
    /// &lt;details&gt;
    ///   &lt;summary&gt;
    ///     &lt;b&gt;
    ///       &lt;i&gt;Enable VPC Connect (Private Service Connect) in GCP&lt;/i&gt;
    ///     &lt;/b&gt;
    ///   &lt;/summary&gt;
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using CloudAmqp = Pulumi.CloudAmqp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vpc = new CloudAmqp.Vpc("vpc", new()
    ///     {
    ///         Name = "Standalone VPC",
    ///         Region = "google-compute-engine::us-west1",
    ///         Subnet = "10.56.72.0/24",
    ///         Tags = new[] {},
    ///     });
    /// 
    ///     var instance = new CloudAmqp.Instance("instance", new()
    ///     {
    ///         Name = "Instance 01",
    ///         Plan = "bunny-1",
    ///         Region = "google-compute-engine::us-west1",
    ///         Tags = new[] {},
    ///         VpcId = vpc.Id,
    ///         KeepAssociatedVpc = true,
    ///     });
    /// 
    ///     var vpcConnect = new CloudAmqp.VpcConnect("vpc_connect", new()
    ///     {
    ///         InstanceId = instance.Id,
    ///         Region = instance.Region,
    ///         AllowedProjects = new[]
    ///         {
    ///             "some-project-123456",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &lt;/details&gt;
    /// 
    /// ### with additional firewall rules
    /// 
    /// &lt;details&gt;
    ///   &lt;summary&gt;
    ///     &lt;b&gt;
    ///       &lt;i&gt;CloudAMQP instance in an existing VPC with managed firewall rules&lt;/i&gt;
    ///     &lt;/b&gt;
    ///   &lt;/summary&gt;
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using CloudAmqp = Pulumi.CloudAmqp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vpc = new CloudAmqp.Vpc("vpc", new()
    ///     {
    ///         Name = "Standalone VPC",
    ///         Region = "amazon-web-services::us-west-1",
    ///         Subnet = "10.56.72.0/24",
    ///         Tags = new[] {},
    ///     });
    /// 
    ///     var instance = new CloudAmqp.Instance("instance", new()
    ///     {
    ///         Name = "Instance 01",
    ///         Plan = "bunny-1",
    ///         Region = "amazon-web-services::us-west-1",
    ///         Tags = new[] {},
    ///         VpcId = vpc.Id,
    ///         KeepAssociatedVpc = true,
    ///     });
    /// 
    ///     var vpcConnect = new CloudAmqp.VpcConnect("vpc_connect", new()
    ///     {
    ///         InstanceId = instance.Id,
    ///         AllowedPrincipals = new[]
    ///         {
    ///             "arn:aws:iam::aws-account-id:user/user-name",
    ///         },
    ///     });
    /// 
    ///     var firewallSettings = new CloudAmqp.SecurityFirewall("firewall_settings", new()
    ///     {
    ///         InstanceId = instance.Id,
    ///         Rules = new[]
    ///         {
    ///             new CloudAmqp.Inputs.SecurityFirewallRuleArgs
    ///             {
    ///                 Description = "Custom PrivateLink setup",
    ///                 Ip = vpc.Subnet,
    ///                 Ports = new() { },
    ///                 Services = new[]
    ///                 {
    ///                     "AMQP",
    ///                     "AMQPS",
    ///                     "HTTPS",
    ///                     "STREAM",
    ///                     "STREAM_SSL",
    ///                 },
    ///             },
    ///             new CloudAmqp.Inputs.SecurityFirewallRuleArgs
    ///             {
    ///                 Description = "MGMT interface",
    ///                 Ip = "0.0.0.0/0",
    ///                 Ports = new() { },
    ///                 Services = new[]
    ///                 {
    ///                     "HTTPS",
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             vpcConnect,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &lt;/details&gt;
    /// </summary>
    [CloudAmqpResourceType("cloudamqp:index/vpcConnect:VpcConnect")]
    public partial class VpcConnect : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Covering availability zones used when creating an endpoint from other VPC. [AWS]
        /// </summary>
        [Output("activeZones")]
        public Output<ImmutableArray<string>> ActiveZones { get; private set; } = null!;

        /// <summary>
        /// List of allowed prinicpals used by AWS, see below table.
        /// </summary>
        [Output("allowedPrincipals")]
        public Output<ImmutableArray<string>> AllowedPrincipals { get; private set; } = null!;

        /// <summary>
        /// List of allowed projects used by GCP, see below table.
        /// </summary>
        [Output("allowedProjects")]
        public Output<ImmutableArray<string>> AllowedProjects { get; private set; } = null!;

        /// <summary>
        /// List of approved subscriptions used by Azure, see below table.
        /// </summary>
        [Output("approvedSubscriptions")]
        public Output<ImmutableArray<string>> ApprovedSubscriptions { get; private set; } = null!;

        /// <summary>
        /// The CloudAMQP instance identifier.
        /// </summary>
        [Output("instanceId")]
        public Output<int> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The region where the CloudAMQP instance is hosted.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Service name (alias for Azure) of the PrivateLink.
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Configurable sleep time (seconds) when enable Private Service Connect.
        /// Default set to 10 seconds.
        /// </summary>
        [Output("sleep")]
        public Output<int?> Sleep { get; private set; } = null!;

        /// <summary>
        /// Status of the Private Service Connect [enabled, pending, disabled]
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Configurable timeout time (seconds) when enable Private Service Connect.
        /// Default set to 1800 seconds.
        /// </summary>
        [Output("timeout")]
        public Output<int?> Timeout { get; private set; } = null!;


        /// <summary>
        /// Create a VpcConnect resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VpcConnect(string name, VpcConnectArgs args, CustomResourceOptions? options = null)
            : base("cloudamqp:index/vpcConnect:VpcConnect", name, args ?? new VpcConnectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VpcConnect(string name, Input<string> id, VpcConnectState? state = null, CustomResourceOptions? options = null)
            : base("cloudamqp:index/vpcConnect:VpcConnect", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VpcConnect resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VpcConnect Get(string name, Input<string> id, VpcConnectState? state = null, CustomResourceOptions? options = null)
        {
            return new VpcConnect(name, id, state, options);
        }
    }

    public sealed class VpcConnectArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedPrincipals")]
        private InputList<string>? _allowedPrincipals;

        /// <summary>
        /// List of allowed prinicpals used by AWS, see below table.
        /// </summary>
        public InputList<string> AllowedPrincipals
        {
            get => _allowedPrincipals ?? (_allowedPrincipals = new InputList<string>());
            set => _allowedPrincipals = value;
        }

        [Input("allowedProjects")]
        private InputList<string>? _allowedProjects;

        /// <summary>
        /// List of allowed projects used by GCP, see below table.
        /// </summary>
        public InputList<string> AllowedProjects
        {
            get => _allowedProjects ?? (_allowedProjects = new InputList<string>());
            set => _allowedProjects = value;
        }

        [Input("approvedSubscriptions")]
        private InputList<string>? _approvedSubscriptions;

        /// <summary>
        /// List of approved subscriptions used by Azure, see below table.
        /// </summary>
        public InputList<string> ApprovedSubscriptions
        {
            get => _approvedSubscriptions ?? (_approvedSubscriptions = new InputList<string>());
            set => _approvedSubscriptions = value;
        }

        /// <summary>
        /// The CloudAMQP instance identifier.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<int> InstanceId { get; set; } = null!;

        /// <summary>
        /// The region where the CloudAMQP instance is hosted.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// Configurable sleep time (seconds) when enable Private Service Connect.
        /// Default set to 10 seconds.
        /// </summary>
        [Input("sleep")]
        public Input<int>? Sleep { get; set; }

        /// <summary>
        /// Configurable timeout time (seconds) when enable Private Service Connect.
        /// Default set to 1800 seconds.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        public VpcConnectArgs()
        {
        }
        public static new VpcConnectArgs Empty => new VpcConnectArgs();
    }

    public sealed class VpcConnectState : global::Pulumi.ResourceArgs
    {
        [Input("activeZones")]
        private InputList<string>? _activeZones;

        /// <summary>
        /// Covering availability zones used when creating an endpoint from other VPC. [AWS]
        /// </summary>
        public InputList<string> ActiveZones
        {
            get => _activeZones ?? (_activeZones = new InputList<string>());
            set => _activeZones = value;
        }

        [Input("allowedPrincipals")]
        private InputList<string>? _allowedPrincipals;

        /// <summary>
        /// List of allowed prinicpals used by AWS, see below table.
        /// </summary>
        public InputList<string> AllowedPrincipals
        {
            get => _allowedPrincipals ?? (_allowedPrincipals = new InputList<string>());
            set => _allowedPrincipals = value;
        }

        [Input("allowedProjects")]
        private InputList<string>? _allowedProjects;

        /// <summary>
        /// List of allowed projects used by GCP, see below table.
        /// </summary>
        public InputList<string> AllowedProjects
        {
            get => _allowedProjects ?? (_allowedProjects = new InputList<string>());
            set => _allowedProjects = value;
        }

        [Input("approvedSubscriptions")]
        private InputList<string>? _approvedSubscriptions;

        /// <summary>
        /// List of approved subscriptions used by Azure, see below table.
        /// </summary>
        public InputList<string> ApprovedSubscriptions
        {
            get => _approvedSubscriptions ?? (_approvedSubscriptions = new InputList<string>());
            set => _approvedSubscriptions = value;
        }

        /// <summary>
        /// The CloudAMQP instance identifier.
        /// </summary>
        [Input("instanceId")]
        public Input<int>? InstanceId { get; set; }

        /// <summary>
        /// The region where the CloudAMQP instance is hosted.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Service name (alias for Azure) of the PrivateLink.
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Configurable sleep time (seconds) when enable Private Service Connect.
        /// Default set to 10 seconds.
        /// </summary>
        [Input("sleep")]
        public Input<int>? Sleep { get; set; }

        /// <summary>
        /// Status of the Private Service Connect [enabled, pending, disabled]
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Configurable timeout time (seconds) when enable Private Service Connect.
        /// Default set to 1800 seconds.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        public VpcConnectState()
        {
        }
        public static new VpcConnectState Empty => new VpcConnectState();
    }
}
