// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CloudAmqp
{
    public static class GetAlarm
    {
        public static Task<GetAlarmResult> InvokeAsync(GetAlarmArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAlarmResult>("cloudamqp:index/getAlarm:getAlarm", args ?? new GetAlarmArgs(), options.WithVersion());
    }


    public sealed class GetAlarmArgs : Pulumi.InvokeArgs
    {
        [Input("alarmId")]
        public int? AlarmId { get; set; }

        [Input("instanceId", required: true)]
        public int InstanceId { get; set; }

        [Input("type")]
        public string? Type { get; set; }

        public GetAlarmArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAlarmResult
    {
        public readonly int? AlarmId;
        public readonly bool Enabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int InstanceId;
        public readonly string MessageType;
        public readonly string QueueRegex;
        public readonly ImmutableArray<int> Recipients;
        public readonly int TimeThreshold;
        public readonly string? Type;
        public readonly int ValueThreshold;
        public readonly string VhostRegex;

        [OutputConstructor]
        private GetAlarmResult(
            int? alarmId,

            bool enabled,

            string id,

            int instanceId,

            string messageType,

            string queueRegex,

            ImmutableArray<int> recipients,

            int timeThreshold,

            string? type,

            int valueThreshold,

            string vhostRegex)
        {
            AlarmId = alarmId;
            Enabled = enabled;
            Id = id;
            InstanceId = instanceId;
            MessageType = messageType;
            QueueRegex = queueRegex;
            Recipients = recipients;
            TimeThreshold = timeThreshold;
            Type = type;
            ValueThreshold = valueThreshold;
            VhostRegex = vhostRegex;
        }
    }
}
