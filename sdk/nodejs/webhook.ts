// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to enable or disable webhooks for a specific vhost and queue.
 *
 * Only available for dedicated subscription plans.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const webhookQueue = new cloudamqp.Webhook("webhook_queue", {
 *     instanceId: instance.id,
 *     vhost: "myvhost",
 *     queue: "webhook-queue",
 *     webhookUri: "https://example.com/webhook?key=secret",
 *     retryInterval: 5,
 *     concurrency: 5,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Dependency
 *
 * This resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.
 *
 * ## Import
 *
 * `cloudamqp_webhook` can be imported using the resource identifier together with CloudAMQP instance identifier. The identifiers are CSV separated, see example below.
 *
 * ```sh
 * $ pulumi import cloudamqp:index/webhook:Webhook webhook_queue <id>,<instance_id>`
 * ```
 */
export class Webhook extends pulumi.CustomResource {
    /**
     * Get an existing Webhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebhookState, opts?: pulumi.CustomResourceOptions): Webhook {
        return new Webhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudamqp:index/webhook:Webhook';

    /**
     * Returns true if the given object is an instance of Webhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Webhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Webhook.__pulumiType;
    }

    /**
     * Max simultaneous requests to the endpoint.
     */
    public readonly concurrency!: pulumi.Output<number>;
    /**
     * The CloudAMQP instance ID.
     */
    public readonly instanceId!: pulumi.Output<number>;
    /**
     * A (durable) queue on your RabbitMQ instance.
     */
    public readonly queue!: pulumi.Output<string>;
    /**
     * How often we retry if your endpoint fails (in seconds).
     */
    public readonly retryInterval!: pulumi.Output<number>;
    /**
     * The vhost the queue resides in.
     */
    public readonly vhost!: pulumi.Output<string>;
    /**
     * A POST request will be made for each message in the queue to this endpoint.
     */
    public readonly webhookUri!: pulumi.Output<string>;

    /**
     * Create a Webhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebhookArgs | WebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebhookState | undefined;
            resourceInputs["concurrency"] = state ? state.concurrency : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["queue"] = state ? state.queue : undefined;
            resourceInputs["retryInterval"] = state ? state.retryInterval : undefined;
            resourceInputs["vhost"] = state ? state.vhost : undefined;
            resourceInputs["webhookUri"] = state ? state.webhookUri : undefined;
        } else {
            const args = argsOrState as WebhookArgs | undefined;
            if ((!args || args.concurrency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'concurrency'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.queue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queue'");
            }
            if ((!args || args.retryInterval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retryInterval'");
            }
            if ((!args || args.vhost === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vhost'");
            }
            if ((!args || args.webhookUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'webhookUri'");
            }
            resourceInputs["concurrency"] = args ? args.concurrency : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["queue"] = args ? args.queue : undefined;
            resourceInputs["retryInterval"] = args ? args.retryInterval : undefined;
            resourceInputs["vhost"] = args ? args.vhost : undefined;
            resourceInputs["webhookUri"] = args ? args.webhookUri : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Webhook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Webhook resources.
 */
export interface WebhookState {
    /**
     * Max simultaneous requests to the endpoint.
     */
    concurrency?: pulumi.Input<number>;
    /**
     * The CloudAMQP instance ID.
     */
    instanceId?: pulumi.Input<number>;
    /**
     * A (durable) queue on your RabbitMQ instance.
     */
    queue?: pulumi.Input<string>;
    /**
     * How often we retry if your endpoint fails (in seconds).
     */
    retryInterval?: pulumi.Input<number>;
    /**
     * The vhost the queue resides in.
     */
    vhost?: pulumi.Input<string>;
    /**
     * A POST request will be made for each message in the queue to this endpoint.
     */
    webhookUri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Webhook resource.
 */
export interface WebhookArgs {
    /**
     * Max simultaneous requests to the endpoint.
     */
    concurrency: pulumi.Input<number>;
    /**
     * The CloudAMQP instance ID.
     */
    instanceId: pulumi.Input<number>;
    /**
     * A (durable) queue on your RabbitMQ instance.
     */
    queue: pulumi.Input<string>;
    /**
     * How often we retry if your endpoint fails (in seconds).
     */
    retryInterval: pulumi.Input<number>;
    /**
     * The vhost the queue resides in.
     */
    vhost: pulumi.Input<string>;
    /**
     * A POST request will be made for each message in the queue to this endpoint.
     */
    webhookUri: pulumi.Input<string>;
}
