// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * `cloudamqp_rabbitmq_configuration` can be imported using the CloudAMQP instance identifier.  To
 *
 * retrieve the identifier, use [CloudAMQP API list intances].
 *
 * From Terraform v1.5.0, the `import` block can be used to import this resource:
 *
 * hcl
 *
 * import {
 *
 *   to = cloudamqp_rabbitmq_configuration.config
 *
 *   id = cloudamqp_instance.instance.id
 *
 * }
 *
 * Or use Terraform CLI:
 *
 * ```sh
 * $ pulumi import cloudamqp:index/rabbitConfiguration:RabbitConfiguration config <instance_id>`
 * ```
 */
export class RabbitConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing RabbitConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RabbitConfigurationState, opts?: pulumi.CustomResourceOptions): RabbitConfiguration {
        return new RabbitConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudamqp:index/rabbitConfiguration:RabbitConfiguration';

    /**
     * Returns true if the given object is an instance of RabbitConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RabbitConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RabbitConfiguration.__pulumiType;
    }

    /**
     * Set the maximum permissible number of
     * channels per connection.
     */
    declare public readonly channelMax: pulumi.Output<number>;
    /**
     * Set how the cluster should handle network
     * partition.
     */
    declare public readonly clusterPartitionHandling: pulumi.Output<string>;
    /**
     * Set the maximum permissible number of
     * connection.
     */
    declare public readonly connectionMax: pulumi.Output<number>;
    /**
     * A consumer that has recevied a message and
     * does not acknowledge that message within the timeout in
     * milliseconds
     */
    declare public readonly consumerTimeout: pulumi.Output<number>;
    /**
     * Set the server AMQP 0-9-1 heartbeat timeout
     * in seconds.
     */
    declare public readonly heartbeat: pulumi.Output<number>;
    /**
     * The CloudAMQP instance ID.
     */
    declare public readonly instanceId: pulumi.Output<number>;
    /**
     * Log level for the logger used for log
     * integrations and the CloudAMQP Console log view.
     */
    declare public readonly logExchangeLevel: pulumi.Output<string>;
    /**
     * The largest allowed message payload size in
     * bytes.
     */
    declare public readonly maxMessageSize: pulumi.Output<number>;
    /**
     * Size in bytes below which to embed messages
     * in the queue index. 0 will turn off payload embedding in the
     * queue index.
     */
    declare public readonly queueIndexEmbedMsgsBelow: pulumi.Output<number>;
    /**
     * Configurable sleep time in seconds between retries
     * for RabbitMQ configuration. Default set to 60 seconds.
     */
    declare public readonly sleep: pulumi.Output<number>;
    /**
     * Configurable timeout time in seconds for RabbitMQ
     * configuration. Default set to 3600 seconds.
     */
    declare public readonly timeout: pulumi.Output<number>;
    /**
     * When the server will enter memory based
     * flow-control as relative to the maximum available memory.
     */
    declare public readonly vmMemoryHighWatermark: pulumi.Output<number>;

    /**
     * Create a RabbitConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RabbitConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RabbitConfigurationArgs | RabbitConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RabbitConfigurationState | undefined;
            resourceInputs["channelMax"] = state?.channelMax;
            resourceInputs["clusterPartitionHandling"] = state?.clusterPartitionHandling;
            resourceInputs["connectionMax"] = state?.connectionMax;
            resourceInputs["consumerTimeout"] = state?.consumerTimeout;
            resourceInputs["heartbeat"] = state?.heartbeat;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["logExchangeLevel"] = state?.logExchangeLevel;
            resourceInputs["maxMessageSize"] = state?.maxMessageSize;
            resourceInputs["queueIndexEmbedMsgsBelow"] = state?.queueIndexEmbedMsgsBelow;
            resourceInputs["sleep"] = state?.sleep;
            resourceInputs["timeout"] = state?.timeout;
            resourceInputs["vmMemoryHighWatermark"] = state?.vmMemoryHighWatermark;
        } else {
            const args = argsOrState as RabbitConfigurationArgs | undefined;
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["channelMax"] = args?.channelMax;
            resourceInputs["clusterPartitionHandling"] = args?.clusterPartitionHandling;
            resourceInputs["connectionMax"] = args?.connectionMax;
            resourceInputs["consumerTimeout"] = args?.consumerTimeout;
            resourceInputs["heartbeat"] = args?.heartbeat;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["logExchangeLevel"] = args?.logExchangeLevel;
            resourceInputs["maxMessageSize"] = args?.maxMessageSize;
            resourceInputs["queueIndexEmbedMsgsBelow"] = args?.queueIndexEmbedMsgsBelow;
            resourceInputs["sleep"] = args?.sleep;
            resourceInputs["timeout"] = args?.timeout;
            resourceInputs["vmMemoryHighWatermark"] = args?.vmMemoryHighWatermark;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RabbitConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RabbitConfiguration resources.
 */
export interface RabbitConfigurationState {
    /**
     * Set the maximum permissible number of
     * channels per connection.
     */
    channelMax?: pulumi.Input<number>;
    /**
     * Set how the cluster should handle network
     * partition.
     */
    clusterPartitionHandling?: pulumi.Input<string>;
    /**
     * Set the maximum permissible number of
     * connection.
     */
    connectionMax?: pulumi.Input<number>;
    /**
     * A consumer that has recevied a message and
     * does not acknowledge that message within the timeout in
     * milliseconds
     */
    consumerTimeout?: pulumi.Input<number>;
    /**
     * Set the server AMQP 0-9-1 heartbeat timeout
     * in seconds.
     */
    heartbeat?: pulumi.Input<number>;
    /**
     * The CloudAMQP instance ID.
     */
    instanceId?: pulumi.Input<number>;
    /**
     * Log level for the logger used for log
     * integrations and the CloudAMQP Console log view.
     */
    logExchangeLevel?: pulumi.Input<string>;
    /**
     * The largest allowed message payload size in
     * bytes.
     */
    maxMessageSize?: pulumi.Input<number>;
    /**
     * Size in bytes below which to embed messages
     * in the queue index. 0 will turn off payload embedding in the
     * queue index.
     */
    queueIndexEmbedMsgsBelow?: pulumi.Input<number>;
    /**
     * Configurable sleep time in seconds between retries
     * for RabbitMQ configuration. Default set to 60 seconds.
     */
    sleep?: pulumi.Input<number>;
    /**
     * Configurable timeout time in seconds for RabbitMQ
     * configuration. Default set to 3600 seconds.
     */
    timeout?: pulumi.Input<number>;
    /**
     * When the server will enter memory based
     * flow-control as relative to the maximum available memory.
     */
    vmMemoryHighWatermark?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a RabbitConfiguration resource.
 */
export interface RabbitConfigurationArgs {
    /**
     * Set the maximum permissible number of
     * channels per connection.
     */
    channelMax?: pulumi.Input<number>;
    /**
     * Set how the cluster should handle network
     * partition.
     */
    clusterPartitionHandling?: pulumi.Input<string>;
    /**
     * Set the maximum permissible number of
     * connection.
     */
    connectionMax?: pulumi.Input<number>;
    /**
     * A consumer that has recevied a message and
     * does not acknowledge that message within the timeout in
     * milliseconds
     */
    consumerTimeout?: pulumi.Input<number>;
    /**
     * Set the server AMQP 0-9-1 heartbeat timeout
     * in seconds.
     */
    heartbeat?: pulumi.Input<number>;
    /**
     * The CloudAMQP instance ID.
     */
    instanceId: pulumi.Input<number>;
    /**
     * Log level for the logger used for log
     * integrations and the CloudAMQP Console log view.
     */
    logExchangeLevel?: pulumi.Input<string>;
    /**
     * The largest allowed message payload size in
     * bytes.
     */
    maxMessageSize?: pulumi.Input<number>;
    /**
     * Size in bytes below which to embed messages
     * in the queue index. 0 will turn off payload embedding in the
     * queue index.
     */
    queueIndexEmbedMsgsBelow?: pulumi.Input<number>;
    /**
     * Configurable sleep time in seconds between retries
     * for RabbitMQ configuration. Default set to 60 seconds.
     */
    sleep?: pulumi.Input<number>;
    /**
     * Configurable timeout time in seconds for RabbitMQ
     * configuration. Default set to 3600 seconds.
     */
    timeout?: pulumi.Input<number>;
    /**
     * When the server will enter memory based
     * flow-control as relative to the maximum available memory.
     */
    vmMemoryHighWatermark?: pulumi.Input<number>;
}
