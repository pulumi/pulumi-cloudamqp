// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to expand the disk with additional storage capacity. There is no downtime when expanding the disk.
 *
 * Only available for dedicated subscription plans hosted at Amazon Web Services (AWS) at this time.
 *
 * > **WARNING:** Due to restrictions from cloud providers, it's only possible to resize the disk every 8 hours.
 *
 * Pricing is available at [cloudamqp.com](https://www.cloudamqp.com/).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * // Instance
 * const instance = new cloudamqp.Instance("instance", {
 *     plan: "squirrel-1",
 *     region: "amazon-web-services::us-west-2",
 *     rmqVersion: "3.10.1",
 * });
 * // Resize disk with 25 extra GB
 * const resizeDisk = new cloudamqp.ExtraDiskSize("resizeDisk", {
 *     instanceId: instance.id,
 *     extraDiskSize: 25,
 * });
 * const nodes = instance.id.apply(id => cloudamqp.getNodesOutput({
 *     instanceId: id,
 * }));
 * ```
 *
 * ## Import
 *
 * Not possible to import this resource.
 */
export class ExtraDiskSize extends pulumi.CustomResource {
    /**
     * Get an existing ExtraDiskSize resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExtraDiskSizeState, opts?: pulumi.CustomResourceOptions): ExtraDiskSize {
        return new ExtraDiskSize(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudamqp:index/extraDiskSize:ExtraDiskSize';

    /**
     * Returns true if the given object is an instance of ExtraDiskSize.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExtraDiskSize {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExtraDiskSize.__pulumiType;
    }

    /**
     * Extra disk size in GB. Supported values: 25, 50, 100, 250, 500, 1000, 2000
     */
    public readonly extraDiskSize!: pulumi.Output<number>;
    /**
     * The CloudAMQP instance ID.
     */
    public readonly instanceId!: pulumi.Output<number>;

    /**
     * Create a ExtraDiskSize resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExtraDiskSizeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExtraDiskSizeArgs | ExtraDiskSizeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExtraDiskSizeState | undefined;
            resourceInputs["extraDiskSize"] = state ? state.extraDiskSize : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
        } else {
            const args = argsOrState as ExtraDiskSizeArgs | undefined;
            if ((!args || args.extraDiskSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extraDiskSize'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["extraDiskSize"] = args ? args.extraDiskSize : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExtraDiskSize.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExtraDiskSize resources.
 */
export interface ExtraDiskSizeState {
    /**
     * Extra disk size in GB. Supported values: 25, 50, 100, 250, 500, 1000, 2000
     */
    extraDiskSize?: pulumi.Input<number>;
    /**
     * The CloudAMQP instance ID.
     */
    instanceId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ExtraDiskSize resource.
 */
export interface ExtraDiskSizeArgs {
    /**
     * Extra disk size in GB. Supported values: 25, 50, 100, 250, 500, 1000, 2000
     */
    extraDiskSize: pulumi.Input<number>;
    /**
     * The CloudAMQP instance ID.
     */
    instanceId: pulumi.Input<number>;
}
