// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource allows you to resize the disk with additional storage capacity.
 *
 * ***Before v1.25.0***: Only available for Amazon Web Services (AWS) without downtime.
 *
 * ***From v1.25.0***: Google Compute Engine (GCE) and Azure available.
 *
 * Introducing a new optional argument called `allowDowntime`.  Leaving it out or set it to false will proceed to try and resize the disk without downtime, available for *AWS* and *GCE*.
 * While *Azure* only support swapping the disk, and this argument needs to be set to *true*.
 *
 * `allowDowntime` also makes it possible to circumvent the time rate limit or shrinking the disk.
 *
 * |         Cloud         |        allow_        |          allow_          |
 * |-----------------------|----------------------|--------------------------|
 * | amazon-web-services   | Expand current disk* | Try to expand, otherwise |
 * | google-compute-engine | Expand current disk* | Try to expand, otherwise |
 * | azure-arm             | Not                  | Swap disk to new         |
 */
export class ExtraDiskSize extends pulumi.CustomResource {
    /**
     * Get an existing ExtraDiskSize resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExtraDiskSizeState, opts?: pulumi.CustomResourceOptions): ExtraDiskSize {
        return new ExtraDiskSize(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudamqp:index/extraDiskSize:ExtraDiskSize';

    /**
     * Returns true if the given object is an instance of ExtraDiskSize.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExtraDiskSize {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExtraDiskSize.__pulumiType;
    }

    /**
     * When resizing disk, allow cluster downtime to do so
     */
    public readonly allowDowntime!: pulumi.Output<boolean | undefined>;
    /**
     * Extra disk size in GB
     */
    public readonly extraDiskSize!: pulumi.Output<number>;
    /**
     * Instance identifier
     */
    public readonly instanceId!: pulumi.Output<number>;
    public /*out*/ readonly nodes!: pulumi.Output<outputs.ExtraDiskSizeNode[]>;
    /**
     * Configurable sleep time in seconds between retries for resizing the disk
     */
    public readonly sleep!: pulumi.Output<number | undefined>;
    /**
     * Configurable timeout time in seconds for resizing the disk
     */
    public readonly timeout!: pulumi.Output<number | undefined>;

    /**
     * Create a ExtraDiskSize resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExtraDiskSizeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExtraDiskSizeArgs | ExtraDiskSizeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExtraDiskSizeState | undefined;
            resourceInputs["allowDowntime"] = state ? state.allowDowntime : undefined;
            resourceInputs["extraDiskSize"] = state ? state.extraDiskSize : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["sleep"] = state ? state.sleep : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as ExtraDiskSizeArgs | undefined;
            if ((!args || args.extraDiskSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extraDiskSize'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["allowDowntime"] = args ? args.allowDowntime : undefined;
            resourceInputs["extraDiskSize"] = args ? args.extraDiskSize : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["sleep"] = args ? args.sleep : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["nodes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExtraDiskSize.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExtraDiskSize resources.
 */
export interface ExtraDiskSizeState {
    /**
     * When resizing disk, allow cluster downtime to do so
     */
    allowDowntime?: pulumi.Input<boolean>;
    /**
     * Extra disk size in GB
     */
    extraDiskSize?: pulumi.Input<number>;
    /**
     * Instance identifier
     */
    instanceId?: pulumi.Input<number>;
    nodes?: pulumi.Input<pulumi.Input<inputs.ExtraDiskSizeNode>[]>;
    /**
     * Configurable sleep time in seconds between retries for resizing the disk
     */
    sleep?: pulumi.Input<number>;
    /**
     * Configurable timeout time in seconds for resizing the disk
     */
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ExtraDiskSize resource.
 */
export interface ExtraDiskSizeArgs {
    /**
     * When resizing disk, allow cluster downtime to do so
     */
    allowDowntime?: pulumi.Input<boolean>;
    /**
     * Extra disk size in GB
     */
    extraDiskSize: pulumi.Input<number>;
    /**
     * Instance identifier
     */
    instanceId: pulumi.Input<number>;
    /**
     * Configurable sleep time in seconds between retries for resizing the disk
     */
    sleep?: pulumi.Input<number>;
    /**
     * Configurable timeout time in seconds for resizing the disk
     */
    timeout?: pulumi.Input<number>;
}
