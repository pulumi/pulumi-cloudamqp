// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve information about an already created CloudAMQP instance. In order to retrieve the correct information, the CoudAMQP instance identifier is needed.
 *
 * ## Argument reference
 *
 * * `instanceId` - (Required) The CloudAMQP instance identifier.
 *
 * ## Attributes reference
 *
 * All attributes reference are computed
 *
 * * `id`          - The identifier for this resource.
 * * `name`        - The name of the CloudAMQP instance.
 * * `plan`        - The subscription plan for the CloudAMQP instance.
 * * `region`      - The cloud platform and region that host the CloudAMQP instance, `{platform}::{region}`.
 * * `vpcSubnet`  - Dedicated VPC subnet configured for the CloudAMQP instance.
 * * `nodes`       - Number of nodes in the cluster of the CloudAMQP instance.
 * * `rmqVersion` - The version of installed Rabbit MQ.
 * * `url`         - (Sensitive) The AMQP url, used by clients to connect for pub/sub.
 * * `apikey`      - (Sensitive) The API key to secondary API handing alarms, integration etc.
 * * `tags`        - Tags the CloudAMQP instance with categories.
 * * `host`        - The hostname for the CloudAMQP instance.
 * * `vhost`       - The virtual host configured in Rabbit MQ.
 */
export function getInstance(args: GetInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetInstanceResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("cloudamqp:index/getInstance:getInstance", {
        "instanceId": args.instanceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getInstance.
 */
export interface GetInstanceArgs {
    instanceId: number;
}

/**
 * A collection of values returned by getInstance.
 */
export interface GetInstanceResult {
    readonly apikey: string;
    readonly dedicated: boolean;
    readonly host: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId: number;
    readonly name: string;
    readonly nodes: number;
    readonly plan: string;
    readonly region: string;
    readonly rmqVersion: string;
    readonly tags: string[];
    readonly url: string;
    readonly vhost: string;
    readonly vpcSubnet: string;
}
