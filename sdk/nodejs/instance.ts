// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * `cloudamqp_instance`can be imported using CloudAMQP internal identifier.
 *
 * ```sh
 *  $ pulumi import cloudamqp:index/instance:Instance instance <id>`
 * ```
 *
 *  To retrieve the identifier for a VPC, either use [CloudAMQP customer API](https://docs.cloudamqp.com/#list-instances). Or use the data source [`cloudamqp_account`](https://registry.terraform.io/providers/cloudamqp/cloudamqp/latest/docs/data-sources/account) to list all available instances for an account.
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudamqp:index/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * API key needed to communicate to CloudAMQP's second API. The second API is used to manage alarms, integration and more, full description [CloudAMQP API](https://docs.cloudamqp.com/cloudamqp_api.html).
     */
    public /*out*/ readonly apikey!: pulumi.Output<string>;
    /**
     * Is the instance hosted on a dedicated server
     */
    public /*out*/ readonly dedicated!: pulumi.Output<boolean>;
    /**
     * The external hostname for the CloudAMQP instance.
     */
    public /*out*/ readonly host!: pulumi.Output<string>;
    /**
     * The internal hostname for the CloudAMQP instance.
     */
    public /*out*/ readonly hostInternal!: pulumi.Output<string>;
    /**
     * Keep associated VPC when deleting instance, default set to false.
     */
    public readonly keepAssociatedVpc!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the CloudAMQP instance.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set to true to discard creating default alarms when the instance is created. Can be left out, will then use default value = false.
     */
    public readonly noDefaultAlarms!: pulumi.Output<boolean>;
    /**
     * Number of nodes, 1, 3 or 5 depending on plan used.
     */
    public readonly nodes!: pulumi.Output<number>;
    /**
     * The subscription plan. See available plans
     */
    public readonly plan!: pulumi.Output<string>;
    /**
     * Flag describing if the resource is ready
     */
    public /*out*/ readonly ready!: pulumi.Output<boolean>;
    /**
     * The region to host the instance in. See Instance regions
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The Rabbit MQ version. Can be left out, will then be set to default value used by CloudAMQP API.
     */
    public readonly rmqVersion!: pulumi.Output<string>;
    /**
     * One or more tags for the CloudAMQP instance, makes it possible to categories multiple instances in console view. Default there is no tags assigned.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The AMQP URL (uses the internal hostname if the instance was created with VPC). Has the format: `amqps://{username}:{password}@{hostname}/{vhost}`
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    /**
     * The virtual host used by Rabbit MQ.
     */
    public /*out*/ readonly vhost!: pulumi.Output<string>;
    /**
     * The VPC ID. Use this to create your instance in an existing VPC. See available example.
     */
    public readonly vpcId!: pulumi.Output<number>;
    /**
     * Creates a dedicated VPC subnet, shouldn't overlap with other VPC subnet, default subnet used 10.56.72.0/24.
     */
    public readonly vpcSubnet!: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["apikey"] = state ? state.apikey : undefined;
            resourceInputs["dedicated"] = state ? state.dedicated : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["hostInternal"] = state ? state.hostInternal : undefined;
            resourceInputs["keepAssociatedVpc"] = state ? state.keepAssociatedVpc : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["noDefaultAlarms"] = state ? state.noDefaultAlarms : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["ready"] = state ? state.ready : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rmqVersion"] = state ? state.rmqVersion : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["vhost"] = state ? state.vhost : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vpcSubnet"] = state ? state.vpcSubnet : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["keepAssociatedVpc"] = args ? args.keepAssociatedVpc : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["noDefaultAlarms"] = args ? args.noDefaultAlarms : undefined;
            resourceInputs["nodes"] = args ? args.nodes : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rmqVersion"] = args ? args.rmqVersion : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vpcSubnet"] = args ? args.vpcSubnet : undefined;
            resourceInputs["apikey"] = undefined /*out*/;
            resourceInputs["dedicated"] = undefined /*out*/;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["hostInternal"] = undefined /*out*/;
            resourceInputs["ready"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
            resourceInputs["vhost"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apikey", "url"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * API key needed to communicate to CloudAMQP's second API. The second API is used to manage alarms, integration and more, full description [CloudAMQP API](https://docs.cloudamqp.com/cloudamqp_api.html).
     */
    apikey?: pulumi.Input<string>;
    /**
     * Is the instance hosted on a dedicated server
     */
    dedicated?: pulumi.Input<boolean>;
    /**
     * The external hostname for the CloudAMQP instance.
     */
    host?: pulumi.Input<string>;
    /**
     * The internal hostname for the CloudAMQP instance.
     */
    hostInternal?: pulumi.Input<string>;
    /**
     * Keep associated VPC when deleting instance, default set to false.
     */
    keepAssociatedVpc?: pulumi.Input<boolean>;
    /**
     * Name of the CloudAMQP instance.
     */
    name?: pulumi.Input<string>;
    /**
     * Set to true to discard creating default alarms when the instance is created. Can be left out, will then use default value = false.
     */
    noDefaultAlarms?: pulumi.Input<boolean>;
    /**
     * Number of nodes, 1, 3 or 5 depending on plan used.
     */
    nodes?: pulumi.Input<number>;
    /**
     * The subscription plan. See available plans
     */
    plan?: pulumi.Input<string>;
    /**
     * Flag describing if the resource is ready
     */
    ready?: pulumi.Input<boolean>;
    /**
     * The region to host the instance in. See Instance regions
     */
    region?: pulumi.Input<string>;
    /**
     * The Rabbit MQ version. Can be left out, will then be set to default value used by CloudAMQP API.
     */
    rmqVersion?: pulumi.Input<string>;
    /**
     * One or more tags for the CloudAMQP instance, makes it possible to categories multiple instances in console view. Default there is no tags assigned.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The AMQP URL (uses the internal hostname if the instance was created with VPC). Has the format: `amqps://{username}:{password}@{hostname}/{vhost}`
     */
    url?: pulumi.Input<string>;
    /**
     * The virtual host used by Rabbit MQ.
     */
    vhost?: pulumi.Input<string>;
    /**
     * The VPC ID. Use this to create your instance in an existing VPC. See available example.
     */
    vpcId?: pulumi.Input<number>;
    /**
     * Creates a dedicated VPC subnet, shouldn't overlap with other VPC subnet, default subnet used 10.56.72.0/24.
     */
    vpcSubnet?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * Keep associated VPC when deleting instance, default set to false.
     */
    keepAssociatedVpc?: pulumi.Input<boolean>;
    /**
     * Name of the CloudAMQP instance.
     */
    name?: pulumi.Input<string>;
    /**
     * Set to true to discard creating default alarms when the instance is created. Can be left out, will then use default value = false.
     */
    noDefaultAlarms?: pulumi.Input<boolean>;
    /**
     * Number of nodes, 1, 3 or 5 depending on plan used.
     */
    nodes?: pulumi.Input<number>;
    /**
     * The subscription plan. See available plans
     */
    plan: pulumi.Input<string>;
    /**
     * The region to host the instance in. See Instance regions
     */
    region: pulumi.Input<string>;
    /**
     * The Rabbit MQ version. Can be left out, will then be set to default value used by CloudAMQP API.
     */
    rmqVersion?: pulumi.Input<string>;
    /**
     * One or more tags for the CloudAMQP instance, makes it possible to categories multiple instances in console view. Default there is no tags assigned.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The VPC ID. Use this to create your instance in an existing VPC. See available example.
     */
    vpcId?: pulumi.Input<number>;
    /**
     * Creates a dedicated VPC subnet, shouldn't overlap with other VPC subnet, default subnet used 10.56.72.0/24.
     */
    vpcSubnet?: pulumi.Input<string>;
}
