// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource allows you to create and manage a CloudAMQP instance running either [**RabbitMQ**] or
 * [**LavinMQ**] and can be deployed to multiple cloud platforms provider and regions, see
 * [instance regions] for more information.
 *
 * Once the instance is created it will be assigned a unique identifier. All other resources and data
 * sources created for this instance needs to reference this unique instance identifier.
 *
 * Pricing is available at [CloudAMQP plans].
 *
 * ## Example Usage
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Shared and dedicated instances running LavinMQ</i>
 *     </b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * // Minimum free lemming instance running LavinMQ
 * const lemurInstance = new cloudamqp.Instance("lemur_instance", {
 *     name: "cloudamqp-free-instance-01",
 *     plan: "lemming",
 *     region: "amazon-web-services::us-west-1",
 *     tags: ["lavinmq"],
 * });
 * // Minimum free lemur instance running RabbitMQ
 * const lemmingInstance = new cloudamqp.Instance("lemming_instance", {
 *     name: "cloudamqp-free-instance-02",
 *     plan: "lemur",
 *     region: "amazon-web-services::us-west-1",
 *     tags: ["rabbitmq"],
 * });
 * // Dedicated penguin instance running LavinMQ
 * const penguinInstance = new cloudamqp.Instance("penguin_instance", {
 *     name: "terraform-cloudamqp-instance-01",
 *     plan: "penguin-1",
 *     region: "amazon-web-services::us-west-1",
 *     tags: ["lavinmq"],
 * });
 * // Dedicated bunny instance running RabbitMQ
 * const bunnyInstance = new cloudamqp.Instance("bunny_instance", {
 *     name: "terraform-cloudamqp-instance-02",
 *     plan: "bunny-1",
 *     region: "amazon-web-services::us-west-1",
 *     tags: ["rabbitmq"],
 * });
 * ```
 *
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Dedicated instance using attribute vpcSubnet to create VPC, before v1.16.0</i>
 *     </b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const instance = new cloudamqp.Instance("instance", {
 *     name: "terraform-cloudamqp-instance",
 *     plan: "penguin-1",
 *     region: "amazon-web-services::us-west-1",
 *     tags: ["terraform"],
 *     vpcSubnet: "10.56.72.0/24",
 * });
 * ```
 *
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>
 *         Dedicated instance using attribute vpcSubnet to create VPC and then import managed VPC,
 *         from v1.16.0 (Managed VPC)
 *       </i>
 *     </b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * // Dedicated instance that also creates VPC
 * const instance01 = new cloudamqp.Instance("instance_01", {
 *     name: "terraform-cloudamqp-instance-01",
 *     plan: "penguin-1",
 *     region: "amazon-web-services::us-west-1",
 *     tags: ["terraform"],
 *     vpcSubnet: "10.56.72.0/24",
 * });
 * ```
 *
 * Once the instance and the VPC are created, the VPC can be imported as managed VPC and added to the
 * configuration file. Set attribute `vpcId` to the managed VPC identifier. To keep the managed VPC
 * when deleting the instance, set attribute `keepAssociatedVpc` to true. For more information see
 * guide [Managed VPC].
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * // Imported managed VPC
 * const vpc = new cloudamqp.Vpc("vpc", {
 *     name: "<vpc-name>",
 *     region: "amazon-web-services::us-east-1",
 *     subnet: "10.56.72.0/24",
 *     tags: [],
 * });
 * // Add vpc_id and keep_associated_vpc attributes
 * const instance01 = new cloudamqp.Instance("instance_01", {
 *     name: "terraform-cloudamqp-instance-01",
 *     plan: "penguin-1",
 *     region: "amazon-web-services::us-west-1",
 *     tags: ["terraform"],
 *     vpcId: vpc.id,
 *     keepAssociatedVpc: true,
 * });
 * ```
 *
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Dedicated instances and managed VPC, from v1.16.0 (Managed VPC)</i>
 *     </b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * // Managed VPC
 * const vpc = new cloudamqp.Vpc("vpc", {
 *     name: "<vpc-name>",
 *     region: "amazon-web-services::us-east-1",
 *     subnet: "10.56.72.0/24",
 *     tags: [],
 * });
 * // First instance added to managed VPC
 * const instance01 = new cloudamqp.Instance("instance_01", {
 *     name: "terraform-cloudamqp-instance-01",
 *     plan: "penguin-1",
 *     region: "amazon-web-services::us-west-1",
 *     tags: ["terraform"],
 *     vpcId: vpc.id,
 *     keepAssociatedVpc: true,
 * });
 * // Second instance added to managed VPC
 * const instance02 = new cloudamqp.Instance("instance_02", {
 *     name: "terraform-cloudamqp-instance-02",
 *     plan: "penguin-1",
 *     region: "amazon-web-services::us-west-1",
 *     tags: ["terraform"],
 *     vpcId: vpc.id,
 *     keepAssociatedVpc: true,
 * });
 * ```
 *
 * Set attribute `keepAssociatedVpc` to true, will keep managed VPC when deleting the instances.
 *
 * </details>
 *
 * ### Settings supported by LavinMQ
 *
 * ***Allowed values:*** alarms, definitions, firewall, metrics
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Copy settings from a dedicated instance to a new dedicated instance</i>
 *     </b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const penguinInstance = new cloudamqp.Instance("penguin_instance", {
 *     name: "terraform-cloudamqp-instance-01",
 *     plan: "penguin-1",
 *     region: "amazon-web-services::us-west-1",
 *     rmqVersion: "2.2.0",
 *     tags: ["terraform"],
 *     copySettings: [{
 *         subscriptionId: instanceId,
 *         settings: [
 *             "alarms",
 *             "definitions",
 *             "firewall",
 *             "metrics",
 *         ],
 *     }],
 * });
 * ```
 *
 * </details>
 *
 * ### Settings supported by RabbitMQ
 *
 * ***Allowed values:*** alarms, config, definitions, firewall, logs, metrics, plugins
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Copy settings from a dedicated instance to a new dedicated instance</i>
 *     </b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const bunnyInstance = new cloudamqp.Instance("bunny_instance", {
 *     name: "terraform-cloudamqp-instance-02",
 *     plan: "bunny-1",
 *     region: "amazon-web-services::us-west-1",
 *     rmqVersion: "3.12.2",
 *     tags: ["terraform"],
 *     copySettings: [{
 *         subscriptionId: instanceId,
 *         settings: [
 *             "alarms",
 *             "config",
 *             "definitions",
 *             "firewall",
 *             "logs",
 *             "metrics",
 *             "plugins",
 *         ],
 *     }],
 * });
 * ```
 *
 * </details>
 *
 * [CloudAMQP]: https://cloudamqp.com
 * [CloudAMQP API]: https://docs.cloudamqp.com/cloudamqp_api.html
 * [CloudAMQP API list instances]: https://docs.cloudamqp.com/#list-instances
 * [CloudAMQP plans]: https://www.cloudamqp.com/plans.html
 * [copy settings]: #copy-settings-to-a-new-dedicated-instance
 * [example]: ../guides/info_vpc_existing.md
 * [regions]: ../guides/info_region.md
 * [**LavinMQ**]: https://lavinmq.com
 * [Managed VPC]: ../guides/info_managed_vpc#dedicated-instance-and-vpc_subnet
 * [plans]: ../guides/info_plan.md
 * [**RabbitMQ**]: https://www.rabbitmq.com
 * [instance regions]: ../guides/info_region.md
 *
 * ## Import
 *
 * `cloudamqp_instance`can be imported using resource identifier. To retrieve the resource identifier,
 *
 * use [CloudAMQP API list instances]
 *
 * From Terraform v1.5.0, the `import` block can be used to import this resource:
 *
 * hcl
 *
 * import {
 *
 *   to = cloudamqp_instance.instance
 *
 *   id = <id>
 *
 * }
 *
 * Or use Terraform CLI:
 *
 * ```sh
 * $ pulumi import cloudamqp:index/instance:Instance instance <id>`
 * ```
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudamqp:index/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * API key needed to communicate to CloudAMQP's second API. The second API is used
     * to manage alarms, integration and more, full description [CloudAMQP API].
     */
    declare public /*out*/ readonly apikey: pulumi.Output<string>;
    /**
     * Information if the CloudAMQP instance runs either RabbitMQ or LavinMQ.
     */
    declare public /*out*/ readonly backend: pulumi.Output<string>;
    /**
     * Copy settings from one CloudAMQP instance to a new. Consists of
     * the block documented below.
     *
     * ___
     *
     * The `copySettings` block consists of:
     */
    declare public readonly copySettings: pulumi.Output<outputs.InstanceCopySetting[] | undefined>;
    /**
     * Information if the CloudAMQP instance is shared or dedicated.
     */
    declare public /*out*/ readonly dedicated: pulumi.Output<boolean>;
    /**
     * The external hostname for the CloudAMQP instance.
     */
    declare public /*out*/ readonly host: pulumi.Output<string>;
    /**
     * The internal hostname for the CloudAMQP instance.
     */
    declare public /*out*/ readonly hostInternal: pulumi.Output<string>;
    /**
     * Keep associated VPC when deleting instance. Default set to
     * false.
     */
    declare public readonly keepAssociatedVpc: pulumi.Output<boolean | undefined>;
    /**
     * Name of the CloudAMQP instance.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Set to true to not create default alarms
     */
    declare public readonly noDefaultAlarms: pulumi.Output<boolean>;
    /**
     * Number of nodes, 1, 3 or 5 depending on plan used. Only needed for
     * legacy plans, will otherwise be computed.
     *
     * ***Deprecated:*** Legacy subscriptions plan can still change this to scale up or down the instance.
     * New subscriptions plans use the plan to determine number of nodes. In order to
     * change number of nodes the `plan` needs to be updated.
     */
    declare public readonly nodes: pulumi.Output<number>;
    /**
     * The subscription plan. See available [plans].
     */
    declare public readonly plan: pulumi.Output<string>;
    /**
     * Flag describing if the resource is ready
     */
    declare public /*out*/ readonly ready: pulumi.Output<boolean>;
    /**
     * The region to host the instance in. See available [regions].
     *
     * ***Note:*** Changing region will force the instance to be destroyed and a new created in the new
     * region. All data will be lost and a new name assigned.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The Rabbit MQ version. Can be left out, will then be set to
     * default value used by CloudAMQP API.
     *
     * ***Note:*** There is not yet any support in the provider to change the RMQ version. Once it's set
     * in the initial creation, it will remain.
     */
    declare public readonly rmqVersion: pulumi.Output<string>;
    /**
     * One or more tags for the CloudAMQP instance, makes it possible to
     * categories multiple instances in console view. Default there is no tags assigned.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * The AMQP URL (uses the internal hostname if the instance was created with VPC).
     * Has the format: `amqps://{username}:{password}@{hostname}/{vhost}`
     */
    declare public /*out*/ readonly url: pulumi.Output<string>;
    /**
     * The virtual host used by Rabbit MQ.
     */
    declare public /*out*/ readonly vhost: pulumi.Output<string>;
    /**
     * The VPC ID. Use this to create your instance in an existing
     * VPC. See available [example].
     */
    declare public readonly vpcId: pulumi.Output<number>;
    /**
     * Creates a dedicated VPC subnet, shouldn't overlap with other
     * VPC subnet, default subnet used 10.56.72.0/24.
     *
     * ***Deprecated:*** Will be removed in next major version (v2.0)
     *
     * ***Note:*** Extra fee will be charged when using VPC, see [CloudAMQP] for more information.
     */
    declare public readonly vpcSubnet: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["apikey"] = state?.apikey;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["copySettings"] = state?.copySettings;
            resourceInputs["dedicated"] = state?.dedicated;
            resourceInputs["host"] = state?.host;
            resourceInputs["hostInternal"] = state?.hostInternal;
            resourceInputs["keepAssociatedVpc"] = state?.keepAssociatedVpc;
            resourceInputs["name"] = state?.name;
            resourceInputs["noDefaultAlarms"] = state?.noDefaultAlarms;
            resourceInputs["nodes"] = state?.nodes;
            resourceInputs["plan"] = state?.plan;
            resourceInputs["ready"] = state?.ready;
            resourceInputs["region"] = state?.region;
            resourceInputs["rmqVersion"] = state?.rmqVersion;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["url"] = state?.url;
            resourceInputs["vhost"] = state?.vhost;
            resourceInputs["vpcId"] = state?.vpcId;
            resourceInputs["vpcSubnet"] = state?.vpcSubnet;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if (args?.plan === undefined && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if (args?.region === undefined && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["copySettings"] = args?.copySettings;
            resourceInputs["keepAssociatedVpc"] = args?.keepAssociatedVpc;
            resourceInputs["name"] = args?.name;
            resourceInputs["noDefaultAlarms"] = args?.noDefaultAlarms;
            resourceInputs["nodes"] = args?.nodes;
            resourceInputs["plan"] = args?.plan;
            resourceInputs["region"] = args?.region;
            resourceInputs["rmqVersion"] = args?.rmqVersion;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["vpcSubnet"] = args?.vpcSubnet;
            resourceInputs["apikey"] = undefined /*out*/;
            resourceInputs["backend"] = undefined /*out*/;
            resourceInputs["dedicated"] = undefined /*out*/;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["hostInternal"] = undefined /*out*/;
            resourceInputs["ready"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
            resourceInputs["vhost"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apikey", "url"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * API key needed to communicate to CloudAMQP's second API. The second API is used
     * to manage alarms, integration and more, full description [CloudAMQP API].
     */
    apikey?: pulumi.Input<string>;
    /**
     * Information if the CloudAMQP instance runs either RabbitMQ or LavinMQ.
     */
    backend?: pulumi.Input<string>;
    /**
     * Copy settings from one CloudAMQP instance to a new. Consists of
     * the block documented below.
     *
     * ___
     *
     * The `copySettings` block consists of:
     */
    copySettings?: pulumi.Input<pulumi.Input<inputs.InstanceCopySetting>[]>;
    /**
     * Information if the CloudAMQP instance is shared or dedicated.
     */
    dedicated?: pulumi.Input<boolean>;
    /**
     * The external hostname for the CloudAMQP instance.
     */
    host?: pulumi.Input<string>;
    /**
     * The internal hostname for the CloudAMQP instance.
     */
    hostInternal?: pulumi.Input<string>;
    /**
     * Keep associated VPC when deleting instance. Default set to
     * false.
     */
    keepAssociatedVpc?: pulumi.Input<boolean>;
    /**
     * Name of the CloudAMQP instance.
     */
    name?: pulumi.Input<string>;
    /**
     * Set to true to not create default alarms
     */
    noDefaultAlarms?: pulumi.Input<boolean>;
    /**
     * Number of nodes, 1, 3 or 5 depending on plan used. Only needed for
     * legacy plans, will otherwise be computed.
     *
     * ***Deprecated:*** Legacy subscriptions plan can still change this to scale up or down the instance.
     * New subscriptions plans use the plan to determine number of nodes. In order to
     * change number of nodes the `plan` needs to be updated.
     */
    nodes?: pulumi.Input<number>;
    /**
     * The subscription plan. See available [plans].
     */
    plan?: pulumi.Input<string>;
    /**
     * Flag describing if the resource is ready
     */
    ready?: pulumi.Input<boolean>;
    /**
     * The region to host the instance in. See available [regions].
     *
     * ***Note:*** Changing region will force the instance to be destroyed and a new created in the new
     * region. All data will be lost and a new name assigned.
     */
    region?: pulumi.Input<string>;
    /**
     * The Rabbit MQ version. Can be left out, will then be set to
     * default value used by CloudAMQP API.
     *
     * ***Note:*** There is not yet any support in the provider to change the RMQ version. Once it's set
     * in the initial creation, it will remain.
     */
    rmqVersion?: pulumi.Input<string>;
    /**
     * One or more tags for the CloudAMQP instance, makes it possible to
     * categories multiple instances in console view. Default there is no tags assigned.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The AMQP URL (uses the internal hostname if the instance was created with VPC).
     * Has the format: `amqps://{username}:{password}@{hostname}/{vhost}`
     */
    url?: pulumi.Input<string>;
    /**
     * The virtual host used by Rabbit MQ.
     */
    vhost?: pulumi.Input<string>;
    /**
     * The VPC ID. Use this to create your instance in an existing
     * VPC. See available [example].
     */
    vpcId?: pulumi.Input<number>;
    /**
     * Creates a dedicated VPC subnet, shouldn't overlap with other
     * VPC subnet, default subnet used 10.56.72.0/24.
     *
     * ***Deprecated:*** Will be removed in next major version (v2.0)
     *
     * ***Note:*** Extra fee will be charged when using VPC, see [CloudAMQP] for more information.
     */
    vpcSubnet?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * Copy settings from one CloudAMQP instance to a new. Consists of
     * the block documented below.
     *
     * ___
     *
     * The `copySettings` block consists of:
     */
    copySettings?: pulumi.Input<pulumi.Input<inputs.InstanceCopySetting>[]>;
    /**
     * Keep associated VPC when deleting instance. Default set to
     * false.
     */
    keepAssociatedVpc?: pulumi.Input<boolean>;
    /**
     * Name of the CloudAMQP instance.
     */
    name?: pulumi.Input<string>;
    /**
     * Set to true to not create default alarms
     */
    noDefaultAlarms?: pulumi.Input<boolean>;
    /**
     * Number of nodes, 1, 3 or 5 depending on plan used. Only needed for
     * legacy plans, will otherwise be computed.
     *
     * ***Deprecated:*** Legacy subscriptions plan can still change this to scale up or down the instance.
     * New subscriptions plans use the plan to determine number of nodes. In order to
     * change number of nodes the `plan` needs to be updated.
     */
    nodes?: pulumi.Input<number>;
    /**
     * The subscription plan. See available [plans].
     */
    plan: pulumi.Input<string>;
    /**
     * The region to host the instance in. See available [regions].
     *
     * ***Note:*** Changing region will force the instance to be destroyed and a new created in the new
     * region. All data will be lost and a new name assigned.
     */
    region: pulumi.Input<string>;
    /**
     * The Rabbit MQ version. Can be left out, will then be set to
     * default value used by CloudAMQP API.
     *
     * ***Note:*** There is not yet any support in the provider to change the RMQ version. Once it's set
     * in the initial creation, it will remain.
     */
    rmqVersion?: pulumi.Input<string>;
    /**
     * One or more tags for the CloudAMQP instance, makes it possible to
     * categories multiple instances in console view. Default there is no tags assigned.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The VPC ID. Use this to create your instance in an existing
     * VPC. See available [example].
     */
    vpcId?: pulumi.Input<number>;
    /**
     * Creates a dedicated VPC subnet, shouldn't overlap with other
     * VPC subnet, default subnet used 10.56.72.0/24.
     *
     * ***Deprecated:*** Will be removed in next major version (v2.0)
     *
     * ***Note:*** Extra fee will be charged when using VPC, see [CloudAMQP] for more information.
     */
    vpcSubnet?: pulumi.Input<string>;
}
