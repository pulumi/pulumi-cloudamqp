// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IntegrationLog extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationLogState, opts?: pulumi.CustomResourceOptions): IntegrationLog {
        return new IntegrationLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudamqp:index/integrationLog:IntegrationLog';

    /**
     * Returns true if the given object is an instance of IntegrationLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationLog.__pulumiType;
    }

    /**
     * AWS access key identifier. (Cloudwatch)
     */
    public readonly accessKeyId!: pulumi.Output<string | undefined>;
    /**
     * Destination to send the logs. (Splunk)
     */
    public readonly hostPort!: pulumi.Output<string | undefined>;
    /**
     * Instance identifier used to make proxy calls
     */
    public readonly instanceId!: pulumi.Output<number>;
    /**
     * The name of log integration
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The region hosting integration service. (Cloudwatch)
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * AWS secret access key. (Cloudwatch)
     */
    public readonly secretAccessKey!: pulumi.Output<string | undefined>;
    /**
     * The token used for authentication. (Loggly, Logentries, Splunk)
     */
    public readonly token!: pulumi.Output<string | undefined>;
    /**
     * The URL to push the logs to. (Papertrail)
     */
    public readonly url!: pulumi.Output<string | undefined>;

    /**
     * Create a IntegrationLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationLogArgs | IntegrationLogState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as IntegrationLogState | undefined;
            inputs["accessKeyId"] = state ? state.accessKeyId : undefined;
            inputs["hostPort"] = state ? state.hostPort : undefined;
            inputs["instanceId"] = state ? state.instanceId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["secretAccessKey"] = state ? state.secretAccessKey : undefined;
            inputs["token"] = state ? state.token : undefined;
            inputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as IntegrationLogArgs | undefined;
            if (!args || args.instanceId === undefined) {
                throw new Error("Missing required property 'instanceId'");
            }
            inputs["accessKeyId"] = args ? args.accessKeyId : undefined;
            inputs["hostPort"] = args ? args.hostPort : undefined;
            inputs["instanceId"] = args ? args.instanceId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["secretAccessKey"] = args ? args.secretAccessKey : undefined;
            inputs["token"] = args ? args.token : undefined;
            inputs["url"] = args ? args.url : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(IntegrationLog.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IntegrationLog resources.
 */
export interface IntegrationLogState {
    /**
     * AWS access key identifier. (Cloudwatch)
     */
    readonly accessKeyId?: pulumi.Input<string>;
    /**
     * Destination to send the logs. (Splunk)
     */
    readonly hostPort?: pulumi.Input<string>;
    /**
     * Instance identifier used to make proxy calls
     */
    readonly instanceId?: pulumi.Input<number>;
    /**
     * The name of log integration
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The region hosting integration service. (Cloudwatch)
     */
    readonly region?: pulumi.Input<string>;
    /**
     * AWS secret access key. (Cloudwatch)
     */
    readonly secretAccessKey?: pulumi.Input<string>;
    /**
     * The token used for authentication. (Loggly, Logentries, Splunk)
     */
    readonly token?: pulumi.Input<string>;
    /**
     * The URL to push the logs to. (Papertrail)
     */
    readonly url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationLog resource.
 */
export interface IntegrationLogArgs {
    /**
     * AWS access key identifier. (Cloudwatch)
     */
    readonly accessKeyId?: pulumi.Input<string>;
    /**
     * Destination to send the logs. (Splunk)
     */
    readonly hostPort?: pulumi.Input<string>;
    /**
     * Instance identifier used to make proxy calls
     */
    readonly instanceId: pulumi.Input<number>;
    /**
     * The name of log integration
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The region hosting integration service. (Cloudwatch)
     */
    readonly region?: pulumi.Input<string>;
    /**
     * AWS secret access key. (Cloudwatch)
     */
    readonly secretAccessKey?: pulumi.Input<string>;
    /**
     * The token used for authentication. (Loggly, Logentries, Splunk)
     */
    readonly token?: pulumi.Input<string>;
    /**
     * The URL to push the logs to. (Papertrail)
     */
    readonly url?: pulumi.Input<string>;
}
