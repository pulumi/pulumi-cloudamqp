// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to create and manage third party log integrations for a CloudAMQP instance. Once configured, the logs produced will be forward to corresponding integration.
 *
 * Only available for dedicated subscription plans.
 *
 * ## Example Usage
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Cloudwatch log integration</i>
 *     </b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const cloudwatch = new cloudamqp.IntegrationLog("cloudwatch", {
 *     instanceId: cloudamqp_instance.instance.id,
 *     accessKeyId: _var.aws_access_key_id,
 *     secretAccessKey: _var.aws_secret_access_key,
 *     region: _var.aws_region,
 * });
 * ```
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Logentries log integration</i>
 *     </b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const logentries = new cloudamqp.IntegrationLog("logentries", {
 *     instanceId: cloudamqp_instance.instance.id,
 *     token: _var.logentries_token,
 * });
 * ```
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Loggly log integration</i>
 *     </b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const loggly = new cloudamqp.IntegrationLog("loggly", {
 *     instanceId: cloudamqp_instance.instance.id,
 *     token: _var.loggly_token,
 * });
 * ```
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Papertrail log integration</i>
 *     </b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const papertrail = new cloudamqp.IntegrationLog("papertrail", {
 *     instanceId: cloudamqp_instance.instance.id,
 *     url: _var.papertrail_url,
 * });
 * ```
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Splunk log integration</i>
 *     </b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const splunk = new cloudamqp.IntegrationLog("splunk", {
 *     instanceId: cloudamqp_instance.instance.id,
 *     token: _var.splunk_token,
 *     hostPort: _var.splunk_host_port,
 * });
 * ```
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Datadog log integration</i>
 *     </b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const datadog = new cloudamqp.IntegrationLog("datadog", {
 *     instanceId: cloudamqp_instance.instance.id,
 *     region: _var.datadog_region,
 *     apiKey: _var.datadog_api_key,
 *     tags: _var.datadog_tags,
 * });
 * ```
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Stackdriver log integration</i>
 *     </b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const stackdriver = new cloudamqp.IntegrationLog("stackdriver", {
 *     instanceId: cloudamqp_instance.instance.id,
 *     projectId: _var.stackdriver_project_id,
 *     privateKey: _var.stackdriver_private_key,
 *     clientEmail: _var.stackdriver_client_email,
 * });
 * ```
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Scalyr log integration</i>
 *     </b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const scalyr = new cloudamqp.IntegrationLog("scalyr", {
 *     instanceId: cloudamqp_instance.instance.id,
 *     token: _var.scalyr_token,
 *     host: _var.scalyr_host,
 * });
 * ```
 * </details>
 * ## Argument Reference (cloudwatchlog)
 *
 * Cloudwatch argument reference and example. Create an IAM user with programmatic access and the following permissions:
 *
 * * CreateLogGroup
 * * CreateLogStream
 * * DescribeLogGroups
 * * DescribeLogStreams
 * * PutLogEvents
 *
 * ## Integration service reference
 *
 * Valid names for third party log integration.
 *
 * | Name       | Description |
 * |------------|---------------------------------------------------------------|
 * | cloudwatchlog | Create a IAM with programmatic access. |
 * | logentries | Create a Logentries token at https://logentries.com/app#/add-log/manual  |
 * | loggly     | Create a Loggly token at https://your-company}.loggly.com/tokens |
 * | papertrail | Create a Papertrail endpoint https://papertrailapp.com/systems/setup |
 * | splunk     | Create a HTTP Event Collector token at https://.cloud.splunk.com/en-US/manager/search/http-eventcollector |
 * | datadog       | Create a Datadog API key at app.datadoghq.com |
 * | stackdriver   | Create a service account and add 'monitor metrics writer' role, then download credentials. |
 * | scalyr        | Create a Log write token at https://app.scalyr.com/keys |
 *
 * ## Integration Type reference
 *
 * Valid arguments for third party log integrations.
 *
 * Required arguments for all integrations: name
 *
 * | Name | Type | Required arguments |
 * | ---- | ---- | ---- |
 * | CloudWatch | cloudwatchlog | access_key_id, secret_access_key, region |
 * | Log Entries | logentries | token |
 * | Loggly | loggly | token |
 * | Papertrail | papertrail | url |
 * | Splunk | splunk | token, hostPort |
 * | Data Dog | datadog | region, api_keys, tags |
 * | Stackdriver | stackdriver | project_id, private_key, clientEmail |
 * | Scalyr | scalyr | token, host |
 *
 * ## Dependency
 *
 * This resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.
 *
 * ## Import
 *
 * `cloudamqp_integration_log`can be imported using the resource identifier together with CloudAMQP instance identifier. The name and identifier are CSV separated, see example below.
 *
 * ```sh
 *  $ pulumi import cloudamqp:index/integrationLog:IntegrationLog <resource_name> <id>,<instance_id>`
 * ```
 */
export class IntegrationLog extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationLogState, opts?: pulumi.CustomResourceOptions): IntegrationLog {
        return new IntegrationLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudamqp:index/integrationLog:IntegrationLog';

    /**
     * Returns true if the given object is an instance of IntegrationLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationLog.__pulumiType;
    }

    /**
     * AWS access key identifier.
     */
    public readonly accessKeyId!: pulumi.Output<string | undefined>;
    /**
     * The API key.
     */
    public readonly apiKey!: pulumi.Output<string | undefined>;
    /**
     * The client email registered for the integration service.
     */
    public readonly clientEmail!: pulumi.Output<string | undefined>;
    /**
     * The host for Scalyr integration. (app.scalyr.com, app.eu.scalyr.com)
     */
    public readonly host!: pulumi.Output<string | undefined>;
    /**
     * Destination to send the logs.
     */
    public readonly hostPort!: pulumi.Output<string | undefined>;
    /**
     * Instance identifier used to make proxy calls
     */
    public readonly instanceId!: pulumi.Output<number>;
    /**
     * The name of the third party log integration. See
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The private access key.
     */
    public readonly privateKey!: pulumi.Output<string | undefined>;
    /**
     * The project identifier.
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Region hosting the integration service.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * AWS secret access key.
     */
    public readonly secretAccessKey!: pulumi.Output<string | undefined>;
    /**
     * Tag the integration, e.g. env=prod, region=europe.
     */
    public readonly tags!: pulumi.Output<string | undefined>;
    /**
     * Token used for authentication.
     */
    public readonly token!: pulumi.Output<string | undefined>;
    /**
     * Endpoint to log integration.
     */
    public readonly url!: pulumi.Output<string | undefined>;

    /**
     * Create a IntegrationLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationLogArgs | IntegrationLogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationLogState | undefined;
            resourceInputs["accessKeyId"] = state ? state.accessKeyId : undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["clientEmail"] = state ? state.clientEmail : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["hostPort"] = state ? state.hostPort : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["secretAccessKey"] = state ? state.secretAccessKey : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as IntegrationLogArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["accessKeyId"] = args ? args.accessKeyId : undefined;
            resourceInputs["apiKey"] = args ? args.apiKey : undefined;
            resourceInputs["clientEmail"] = args ? args.clientEmail : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["hostPort"] = args ? args.hostPort : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["secretAccessKey"] = args ? args.secretAccessKey : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["token"] = args ? args.token : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationLog.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IntegrationLog resources.
 */
export interface IntegrationLogState {
    /**
     * AWS access key identifier.
     */
    accessKeyId?: pulumi.Input<string>;
    /**
     * The API key.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The client email registered for the integration service.
     */
    clientEmail?: pulumi.Input<string>;
    /**
     * The host for Scalyr integration. (app.scalyr.com, app.eu.scalyr.com)
     */
    host?: pulumi.Input<string>;
    /**
     * Destination to send the logs.
     */
    hostPort?: pulumi.Input<string>;
    /**
     * Instance identifier used to make proxy calls
     */
    instanceId?: pulumi.Input<number>;
    /**
     * The name of the third party log integration. See
     */
    name?: pulumi.Input<string>;
    /**
     * The private access key.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The project identifier.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Region hosting the integration service.
     */
    region?: pulumi.Input<string>;
    /**
     * AWS secret access key.
     */
    secretAccessKey?: pulumi.Input<string>;
    /**
     * Tag the integration, e.g. env=prod, region=europe.
     */
    tags?: pulumi.Input<string>;
    /**
     * Token used for authentication.
     */
    token?: pulumi.Input<string>;
    /**
     * Endpoint to log integration.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationLog resource.
 */
export interface IntegrationLogArgs {
    /**
     * AWS access key identifier.
     */
    accessKeyId?: pulumi.Input<string>;
    /**
     * The API key.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The client email registered for the integration service.
     */
    clientEmail?: pulumi.Input<string>;
    /**
     * The host for Scalyr integration. (app.scalyr.com, app.eu.scalyr.com)
     */
    host?: pulumi.Input<string>;
    /**
     * Destination to send the logs.
     */
    hostPort?: pulumi.Input<string>;
    /**
     * Instance identifier used to make proxy calls
     */
    instanceId: pulumi.Input<number>;
    /**
     * The name of the third party log integration. See
     */
    name?: pulumi.Input<string>;
    /**
     * The private access key.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The project identifier.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Region hosting the integration service.
     */
    region?: pulumi.Input<string>;
    /**
     * AWS secret access key.
     */
    secretAccessKey?: pulumi.Input<string>;
    /**
     * Tag the integration, e.g. env=prod, region=europe.
     */
    tags?: pulumi.Input<string>;
    /**
     * Token used for authentication.
     */
    token?: pulumi.Input<string>;
    /**
     * Endpoint to log integration.
     */
    url?: pulumi.Input<string>;
}
