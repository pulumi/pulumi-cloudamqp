// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * `cloudamqp_alarm` can be imported using the resource identifier together with the CloudAMQP instance
 *
 * identifier (CSV separated). To retrieve the resource identifier, use [CloudAMQP API list alarms].
 *
 * From Terraform v1.5.0, the `import` block can be used to import this resource:
 *
 * hcl
 *
 * import {
 *
 *   to = cloudamqp_alarm.alarm
 *
 *   id = format("<id>,%s", cloudamqp_instance.instance.id)
 *
 * }
 *
 * Or use Terraform CLI:
 *
 * ```sh
 * $ pulumi import cloudamqp:index/alarm:Alarm alarm <id>,<instance_id>`
 * ```
 */
export class Alarm extends pulumi.CustomResource {
    /**
     * Get an existing Alarm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlarmState, opts?: pulumi.CustomResourceOptions): Alarm {
        return new Alarm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudamqp:index/alarm:Alarm';

    /**
     * Returns true if the given object is an instance of Alarm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Alarm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Alarm.__pulumiType;
    }

    /**
     * Enable or disable the alarm to trigger.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * The CloudAMQP instance ID.
     */
    declare public readonly instanceId: pulumi.Output<number>;
    /**
     * Message type `(total, unacked, ready)` used by queue alarm type.
     *
     * Specific argument for `disk` alarm
     */
    declare public readonly messageType: pulumi.Output<string | undefined>;
    /**
     * Regex for which queue to check.
     */
    declare public readonly queueRegex: pulumi.Output<string | undefined>;
    /**
     * Identifier for recipient to be notified. Leave empty to notify
     * all recipients.
     */
    declare public readonly recipients: pulumi.Output<number[]>;
    /**
     * The reminder interval (in seconds) to resend the alarm if not
     * resolved. Set to 0 for no reminders. The Default is 0.
     */
    declare public readonly reminderInterval: pulumi.Output<number | undefined>;
    /**
     * The time interval (in seconds) the `valueThreshold` should be
     * active before triggering an alarm.
     */
    declare public readonly timeThreshold: pulumi.Output<number | undefined>;
    /**
     * The alarm type, see valid options below.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Disk value threshold calculation, `fixed, percentage` of disk
     * space remaining.
     *
     * Based on alarm type, different arguments are flagged as required or optional.
     */
    declare public readonly valueCalculation: pulumi.Output<string | undefined>;
    /**
     * The value to trigger the alarm for.
     */
    declare public readonly valueThreshold: pulumi.Output<number | undefined>;
    /**
     * Regex for which vhost to check
     */
    declare public readonly vhostRegex: pulumi.Output<string | undefined>;

    /**
     * Create a Alarm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlarmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlarmArgs | AlarmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlarmState | undefined;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["messageType"] = state?.messageType;
            resourceInputs["queueRegex"] = state?.queueRegex;
            resourceInputs["recipients"] = state?.recipients;
            resourceInputs["reminderInterval"] = state?.reminderInterval;
            resourceInputs["timeThreshold"] = state?.timeThreshold;
            resourceInputs["type"] = state?.type;
            resourceInputs["valueCalculation"] = state?.valueCalculation;
            resourceInputs["valueThreshold"] = state?.valueThreshold;
            resourceInputs["vhostRegex"] = state?.vhostRegex;
        } else {
            const args = argsOrState as AlarmArgs | undefined;
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.recipients === undefined && !opts.urn) {
                throw new Error("Missing required property 'recipients'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["messageType"] = args?.messageType;
            resourceInputs["queueRegex"] = args?.queueRegex;
            resourceInputs["recipients"] = args?.recipients;
            resourceInputs["reminderInterval"] = args?.reminderInterval;
            resourceInputs["timeThreshold"] = args?.timeThreshold;
            resourceInputs["type"] = args?.type;
            resourceInputs["valueCalculation"] = args?.valueCalculation;
            resourceInputs["valueThreshold"] = args?.valueThreshold;
            resourceInputs["vhostRegex"] = args?.vhostRegex;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Alarm.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Alarm resources.
 */
export interface AlarmState {
    /**
     * Enable or disable the alarm to trigger.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The CloudAMQP instance ID.
     */
    instanceId?: pulumi.Input<number>;
    /**
     * Message type `(total, unacked, ready)` used by queue alarm type.
     *
     * Specific argument for `disk` alarm
     */
    messageType?: pulumi.Input<string>;
    /**
     * Regex for which queue to check.
     */
    queueRegex?: pulumi.Input<string>;
    /**
     * Identifier for recipient to be notified. Leave empty to notify
     * all recipients.
     */
    recipients?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The reminder interval (in seconds) to resend the alarm if not
     * resolved. Set to 0 for no reminders. The Default is 0.
     */
    reminderInterval?: pulumi.Input<number>;
    /**
     * The time interval (in seconds) the `valueThreshold` should be
     * active before triggering an alarm.
     */
    timeThreshold?: pulumi.Input<number>;
    /**
     * The alarm type, see valid options below.
     */
    type?: pulumi.Input<string>;
    /**
     * Disk value threshold calculation, `fixed, percentage` of disk
     * space remaining.
     *
     * Based on alarm type, different arguments are flagged as required or optional.
     */
    valueCalculation?: pulumi.Input<string>;
    /**
     * The value to trigger the alarm for.
     */
    valueThreshold?: pulumi.Input<number>;
    /**
     * Regex for which vhost to check
     */
    vhostRegex?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Alarm resource.
 */
export interface AlarmArgs {
    /**
     * Enable or disable the alarm to trigger.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The CloudAMQP instance ID.
     */
    instanceId: pulumi.Input<number>;
    /**
     * Message type `(total, unacked, ready)` used by queue alarm type.
     *
     * Specific argument for `disk` alarm
     */
    messageType?: pulumi.Input<string>;
    /**
     * Regex for which queue to check.
     */
    queueRegex?: pulumi.Input<string>;
    /**
     * Identifier for recipient to be notified. Leave empty to notify
     * all recipients.
     */
    recipients: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The reminder interval (in seconds) to resend the alarm if not
     * resolved. Set to 0 for no reminders. The Default is 0.
     */
    reminderInterval?: pulumi.Input<number>;
    /**
     * The time interval (in seconds) the `valueThreshold` should be
     * active before triggering an alarm.
     */
    timeThreshold?: pulumi.Input<number>;
    /**
     * The alarm type, see valid options below.
     */
    type: pulumi.Input<string>;
    /**
     * Disk value threshold calculation, `fixed, percentage` of disk
     * space remaining.
     *
     * Based on alarm type, different arguments are flagged as required or optional.
     */
    valueCalculation?: pulumi.Input<string>;
    /**
     * The value to trigger the alarm for.
     */
    valueThreshold?: pulumi.Input<number>;
    /**
     * Regex for which vhost to check
     */
    vhostRegex?: pulumi.Input<string>;
}
