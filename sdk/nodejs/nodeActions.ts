// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to invoke actions on a specific node.
 *
 * Only available for dedicated subscription plans.
 *
 * ## Example Usage
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Already know the node identifier (e.g. from state file)</i>
 *     </b>
 *   </summary>
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * // New recipient to receieve notifications
 * const nodeAction = new cloudamqp.NodeActions("node_action", {
 *     instanceId: instance.id,
 *     nodeName: "<node name>",
 *     action: "restart",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 * </details>
 *
 * Using data source `cloudamqp.getNodes` to restart RabbitMQ on all nodes.</br>
 * ***Note: RabbitMQ restart on multiple nodes need to be chained, so one node restart at the time.***
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Multi node RabbitMQ restart</i>
 *     </b>
 *   </summary>
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const listNodes = cloudamqp.getNodes({
 *     instanceId: instance.id,
 * });
 * const restart01 = new cloudamqp.NodeActions("restart_01", {
 *     instanceId: instance.id,
 *     action: "restart",
 *     nodeName: listNodes.then(listNodes => listNodes.nodes?.[0]?.name),
 * });
 * const restart02 = new cloudamqp.NodeActions("restart_02", {
 *     instanceId: instance.id,
 *     action: "restart",
 *     nodeName: listNodes.then(listNodes => listNodes.nodes?.[1]?.name),
 * }, {
 *     dependsOn: [restart01],
 * });
 * const restart03 = new cloudamqp.NodeActions("restart_03", {
 *     instanceId: instance.id,
 *     action: "restart",
 *     nodeName: listNodes.then(listNodes => listNodes.nodes?.[2]?.name),
 * }, {
 *     dependsOn: [
 *         restart01,
 *         restart02,
 *     ],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Combine log level configuration change with multi node RabbitMQ restart</i>
 *     </b>
 *   </summary>
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const listNodes = cloudamqp.getNodes({
 *     instanceId: instance.id,
 * });
 * const rabbitmqConfig = new cloudamqp.RabbitConfiguration("rabbitmq_config", {
 *     instanceId: instance.id,
 *     logExchangeLevel: "info",
 * });
 * const restart01 = new cloudamqp.NodeActions("restart_01", {
 *     instanceId: instance.id,
 *     action: "restart",
 *     nodeName: listNodes.then(listNodes => listNodes.nodes?.[0]?.name),
 * }, {
 *     dependsOn: [rabbitmqConfig],
 * });
 * const restart02 = new cloudamqp.NodeActions("restart_02", {
 *     instanceId: instance.id,
 *     action: "restart",
 *     nodeName: listNodes.then(listNodes => listNodes.nodes?.[1]?.name),
 * }, {
 *     dependsOn: [
 *         rabbitmqConfig,
 *         restart01,
 *     ],
 * });
 * const restart03 = new cloudamqp.NodeActions("restart_03", {
 *     instanceId: instance.id,
 *     action: "restart",
 *     nodeName: listNodes.then(listNodes => listNodes.nodes?.[2]?.name),
 * }, {
 *     dependsOn: [
 *         rabbitmqConfig,
 *         restart01,
 *         restart02,
 *     ],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 * </details>
 *
 * ## Action reference
 *
 * Valid options for action.
 *
 * | Action       | Info                               |
 * |--------------|------------------------------------|
 * | start        | Start RabbitMQ                     |
 * | stop         | Stop RabbitMQ                      |
 * | restart      | Restart RabbitMQ                   |
 * | reboot       | Reboot the node                    |
 * | mgmt.restart | Restart the RabbitMQ mgmt interace |
 *
 * ## Dependency
 *
 * This resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id` and node name.
 *
 * ## Import
 *
 * This resource cannot be imported.
 */
export class NodeActions extends pulumi.CustomResource {
    /**
     * Get an existing NodeActions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodeActionsState, opts?: pulumi.CustomResourceOptions): NodeActions {
        return new NodeActions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudamqp:index/nodeActions:NodeActions';

    /**
     * Returns true if the given object is an instance of NodeActions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodeActions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodeActions.__pulumiType;
    }

    /**
     * The action to invoke on the node.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * The CloudAMQP instance ID.
     */
    public readonly instanceId!: pulumi.Output<number>;
    /**
     * The node name, e.g `green-guinea-pig-01`.
     */
    public readonly nodeName!: pulumi.Output<string>;
    /**
     * If the node is running.
     */
    public /*out*/ readonly running!: pulumi.Output<boolean>;

    /**
     * Create a NodeActions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeActionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodeActionsArgs | NodeActionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodeActionsState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["nodeName"] = state ? state.nodeName : undefined;
            resourceInputs["running"] = state ? state.running : undefined;
        } else {
            const args = argsOrState as NodeActionsArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.nodeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeName'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["nodeName"] = args ? args.nodeName : undefined;
            resourceInputs["running"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NodeActions.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NodeActions resources.
 */
export interface NodeActionsState {
    /**
     * The action to invoke on the node.
     */
    action?: pulumi.Input<string>;
    /**
     * The CloudAMQP instance ID.
     */
    instanceId?: pulumi.Input<number>;
    /**
     * The node name, e.g `green-guinea-pig-01`.
     */
    nodeName?: pulumi.Input<string>;
    /**
     * If the node is running.
     */
    running?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a NodeActions resource.
 */
export interface NodeActionsArgs {
    /**
     * The action to invoke on the node.
     */
    action: pulumi.Input<string>;
    /**
     * The CloudAMQP instance ID.
     */
    instanceId: pulumi.Input<number>;
    /**
     * The node name, e.g `green-guinea-pig-01`.
     */
    nodeName: pulumi.Input<string>;
}
