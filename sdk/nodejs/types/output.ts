// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ExtraDiskSizeNode {
    /**
     * Additional added disk size
     */
    additionalDiskSize: number;
    /**
     * Subscription plan disk size
     */
    diskSize: number;
    /**
     * Name of the node.
     */
    name: string;
}

export interface GetAccountInstance {
    /**
     * The instance identifier.
     */
    id: number;
    /**
     * The name of the instance.
     */
    name: string;
    /**
     * The subscription plan used for the instance.
     */
    plan: string;
    /**
     * The region were the instanece is located in.
     */
    region: string;
    /**
     * Optional tags set for the instance.
     */
    tags?: string[];
}

export interface GetAccountVpcsVpc {
    /**
     * The VPC identifier.
     */
    id: number;
    /**
     * The VPC instance name.
     */
    name: string;
    /**
     * The region the VPC is hosted in.
     */
    region: string;
    /**
     * The VPC subnet.
     */
    subnet: string;
    /**
     * Optional tags set for the VPC.
     */
    tags?: string[];
    /**
     * VPC name given when hosted at the cloud provider.
     */
    vpcName: string;
}

export interface GetAlarmsAlarm {
    /**
     * The alarm identifier.
     */
    alarmId?: number;
    /**
     * Enable/disable status of the alarm.
     */
    enabled: boolean;
    /**
     * Message type `(total, unacked, ready)` used by queue alarm type.
     */
    messageType: string;
    /**
     * Regular expression for which queue to check.
     */
    queueRegex: string;
    /**
     * Identifier for recipient to be notified.
     */
    recipients: number[];
    /**
     * The reminder interval (in seconds) to resend the alarm if not resolved.
     * Set to 0 for no reminders.
     */
    reminderInterval: number;
    /**
     * The time interval (in seconds) the `valueThreshold` should be active
     * before trigger an alarm.
     */
    timeThreshold: number;
    /**
     * The alarm type to filter for. Supported
     * alarm types.
     */
    type?: string;
    /**
     * Disk value threshold calculation, `(fixed, percentage)` of disk space
     * remaining.
     */
    valueCalculation?: string;
    /**
     * The value threshold that triggers the alarm.
     */
    valueThreshold: number;
    /**
     * Regular expression for which vhost to check
     */
    vhostRegex: string;
}

export interface GetNodesNode {
    /**
     * Additional added disk size
     */
    additionalDiskSize: number;
    /**
     * Availability zone the node is hosted in.
     */
    availabilityZone: string;
    /**
     * Is the node configured?
     */
    configured: boolean;
    /**
     * Subscription plan disk size
     */
    diskSize: number;
    /**
     * Currently used Erlang version on the node.
     */
    erlangVersion: string;
    /**
     * Enable or disable High-performance Erlang.
     */
    hipe: boolean;
    /**
     * External hostname assigned to the node.
     */
    hostname: string;
    /**
     * Internal hostname assigned to the node.
     */
    hostnameInternal: string;
    /**
     * Name of the node.
     */
    name: string;
    /**
     * Currently configured Rabbit MQ version on the node.
     */
    rabbitmqVersion: string;
    /**
     * Is the node running?
     */
    running: boolean;
}

export interface GetNotificationsRecipient {
    /**
     * The name of the recipient.
     */
    name: string;
    /**
     * Options argument (e.g. `rk` used for VictorOps routing key).
     */
    options: {[key: string]: string};
    /**
     * The identifier for the recipient.
     */
    recipientId: number;
    /**
     * The type of the recipient.
     */
    type: string;
    /**
     * The notification endpoint, where to send the notification.
     */
    value: string;
}

export interface GetPluginsCommunityPlugin {
    /**
     * Description of what the plugin does.
     */
    description: string;
    /**
     * The type of the recipient.
     */
    name: string;
    /**
     * Min. required Rabbit MQ version to be used.
     */
    require: string;
}

export interface GetPluginsPlugin {
    /**
     * Description of what the plugin does.
     */
    description: string;
    /**
     * Enable or disable information for the plugin.
     */
    enabled: boolean;
    /**
     * The type of the recipient.
     */
    name: string;
    /**
     * Rabbit MQ version that the plugins are shipped with.
     */
    version: string;
}

export interface InstanceCopySetting {
    /**
     * Array of one or more settings to be copied. Allowed values:
     * [alarms, config, definitions, firewall, logs, metrics, plugins]
     *
     * See more below, [copy settings].
     */
    settings: string[];
    /**
     * Instance identifier of the CloudAMQP instance to copy the settings
     * from.
     */
    subscriptionId: string;
}

export interface NotificationResponder {
    /**
     * Identifier in UUID format
     */
    id?: string;
    /**
     * Name of the responder
     */
    name?: string;
    /**
     * Type of responder. [`team`, `user`, `escalation`, `schedule`]
     */
    type: string;
    /**
     * Username of the responder
     *
     * Responders of type `team`, `escalation` and `schedule` can use either id or name.
     * While `user` can use either id or username.
     */
    username?: string;
}

export interface SecurityFirewallRule {
    /**
     * Description name of the rule. e.g. Default.
     *
     * Pre-defined services for RabbitMQ:
     *
     * | Service name | Port  |
     * |--------------|-------|
     * | AMQP         | 5672  |
     * | AMQPS        | 5671  |
     * | HTTPS        | 443   |
     * | MQTT         | 1883  |
     * | MQTTS        | 8883  |
     * | STOMP        | 61613 |
     * | STOMPS       | 61614 |
     * | STREAM       | 5552  |
     * | STREAM_SSL   | 5551  |
     *
     * Pre-defined services for LavinMQ:
     *
     * | Service name | Port  |
     * |--------------|-------|
     * | AMQP         | 5672  |
     * | AMQPS        | 5671  |
     * | HTTPS        | 443   |
     * | MQTT         | 1883  |
     * | MQTTS        | 8883  |
     */
    description?: string;
    /**
     * CIDR address: IP address with CIDR notation (e.g. 10.56.72.0/24)
     */
    ip: string;
    /**
     * Custom ports to be opened
     */
    ports?: number[];
    /**
     * Pre-defined service ports, see table below
     */
    services?: string[];
}

