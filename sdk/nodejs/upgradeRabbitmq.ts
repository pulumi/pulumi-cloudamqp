// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to upgrade RabbitMQ version. Depending on initial versions of RabbitMQ and Erlang of the CloudAMQP instance, multiple runs may be needed to get to the latest or wanted version. Reason for this is certain supported RabbitMQ version will also automatically upgrade Erlang version.
 *
 * There is three different ways to trigger the version upgrade
 *
 * > - Specify RabbitMQ version to upgrade to
 * > - Upgrade to latest RabbitMQ version
 * > - Old behaviour to upgrade to latest RabbitMQ version
 *
 * See, below example usage for the difference.
 *
 * Only available for dedicated subscription plans running ***RabbitMQ***.
 *
 * ## Example Usage
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Specify version upgrade, from v1.40.0</i>
 *     </b>
 *   </summary>
 *
 * Specify the version to upgrade to. List available upgradable versions, use [CloudAMQP API](https://docs.cloudamqp.com/cloudamqp_api.html#get-available-versions).
 * After the upgrade finished, there can still be newer versions available.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const instance = new cloudamqp.Instance("instance", {
 *     name: "rabbitmq-version-upgrade-test",
 *     plan: "bunny-1",
 *     region: "amazon-web-services::us-west-1",
 * });
 * const upgrade = new cloudamqp.UpgradeRabbitmq("upgrade", {
 *     instanceId: instance.id,
 *     newVersion: "3.13.2",
 * });
 * ```
 *
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Upgrade to latest possible version, from v1.40.0</i>
 *     </b>
 *   </summary>
 *
 * This will upgrade RabbitMQ to the latest possible version detected by the data source `cloudamqp.getUpgradableVersions`.
 * Multiple runs can be needed to upgrade the version even further.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const instance = new cloudamqp.Instance("instance", {
 *     name: "rabbitmq-version-upgrade-test",
 *     plan: "bunny-1",
 *     region: "amazon-web-services::us-west-1",
 * });
 * const upgradableVersions = instance.id.apply(id => cloudamqp.getUpgradableVersionsOutput({
 *     instanceId: id,
 * }));
 * const upgrade = new cloudamqp.UpgradeRabbitmq("upgrade", {
 *     instanceId: instance.id,
 *     currentVersion: instance.rmqVersion,
 *     newVersion: upgradableVersions.apply(upgradableVersions => upgradableVersions.newRabbitmqVersion),
 * });
 * ```
 *
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>
 *       <i>Upgrade to latest possible version, before v1.40.0</i>
 *     </b>
 *   </summary>
 *
 * Old behaviour of the upgrading the RabbitMQ version. No longer recommended.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * // Retrieve latest possible upgradable versions for RabbitMQ and Erlang
 * const versions = cloudamqp.getUpgradableVersions({
 *     instanceId: instance.id,
 * });
 * // Invoke automatically upgrade to latest possible upgradable versions for RabbitMQ and Erlang
 * const upgrade = new cloudamqp.UpgradeRabbitmq("upgrade", {instanceId: instance.id});
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * // Retrieve latest possible upgradable versions for RabbitMQ and Erlang
 * const versions = cloudamqp.getUpgradableVersions({
 *     instanceId: instance.id,
 * });
 * ```
 *
 * If newer version is still available to be upgradable in the data source, re-run again.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * // Retrieve latest possible upgradable versions for RabbitMQ and Erlang
 * const versions = cloudamqp.getUpgradableVersions({
 *     instanceId: instance.id,
 * });
 * // Invoke automatically upgrade to latest possible upgradable versions for RabbitMQ and Erlang
 * const upgrade = new cloudamqp.UpgradeRabbitmq("upgrade", {instanceId: instance.id});
 * ```
 *
 * </details>
 *
 * ## Important Upgrade Information
 *
 * > - All single node upgrades will require some downtime since RabbitMQ needs a restart.
 * > - From RabbitMQ version 3.9, rolling upgrades between minor versions (e.g. 3.9 to 3.10), in a multi-node cluster are possible without downtime. This means that one node is upgraded at a time while the other nodes are still running. For versions older than 3.9, patch version upgrades (e.g. 3.8.x to 3.8.y) are possible without downtime in a multi-node cluster, but minor version upgrades will require downtime.
 * > - Auto delete queues (queues that are marked AD) will be deleted during the update.
 * > - Any custom plugins support has installed on your behalf will be disabled and you need to contact <support@cloudamqp.com> and ask to have them re-installed.
 * > - TLS 1.0 and 1.1 will not be supported after the update.
 *
 * ## Multiple runs
 *
 * Depending on initial versions of RabbitMQ and Erlang of the CloudAMQP instance, multiple runs may be needed to get to the latest or wanted version.
 *
 * Example steps needed when starting at RabbitMQ version 3.12.2
 * <table>
 * <thead>
 * <tr>
 * <th>Version</th>
 * <th>Supported upgrading versions</th>
 * <th>Min version to upgrade Erlang</th>
 * </tr>
 * </thead>
 * <tbody>
 * <tr>
 * <td>3.12.2</td>
 * <td>3.12.4, 3.12.6, 3.12.10, 3.12.12, 3.12.13</td>
 * <td>3.12.13</td>
 * </tr>
 * <tr>
 * <td>3.12.13</td>
 * <td>3.13.2</td>
 * <td>3.13.2</td>
 * </tr>
 * <tr>
 * <td>3.13.2</td>
 * <td>-</td>
 * <td>-</td>
 * </tr>
 * </tbody>
 * </table>
 *
 * ## Import
 *
 * Not possible to import this resource.
 */
export class UpgradeRabbitmq extends pulumi.CustomResource {
    /**
     * Get an existing UpgradeRabbitmq resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UpgradeRabbitmqState, opts?: pulumi.CustomResourceOptions): UpgradeRabbitmq {
        return new UpgradeRabbitmq(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudamqp:index/upgradeRabbitmq:UpgradeRabbitmq';

    /**
     * Returns true if the given object is an instance of UpgradeRabbitmq.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UpgradeRabbitmq {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UpgradeRabbitmq.__pulumiType;
    }

    /**
     * Helper argument to change upgrade behaviour to latest possible version
     */
    public readonly currentVersion!: pulumi.Output<string | undefined>;
    /**
     * The CloudAMQP instance identifier
     */
    public readonly instanceId!: pulumi.Output<number>;
    /**
     * The new version to upgrade to
     */
    public readonly newVersion!: pulumi.Output<string | undefined>;

    /**
     * Create a UpgradeRabbitmq resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UpgradeRabbitmqArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UpgradeRabbitmqArgs | UpgradeRabbitmqState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UpgradeRabbitmqState | undefined;
            resourceInputs["currentVersion"] = state ? state.currentVersion : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["newVersion"] = state ? state.newVersion : undefined;
        } else {
            const args = argsOrState as UpgradeRabbitmqArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["currentVersion"] = args ? args.currentVersion : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["newVersion"] = args ? args.newVersion : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UpgradeRabbitmq.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UpgradeRabbitmq resources.
 */
export interface UpgradeRabbitmqState {
    /**
     * Helper argument to change upgrade behaviour to latest possible version
     */
    currentVersion?: pulumi.Input<string>;
    /**
     * The CloudAMQP instance identifier
     */
    instanceId?: pulumi.Input<number>;
    /**
     * The new version to upgrade to
     */
    newVersion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UpgradeRabbitmq resource.
 */
export interface UpgradeRabbitmqArgs {
    /**
     * Helper argument to change upgrade behaviour to latest possible version
     */
    currentVersion?: pulumi.Input<string>;
    /**
     * The CloudAMQP instance identifier
     */
    instanceId: pulumi.Input<number>;
    /**
     * The new version to upgrade to
     */
    newVersion?: pulumi.Input<string>;
}
