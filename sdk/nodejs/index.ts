// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccountActionArgs, AccountActionState } from "./accountAction";
export type AccountAction = import("./accountAction").AccountAction;
export const AccountAction: typeof import("./accountAction").AccountAction = null as any;
utilities.lazyLoad(exports, ["AccountAction"], () => require("./accountAction"));

export { AlarmArgs, AlarmState } from "./alarm";
export type Alarm = import("./alarm").Alarm;
export const Alarm: typeof import("./alarm").Alarm = null as any;
utilities.lazyLoad(exports, ["Alarm"], () => require("./alarm"));

export { CustomDomainArgs, CustomDomainState } from "./customDomain";
export type CustomDomain = import("./customDomain").CustomDomain;
export const CustomDomain: typeof import("./customDomain").CustomDomain = null as any;
utilities.lazyLoad(exports, ["CustomDomain"], () => require("./customDomain"));

export { ExtraDiskSizeArgs, ExtraDiskSizeState } from "./extraDiskSize";
export type ExtraDiskSize = import("./extraDiskSize").ExtraDiskSize;
export const ExtraDiskSize: typeof import("./extraDiskSize").ExtraDiskSize = null as any;
utilities.lazyLoad(exports, ["ExtraDiskSize"], () => require("./extraDiskSize"));

export { GetAccountResult } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetAccountVpcsResult } from "./getAccountVpcs";
export const getAccountVpcs: typeof import("./getAccountVpcs").getAccountVpcs = null as any;
export const getAccountVpcsOutput: typeof import("./getAccountVpcs").getAccountVpcsOutput = null as any;
utilities.lazyLoad(exports, ["getAccountVpcs","getAccountVpcsOutput"], () => require("./getAccountVpcs"));

export { GetAlarmArgs, GetAlarmResult, GetAlarmOutputArgs } from "./getAlarm";
export const getAlarm: typeof import("./getAlarm").getAlarm = null as any;
export const getAlarmOutput: typeof import("./getAlarm").getAlarmOutput = null as any;
utilities.lazyLoad(exports, ["getAlarm","getAlarmOutput"], () => require("./getAlarm"));

export { GetAlarmsArgs, GetAlarmsResult, GetAlarmsOutputArgs } from "./getAlarms";
export const getAlarms: typeof import("./getAlarms").getAlarms = null as any;
export const getAlarmsOutput: typeof import("./getAlarms").getAlarmsOutput = null as any;
utilities.lazyLoad(exports, ["getAlarms","getAlarmsOutput"], () => require("./getAlarms"));

export { GetCredentialsArgs, GetCredentialsResult, GetCredentialsOutputArgs } from "./getCredentials";
export const getCredentials: typeof import("./getCredentials").getCredentials = null as any;
export const getCredentialsOutput: typeof import("./getCredentials").getCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getCredentials","getCredentialsOutput"], () => require("./getCredentials"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetNodesArgs, GetNodesResult, GetNodesOutputArgs } from "./getNodes";
export const getNodes: typeof import("./getNodes").getNodes = null as any;
export const getNodesOutput: typeof import("./getNodes").getNodesOutput = null as any;
utilities.lazyLoad(exports, ["getNodes","getNodesOutput"], () => require("./getNodes"));

export { GetNotificationArgs, GetNotificationResult, GetNotificationOutputArgs } from "./getNotification";
export const getNotification: typeof import("./getNotification").getNotification = null as any;
export const getNotificationOutput: typeof import("./getNotification").getNotificationOutput = null as any;
utilities.lazyLoad(exports, ["getNotification","getNotificationOutput"], () => require("./getNotification"));

export { GetNotificationsArgs, GetNotificationsResult, GetNotificationsOutputArgs } from "./getNotifications";
export const getNotifications: typeof import("./getNotifications").getNotifications = null as any;
export const getNotificationsOutput: typeof import("./getNotifications").getNotificationsOutput = null as any;
utilities.lazyLoad(exports, ["getNotifications","getNotificationsOutput"], () => require("./getNotifications"));

export { GetPluginsArgs, GetPluginsResult, GetPluginsOutputArgs } from "./getPlugins";
export const getPlugins: typeof import("./getPlugins").getPlugins = null as any;
export const getPluginsOutput: typeof import("./getPlugins").getPluginsOutput = null as any;
utilities.lazyLoad(exports, ["getPlugins","getPluginsOutput"], () => require("./getPlugins"));

export { GetPluginsCommunityArgs, GetPluginsCommunityResult, GetPluginsCommunityOutputArgs } from "./getPluginsCommunity";
export const getPluginsCommunity: typeof import("./getPluginsCommunity").getPluginsCommunity = null as any;
export const getPluginsCommunityOutput: typeof import("./getPluginsCommunity").getPluginsCommunityOutput = null as any;
utilities.lazyLoad(exports, ["getPluginsCommunity","getPluginsCommunityOutput"], () => require("./getPluginsCommunity"));

export { GetUpgradableVersionsArgs, GetUpgradableVersionsResult, GetUpgradableVersionsOutputArgs } from "./getUpgradableVersions";
export const getUpgradableVersions: typeof import("./getUpgradableVersions").getUpgradableVersions = null as any;
export const getUpgradableVersionsOutput: typeof import("./getUpgradableVersions").getUpgradableVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getUpgradableVersions","getUpgradableVersionsOutput"], () => require("./getUpgradableVersions"));

export { GetVpcGcpInfoArgs, GetVpcGcpInfoResult, GetVpcGcpInfoOutputArgs } from "./getVpcGcpInfo";
export const getVpcGcpInfo: typeof import("./getVpcGcpInfo").getVpcGcpInfo = null as any;
export const getVpcGcpInfoOutput: typeof import("./getVpcGcpInfo").getVpcGcpInfoOutput = null as any;
utilities.lazyLoad(exports, ["getVpcGcpInfo","getVpcGcpInfoOutput"], () => require("./getVpcGcpInfo"));

export { GetVpcInfoArgs, GetVpcInfoResult, GetVpcInfoOutputArgs } from "./getVpcInfo";
export const getVpcInfo: typeof import("./getVpcInfo").getVpcInfo = null as any;
export const getVpcInfoOutput: typeof import("./getVpcInfo").getVpcInfoOutput = null as any;
utilities.lazyLoad(exports, ["getVpcInfo","getVpcInfoOutput"], () => require("./getVpcInfo"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { IntegrationAwsEventbridgeArgs, IntegrationAwsEventbridgeState } from "./integrationAwsEventbridge";
export type IntegrationAwsEventbridge = import("./integrationAwsEventbridge").IntegrationAwsEventbridge;
export const IntegrationAwsEventbridge: typeof import("./integrationAwsEventbridge").IntegrationAwsEventbridge = null as any;
utilities.lazyLoad(exports, ["IntegrationAwsEventbridge"], () => require("./integrationAwsEventbridge"));

export { IntegrationLogArgs, IntegrationLogState } from "./integrationLog";
export type IntegrationLog = import("./integrationLog").IntegrationLog;
export const IntegrationLog: typeof import("./integrationLog").IntegrationLog = null as any;
utilities.lazyLoad(exports, ["IntegrationLog"], () => require("./integrationLog"));

export { IntegrationMetricArgs, IntegrationMetricState } from "./integrationMetric";
export type IntegrationMetric = import("./integrationMetric").IntegrationMetric;
export const IntegrationMetric: typeof import("./integrationMetric").IntegrationMetric = null as any;
utilities.lazyLoad(exports, ["IntegrationMetric"], () => require("./integrationMetric"));

export { MaintenanceWindowArgs, MaintenanceWindowState } from "./maintenanceWindow";
export type MaintenanceWindow = import("./maintenanceWindow").MaintenanceWindow;
export const MaintenanceWindow: typeof import("./maintenanceWindow").MaintenanceWindow = null as any;
utilities.lazyLoad(exports, ["MaintenanceWindow"], () => require("./maintenanceWindow"));

export { NodeActionsArgs, NodeActionsState } from "./nodeActions";
export type NodeActions = import("./nodeActions").NodeActions;
export const NodeActions: typeof import("./nodeActions").NodeActions = null as any;
utilities.lazyLoad(exports, ["NodeActions"], () => require("./nodeActions"));

export { NotificationArgs, NotificationState } from "./notification";
export type Notification = import("./notification").Notification;
export const Notification: typeof import("./notification").Notification = null as any;
utilities.lazyLoad(exports, ["Notification"], () => require("./notification"));

export { PluginArgs, PluginState } from "./plugin";
export type Plugin = import("./plugin").Plugin;
export const Plugin: typeof import("./plugin").Plugin = null as any;
utilities.lazyLoad(exports, ["Plugin"], () => require("./plugin"));

export { PluginCommunityArgs, PluginCommunityState } from "./pluginCommunity";
export type PluginCommunity = import("./pluginCommunity").PluginCommunity;
export const PluginCommunity: typeof import("./pluginCommunity").PluginCommunity = null as any;
utilities.lazyLoad(exports, ["PluginCommunity"], () => require("./pluginCommunity"));

export { PrivatelinkAwsArgs, PrivatelinkAwsState } from "./privatelinkAws";
export type PrivatelinkAws = import("./privatelinkAws").PrivatelinkAws;
export const PrivatelinkAws: typeof import("./privatelinkAws").PrivatelinkAws = null as any;
utilities.lazyLoad(exports, ["PrivatelinkAws"], () => require("./privatelinkAws"));

export { PrivatelinkAzureArgs, PrivatelinkAzureState } from "./privatelinkAzure";
export type PrivatelinkAzure = import("./privatelinkAzure").PrivatelinkAzure;
export const PrivatelinkAzure: typeof import("./privatelinkAzure").PrivatelinkAzure = null as any;
utilities.lazyLoad(exports, ["PrivatelinkAzure"], () => require("./privatelinkAzure"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RabbitConfigurationArgs, RabbitConfigurationState } from "./rabbitConfiguration";
export type RabbitConfiguration = import("./rabbitConfiguration").RabbitConfiguration;
export const RabbitConfiguration: typeof import("./rabbitConfiguration").RabbitConfiguration = null as any;
utilities.lazyLoad(exports, ["RabbitConfiguration"], () => require("./rabbitConfiguration"));

export { SecurityFirewallArgs, SecurityFirewallState } from "./securityFirewall";
export type SecurityFirewall = import("./securityFirewall").SecurityFirewall;
export const SecurityFirewall: typeof import("./securityFirewall").SecurityFirewall = null as any;
utilities.lazyLoad(exports, ["SecurityFirewall"], () => require("./securityFirewall"));

export { UpgradeLavinmqArgs, UpgradeLavinmqState } from "./upgradeLavinmq";
export type UpgradeLavinmq = import("./upgradeLavinmq").UpgradeLavinmq;
export const UpgradeLavinmq: typeof import("./upgradeLavinmq").UpgradeLavinmq = null as any;
utilities.lazyLoad(exports, ["UpgradeLavinmq"], () => require("./upgradeLavinmq"));

export { UpgradeRabbitmqArgs, UpgradeRabbitmqState } from "./upgradeRabbitmq";
export type UpgradeRabbitmq = import("./upgradeRabbitmq").UpgradeRabbitmq;
export const UpgradeRabbitmq: typeof import("./upgradeRabbitmq").UpgradeRabbitmq = null as any;
utilities.lazyLoad(exports, ["UpgradeRabbitmq"], () => require("./upgradeRabbitmq"));

export { VpcArgs, VpcState } from "./vpc";
export type Vpc = import("./vpc").Vpc;
export const Vpc: typeof import("./vpc").Vpc = null as any;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));

export { VpcConnectArgs, VpcConnectState } from "./vpcConnect";
export type VpcConnect = import("./vpcConnect").VpcConnect;
export const VpcConnect: typeof import("./vpcConnect").VpcConnect = null as any;
utilities.lazyLoad(exports, ["VpcConnect"], () => require("./vpcConnect"));

export { VpcGcpPeeringArgs, VpcGcpPeeringState } from "./vpcGcpPeering";
export type VpcGcpPeering = import("./vpcGcpPeering").VpcGcpPeering;
export const VpcGcpPeering: typeof import("./vpcGcpPeering").VpcGcpPeering = null as any;
utilities.lazyLoad(exports, ["VpcGcpPeering"], () => require("./vpcGcpPeering"));

export { VpcPeeringArgs, VpcPeeringState } from "./vpcPeering";
export type VpcPeering = import("./vpcPeering").VpcPeering;
export const VpcPeering: typeof import("./vpcPeering").VpcPeering = null as any;
utilities.lazyLoad(exports, ["VpcPeering"], () => require("./vpcPeering"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudamqp:index/accountAction:AccountAction":
                return new AccountAction(name, <any>undefined, { urn })
            case "cloudamqp:index/alarm:Alarm":
                return new Alarm(name, <any>undefined, { urn })
            case "cloudamqp:index/customDomain:CustomDomain":
                return new CustomDomain(name, <any>undefined, { urn })
            case "cloudamqp:index/extraDiskSize:ExtraDiskSize":
                return new ExtraDiskSize(name, <any>undefined, { urn })
            case "cloudamqp:index/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "cloudamqp:index/integrationAwsEventbridge:IntegrationAwsEventbridge":
                return new IntegrationAwsEventbridge(name, <any>undefined, { urn })
            case "cloudamqp:index/integrationLog:IntegrationLog":
                return new IntegrationLog(name, <any>undefined, { urn })
            case "cloudamqp:index/integrationMetric:IntegrationMetric":
                return new IntegrationMetric(name, <any>undefined, { urn })
            case "cloudamqp:index/maintenanceWindow:MaintenanceWindow":
                return new MaintenanceWindow(name, <any>undefined, { urn })
            case "cloudamqp:index/nodeActions:NodeActions":
                return new NodeActions(name, <any>undefined, { urn })
            case "cloudamqp:index/notification:Notification":
                return new Notification(name, <any>undefined, { urn })
            case "cloudamqp:index/plugin:Plugin":
                return new Plugin(name, <any>undefined, { urn })
            case "cloudamqp:index/pluginCommunity:PluginCommunity":
                return new PluginCommunity(name, <any>undefined, { urn })
            case "cloudamqp:index/privatelinkAws:PrivatelinkAws":
                return new PrivatelinkAws(name, <any>undefined, { urn })
            case "cloudamqp:index/privatelinkAzure:PrivatelinkAzure":
                return new PrivatelinkAzure(name, <any>undefined, { urn })
            case "cloudamqp:index/rabbitConfiguration:RabbitConfiguration":
                return new RabbitConfiguration(name, <any>undefined, { urn })
            case "cloudamqp:index/securityFirewall:SecurityFirewall":
                return new SecurityFirewall(name, <any>undefined, { urn })
            case "cloudamqp:index/upgradeLavinmq:UpgradeLavinmq":
                return new UpgradeLavinmq(name, <any>undefined, { urn })
            case "cloudamqp:index/upgradeRabbitmq:UpgradeRabbitmq":
                return new UpgradeRabbitmq(name, <any>undefined, { urn })
            case "cloudamqp:index/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            case "cloudamqp:index/vpcConnect:VpcConnect":
                return new VpcConnect(name, <any>undefined, { urn })
            case "cloudamqp:index/vpcGcpPeering:VpcGcpPeering":
                return new VpcGcpPeering(name, <any>undefined, { urn })
            case "cloudamqp:index/vpcPeering:VpcPeering":
                return new VpcPeering(name, <any>undefined, { urn })
            case "cloudamqp:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudamqp", "index/accountAction", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/alarm", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/customDomain", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/extraDiskSize", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/instance", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/integrationAwsEventbridge", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/integrationLog", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/integrationMetric", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/maintenanceWindow", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/nodeActions", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/notification", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/plugin", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/pluginCommunity", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/privatelinkAws", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/privatelinkAzure", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/rabbitConfiguration", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/securityFirewall", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/upgradeLavinmq", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/upgradeRabbitmq", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/vpc", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/vpcConnect", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/vpcGcpPeering", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/vpcPeering", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/webhook", _module)
pulumi.runtime.registerResourcePackage("cloudamqp", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cloudamqp") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
