// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./alarm";
export * from "./customDomain";
export * from "./getAccount";
export * from "./getAccountVpcs";
export * from "./getAlarm";
export * from "./getCredentials";
export * from "./getInstance";
export * from "./getNodes";
export * from "./getNotification";
export * from "./getPlugins";
export * from "./getPluginsCommunity";
export * from "./getUpgradableVersions";
export * from "./getVpcGcpInfo";
export * from "./getVpcInfo";
export * from "./instance";
export * from "./integrationLog";
export * from "./integrationMetric";
export * from "./notification";
export * from "./plugin";
export * from "./pluginCommunity";
export * from "./provider";
export * from "./securityFirewall";
export * from "./upgradeRabbitmq";
export * from "./vpc";
export * from "./vpcGcpPeering";
export * from "./vpcPeering";
export * from "./webhook";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { Alarm } from "./alarm";
import { CustomDomain } from "./customDomain";
import { Instance } from "./instance";
import { IntegrationLog } from "./integrationLog";
import { IntegrationMetric } from "./integrationMetric";
import { Notification } from "./notification";
import { Plugin } from "./plugin";
import { PluginCommunity } from "./pluginCommunity";
import { SecurityFirewall } from "./securityFirewall";
import { UpgradeRabbitmq } from "./upgradeRabbitmq";
import { Vpc } from "./vpc";
import { VpcGcpPeering } from "./vpcGcpPeering";
import { VpcPeering } from "./vpcPeering";
import { Webhook } from "./webhook";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudamqp:index/alarm:Alarm":
                return new Alarm(name, <any>undefined, { urn })
            case "cloudamqp:index/customDomain:CustomDomain":
                return new CustomDomain(name, <any>undefined, { urn })
            case "cloudamqp:index/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "cloudamqp:index/integrationLog:IntegrationLog":
                return new IntegrationLog(name, <any>undefined, { urn })
            case "cloudamqp:index/integrationMetric:IntegrationMetric":
                return new IntegrationMetric(name, <any>undefined, { urn })
            case "cloudamqp:index/notification:Notification":
                return new Notification(name, <any>undefined, { urn })
            case "cloudamqp:index/plugin:Plugin":
                return new Plugin(name, <any>undefined, { urn })
            case "cloudamqp:index/pluginCommunity:PluginCommunity":
                return new PluginCommunity(name, <any>undefined, { urn })
            case "cloudamqp:index/securityFirewall:SecurityFirewall":
                return new SecurityFirewall(name, <any>undefined, { urn })
            case "cloudamqp:index/upgradeRabbitmq:UpgradeRabbitmq":
                return new UpgradeRabbitmq(name, <any>undefined, { urn })
            case "cloudamqp:index/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            case "cloudamqp:index/vpcGcpPeering:VpcGcpPeering":
                return new VpcGcpPeering(name, <any>undefined, { urn })
            case "cloudamqp:index/vpcPeering:VpcPeering":
                return new VpcPeering(name, <any>undefined, { urn })
            case "cloudamqp:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudamqp", "index/alarm", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/customDomain", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/instance", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/integrationLog", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/integrationMetric", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/notification", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/plugin", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/pluginCommunity", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/securityFirewall", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/upgradeRabbitmq", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/vpc", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/vpcGcpPeering", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/vpcPeering", _module)
pulumi.runtime.registerResourceModule("cloudamqp", "index/webhook", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("cloudamqp", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cloudamqp") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
