// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource allows you to create and manage recipients to receive alarm notifications. There will
 * always be a default recipient created upon instance creation. This recipient will use team email and
 * receive notifications from default alarms.
 *
 * Available for all subscription plans.
 *
 * ## Example Usage
 *
 * <details>
 *   <summary>
 *     <b>Email recipient</b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const emailRecipient = new cloudamqp.Notification("email_recipient", {
 *     instanceId: instance.id,
 *     type: "email",
 *     value: "alarm@example.com",
 *     name: "alarm",
 * });
 * ```
 *
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>OpsGenie recipient with optional responders</b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const opsgenieRecipient = new cloudamqp.Notification("opsgenie_recipient", {
 *     instanceId: instance.id,
 *     type: "opsgenie",
 *     value: "<api-key>",
 *     name: "OpsGenie",
 *     responders: [
 *         {
 *             type: "team",
 *             id: "<team-uuid>",
 *         },
 *         {
 *             type: "user",
 *             username: "<username>",
 *         },
 *     ],
 * });
 * ```
 *
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>Pagerduty recipient with optional dedup key</b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const pagerdutyRecipient = new cloudamqp.Notification("pagerduty_recipient", {
 *     instanceId: instance.id,
 *     type: "pagerduty",
 *     value: "<integration-key>",
 *     name: "PagerDuty",
 *     options: {
 *         dedupkey: "DEDUPKEY",
 *     },
 * });
 * ```
 *
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>Signl4 recipient</b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const signl4Recipient = new cloudamqp.Notification("signl4_recipient", {
 *     instanceId: instance.id,
 *     type: "signl4",
 *     value: "<team-secret>",
 *     name: "Signl4",
 * });
 * ```
 *
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>Teams recipient</b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const teamsRecipient = new cloudamqp.Notification("teams_recipient", {
 *     instanceId: instance.id,
 *     type: "teams",
 *     value: "<teams-webhook-url>",
 *     name: "Teams",
 * });
 * ```
 *
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>Victorops recipient with optional routing key (rk)</b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const victoropsRecipient = new cloudamqp.Notification("victorops_recipient", {
 *     instanceId: instance.id,
 *     type: "victorops",
 *     value: "<integration-key>",
 *     name: "Victorops",
 *     options: {
 *         rk: "ROUTINGKEY",
 *     },
 * });
 * ```
 *
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>Slack recipient</b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const slackRecipient = new cloudamqp.Notification("slack_recipient", {
 *     instanceId: instance.id,
 *     type: "slack",
 *     value: "<slack-webhook-url>",
 *     name: "Slack webhook recipient",
 * });
 * ```
 *
 * </details>
 *
 * <details>
 *   <summary>
 *     <b>Webhook recipient</b>
 *   </summary>
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudamqp from "@pulumi/cloudamqp";
 *
 * const webhookRecipient = new cloudamqp.Notification("webhook_recipient", {
 *     instanceId: instance.id,
 *     type: "webhook",
 *     value: "<webhook-url>",
 *     name: "Webhook",
 * });
 * ```
 *
 * </details>
 *
 * ## Notification Type reference
 *
 * Valid options for notification type.
 *
 * * email
 * * opsgenie
 * * opsgenie-eu
 * * pagerduty
 * * signl4
 * * slack
 * * teams
 * * victorops
 * * webhook
 *
 * ## Options parameter
 *
 * | Type      | Options  | Description | Note |
 * |---|---|---|---|
 * | Victorops | rk       | Routing key to route alarm notification | - |
 * | PagerDuty | dedupkey | Default the dedup key for PagerDuty is generated depending on what alarm has triggered, but here you can set what `dedup` key to use so even if the same alarm is triggered for different resources you only get one notification. Leave blank to use the generated dedup key. | If multiple alarms are triggered using this recipient, since they all share `dedup` key only the first alarm will be shown in PagerDuty |
 *
 * ## Dependency
 *
 * This resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.
 *
 * ## Import
 *
 * `cloudamqp_notification` can be imported using CloudAMQP internal identifier of a recipient together
 *
 * (CSV separated) with the instance identifier. To retrieve the identifier of a recipient, use
 *
 * [CloudAMQP API](https://docs.cloudamqp.com/cloudamqp_api.html#list-recipients).
 *
 * ```sh
 * $ pulumi import cloudamqp:index/notification:Notification recipient <id>,<instance_id>`
 * ```
 */
export class Notification extends pulumi.CustomResource {
    /**
     * Get an existing Notification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationState, opts?: pulumi.CustomResourceOptions): Notification {
        return new Notification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudamqp:index/notification:Notification';

    /**
     * Returns true if the given object is an instance of Notification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Notification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Notification.__pulumiType;
    }

    /**
     * The CloudAMQP instance ID.
     */
    public readonly instanceId!: pulumi.Output<number>;
    /**
     * Name of the responder
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Options argument (e.g. `rk` used for VictorOps routing key).
     */
    public readonly options!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * An array of reponders (only for OpsGenie). Each `responders` block
     * consists of the field documented below.
     *
     * ___
     *
     * The `responders` block consists of:
     */
    public readonly responders!: pulumi.Output<outputs.NotificationResponder[] | undefined>;
    /**
     * Type of responder. [`team`, `user`, `escalation`, `schedule`]
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Integration/API key or endpoint to send the notification.
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a Notification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationArgs | NotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationState | undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["responders"] = state ? state.responders : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as NotificationArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["responders"] = args ? args.responders : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Notification.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Notification resources.
 */
export interface NotificationState {
    /**
     * The CloudAMQP instance ID.
     */
    instanceId?: pulumi.Input<number>;
    /**
     * Name of the responder
     */
    name?: pulumi.Input<string>;
    /**
     * Options argument (e.g. `rk` used for VictorOps routing key).
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An array of reponders (only for OpsGenie). Each `responders` block
     * consists of the field documented below.
     *
     * ___
     *
     * The `responders` block consists of:
     */
    responders?: pulumi.Input<pulumi.Input<inputs.NotificationResponder>[]>;
    /**
     * Type of responder. [`team`, `user`, `escalation`, `schedule`]
     */
    type?: pulumi.Input<string>;
    /**
     * Integration/API key or endpoint to send the notification.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Notification resource.
 */
export interface NotificationArgs {
    /**
     * The CloudAMQP instance ID.
     */
    instanceId: pulumi.Input<number>;
    /**
     * Name of the responder
     */
    name?: pulumi.Input<string>;
    /**
     * Options argument (e.g. `rk` used for VictorOps routing key).
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An array of reponders (only for OpsGenie). Each `responders` block
     * consists of the field documented below.
     *
     * ___
     *
     * The `responders` block consists of:
     */
    responders?: pulumi.Input<pulumi.Input<inputs.NotificationResponder>[]>;
    /**
     * Type of responder. [`team`, `user`, `escalation`, `schedule`]
     */
    type: pulumi.Input<string>;
    /**
     * Integration/API key or endpoint to send the notification.
     */
    value: pulumi.Input<string>;
}
