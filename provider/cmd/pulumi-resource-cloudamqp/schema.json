{
    "name": "cloudamqp",
    "description": "A Pulumi package for creating and managing CloudAMQP resources.",
    "keywords": [
        "pulumi",
        "cloudamqp"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`cloudamqp` Terraform Provider](https://github.com/cloudamqp/terraform-provider-cloudamqp).",
    "repository": "https://github.com/pulumi/pulumi-cloudamqp",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "apikey": {
                "type": "string",
                "description": "Key used to authentication to the CloudAMQP Customer API\n",
                "defaultInfo": {
                    "environment": [
                        "CLOUDAMQP_APIKEY"
                    ]
                }
            },
            "baseurl": {
                "type": "string",
                "description": "Base URL to CloudAMQP Customer website\n"
            }
        },
        "defaults": [
            "apikey"
        ]
    },
    "types": {
        "cloudamqp:/SecurityFirewallRule:SecurityFirewallRule": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ]
        },
        "cloudamqp:/getPluginsCommunityPlugin:getPluginsCommunityPlugin": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "require": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "cloudamqp:/getPluginsPlugin:getPluginsPlugin": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        }
    },
    "provider": {
        "description": "The provider type for the cloudamqp package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "apikey": {
                "type": "string",
                "description": "Key used to authentication to the CloudAMQP Customer API\n",
                "defaultInfo": {
                    "environment": [
                        "CLOUDAMQP_APIKEY"
                    ]
                }
            },
            "baseurl": {
                "type": "string",
                "description": "Base URL to CloudAMQP Customer website\n"
            }
        }
    },
    "resources": {
        "cloudamqp:index/alarm:Alarm": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable an alarm\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "Message types (total, unacked, ready) of the queue to trigger the alarm\n"
                },
                "queueRegex": {
                    "type": "string",
                    "description": "Regex for which queues to check\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifiers for recipients to be notified.\n"
                },
                "timeThreshold": {
                    "type": "integer",
                    "description": "For how long (in seconds) the value_threshold should be active before trigger alarm\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the alarm, valid options are: cpu, memory, disk_usage, queue_length, connection_count, consumers_count,\nnet_split\n"
                },
                "valueThreshold": {
                    "type": "integer",
                    "description": "What value to trigger the alarm for\n"
                },
                "vhostRegex": {
                    "type": "string",
                    "description": "Regex for which vhost the queues are in\n"
                }
            },
            "required": [
                "enabled",
                "instanceId",
                "recipients",
                "type"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable an alarm\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "Message types (total, unacked, ready) of the queue to trigger the alarm\n"
                },
                "queueRegex": {
                    "type": "string",
                    "description": "Regex for which queues to check\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifiers for recipients to be notified.\n"
                },
                "timeThreshold": {
                    "type": "integer",
                    "description": "For how long (in seconds) the value_threshold should be active before trigger alarm\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the alarm, valid options are: cpu, memory, disk_usage, queue_length, connection_count, consumers_count,\nnet_split\n"
                },
                "valueThreshold": {
                    "type": "integer",
                    "description": "What value to trigger the alarm for\n"
                },
                "vhostRegex": {
                    "type": "string",
                    "description": "Regex for which vhost the queues are in\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "instanceId",
                "recipients",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Alarm resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable or disable an alarm\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "Instance identifier\n"
                    },
                    "messageType": {
                        "type": "string",
                        "description": "Message types (total, unacked, ready) of the queue to trigger the alarm\n"
                    },
                    "queueRegex": {
                        "type": "string",
                        "description": "Regex for which queues to check\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Identifiers for recipients to be notified.\n"
                    },
                    "timeThreshold": {
                        "type": "integer",
                        "description": "For how long (in seconds) the value_threshold should be active before trigger alarm\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the alarm, valid options are: cpu, memory, disk_usage, queue_length, connection_count, consumers_count,\nnet_split\n"
                    },
                    "valueThreshold": {
                        "type": "integer",
                        "description": "What value to trigger the alarm for\n"
                    },
                    "vhostRegex": {
                        "type": "string",
                        "description": "Regex for which vhost the queues are in\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/instance:Instance": {
            "properties": {
                "apikey": {
                    "type": "string",
                    "description": "API key for the CloudAMQP instance\n"
                },
                "host": {
                    "type": "string",
                    "description": "Host name for the CloudAMQP instance\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the instance\n"
                },
                "nodes": {
                    "type": "integer",
                    "description": "Number of nodes in cluster (plan must support it)\n"
                },
                "plan": {
                    "type": "string",
                    "description": "Name of the plan, valid options are: lemur, tiger, bunny, rabbit, panda, ape, hippo, lion\n"
                },
                "ready": {
                    "type": "boolean",
                    "description": "Flag describing if the resource is ready\n"
                },
                "region": {
                    "type": "string",
                    "description": "Name of the region you want to create your instance in\n"
                },
                "rmqVersion": {
                    "type": "string",
                    "description": "RabbitMQ version\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tag the instances with optional tags\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the CloudAMQP instance\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The virtual host\n"
                },
                "vpcSubnet": {
                    "type": "string",
                    "description": "Dedicated VPC subnet, shouldn't overlap with your current VPC's subnet\n"
                }
            },
            "required": [
                "apikey",
                "host",
                "name",
                "plan",
                "ready",
                "region",
                "url",
                "vhost"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the instance\n"
                },
                "nodes": {
                    "type": "integer",
                    "description": "Number of nodes in cluster (plan must support it)\n"
                },
                "plan": {
                    "type": "string",
                    "description": "Name of the plan, valid options are: lemur, tiger, bunny, rabbit, panda, ape, hippo, lion\n"
                },
                "region": {
                    "type": "string",
                    "description": "Name of the region you want to create your instance in\n"
                },
                "rmqVersion": {
                    "type": "string",
                    "description": "RabbitMQ version\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tag the instances with optional tags\n"
                },
                "vpcSubnet": {
                    "type": "string",
                    "description": "Dedicated VPC subnet, shouldn't overlap with your current VPC's subnet\n"
                }
            },
            "requiredInputs": [
                "plan",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "apikey": {
                        "type": "string",
                        "description": "API key for the CloudAMQP instance\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "Host name for the CloudAMQP instance\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the instance\n"
                    },
                    "nodes": {
                        "type": "integer",
                        "description": "Number of nodes in cluster (plan must support it)\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "Name of the plan, valid options are: lemur, tiger, bunny, rabbit, panda, ape, hippo, lion\n"
                    },
                    "ready": {
                        "type": "boolean",
                        "description": "Flag describing if the resource is ready\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Name of the region you want to create your instance in\n"
                    },
                    "rmqVersion": {
                        "type": "string",
                        "description": "RabbitMQ version\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tag the instances with optional tags\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the CloudAMQP instance\n"
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The virtual host\n"
                    },
                    "vpcSubnet": {
                        "type": "string",
                        "description": "Dedicated VPC subnet, shouldn't overlap with your current VPC's subnet\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/integrationLog:IntegrationLog": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "AWS access key identifier. (Cloudwatch)\n"
                },
                "hostPort": {
                    "type": "string",
                    "description": "Destination to send the logs. (Splunk)\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier used to make proxy calls\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of log integration\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region hosting integration service. (Cloudwatch)\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "AWS secret access key. (Cloudwatch)\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token used for authentication. (Loggly, Logentries, Splunk)\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to push the logs to. (Papertrail)\n"
                }
            },
            "required": [
                "instanceId",
                "name"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "AWS access key identifier. (Cloudwatch)\n"
                },
                "hostPort": {
                    "type": "string",
                    "description": "Destination to send the logs. (Splunk)\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier used to make proxy calls\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of log integration\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region hosting integration service. (Cloudwatch)\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "AWS secret access key. (Cloudwatch)\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token used for authentication. (Loggly, Logentries, Splunk)\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to push the logs to. (Papertrail)\n"
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IntegrationLog resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "AWS access key identifier. (Cloudwatch)\n"
                    },
                    "hostPort": {
                        "type": "string",
                        "description": "Destination to send the logs. (Splunk)\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "Instance identifier used to make proxy calls\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of log integration\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region hosting integration service. (Cloudwatch)\n"
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "description": "AWS secret access key. (Cloudwatch)\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The token used for authentication. (Loggly, Logentries, Splunk)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to push the logs to. (Papertrail)\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/integrationMetric:IntegrationMetric": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "AWS access key identifier. (Cloudwatch)\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key for the integration service. (Librato)\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address registred for the integration service. (Librato)\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "licenseKey": {
                    "type": "string",
                    "description": "The license key registred for the integration service. (New Relic)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of metrics integration\n"
                },
                "queueWhitelist": {
                    "type": "string",
                    "description": "(optional) whitelist using regular expression\n"
                },
                "region": {
                    "type": "string",
                    "description": "AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "AWS secret key. (Cloudwatch)\n"
                },
                "tags": {
                    "type": "string",
                    "description": "(optional) tags. E.g. env=prod,region=europe\n"
                },
                "vhostWhitelist": {
                    "type": "string",
                    "description": "(optional) whitelist using regular expression\n"
                }
            },
            "required": [
                "instanceId",
                "name"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "AWS access key identifier. (Cloudwatch)\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key for the integration service. (Librato)\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address registred for the integration service. (Librato)\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "licenseKey": {
                    "type": "string",
                    "description": "The license key registred for the integration service. (New Relic)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of metrics integration\n"
                },
                "queueWhitelist": {
                    "type": "string",
                    "description": "(optional) whitelist using regular expression\n"
                },
                "region": {
                    "type": "string",
                    "description": "AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "AWS secret key. (Cloudwatch)\n"
                },
                "tags": {
                    "type": "string",
                    "description": "(optional) tags. E.g. env=prod,region=europe\n"
                },
                "vhostWhitelist": {
                    "type": "string",
                    "description": "(optional) whitelist using regular expression\n"
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IntegrationMetric resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "AWS access key identifier. (Cloudwatch)\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "The API key for the integration service. (Librato)\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address registred for the integration service. (Librato)\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "Instance identifier\n"
                    },
                    "licenseKey": {
                        "type": "string",
                        "description": "The license key registred for the integration service. (New Relic)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of metrics integration\n"
                    },
                    "queueWhitelist": {
                        "type": "string",
                        "description": "(optional) whitelist using regular expression\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)\n"
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "description": "AWS secret key. (Cloudwatch)\n"
                    },
                    "tags": {
                        "type": "string",
                        "description": "(optional) tags. E.g. env=prod,region=europe\n"
                    },
                    "vhostWhitelist": {
                        "type": "string",
                        "description": "(optional) whitelist using regular expression\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/notification:Notification": {
            "properties": {
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "name": {
                    "type": "string",
                    "description": "Optional display name of the recipient\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the notification, valid options are: email, webhook, pagerduty, victorops, opsgenie, opsgenie-eu, slack\n"
                },
                "value": {
                    "type": "string",
                    "description": "Notification endpoint, where to send the notifcation\n"
                }
            },
            "required": [
                "instanceId",
                "name",
                "type",
                "value"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "name": {
                    "type": "string",
                    "description": "Optional display name of the recipient\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the notification, valid options are: email, webhook, pagerduty, victorops, opsgenie, opsgenie-eu, slack\n"
                },
                "value": {
                    "type": "string",
                    "description": "Notification endpoint, where to send the notifcation\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "type",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Notification resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "Instance identifier\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Optional display name of the recipient\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the notification, valid options are: email, webhook, pagerduty, victorops, opsgenie, opsgenie-eu, slack\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Notification endpoint, where to send the notifcation\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/plugin:Plugin": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If the plugin is enabled\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the plugin\n"
                }
            },
            "required": [
                "enabled",
                "instanceId",
                "name"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If the plugin is enabled\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the plugin\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Plugin resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "If the plugin is enabled\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "Instance identifier\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the plugin\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/pluginCommunity:PluginCommunity": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If the plugin is enabled\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the plugin\n"
                }
            },
            "required": [
                "enabled",
                "instanceId",
                "name"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If the plugin is enabled\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the plugin\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PluginCommunity resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "If the plugin is enabled\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "Instance identifier\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the plugin\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/securityFirewall:SecurityFirewall": {
            "properties": {
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cloudamqp:/SecurityFirewallRule:SecurityFirewallRule"
                    }
                }
            },
            "required": [
                "instanceId",
                "rules"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cloudamqp:/SecurityFirewallRule:SecurityFirewallRule"
                    }
                }
            },
            "requiredInputs": [
                "instanceId",
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityFirewall resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "Instance identifier\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:/SecurityFirewallRule:SecurityFirewallRule"
                        }
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/vpcPeering:VpcPeering": {
            "properties": {
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "peeringId": {
                    "type": "string",
                    "description": "VPC peering identifier\n"
                },
                "status": {
                    "type": "string",
                    "description": "VPC peering status\n"
                }
            },
            "required": [
                "instanceId",
                "peeringId",
                "status"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "peeringId": {
                    "type": "string",
                    "description": "VPC peering identifier\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "peeringId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPeering resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "Instance identifier\n"
                    },
                    "peeringId": {
                        "type": "string",
                        "description": "VPC peering identifier\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "VPC peering status\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "cloudamqp:index/getAlarm:getAlarm": {
            "inputs": {
                "description": "A collection of arguments for invoking getAlarm.\n",
                "properties": {
                    "alarmId": {
                        "type": "integer"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAlarm.\n",
                "properties": {
                    "alarmId": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "messageType": {
                        "type": "string"
                    },
                    "queueRegex": {
                        "type": "string"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "timeThreshold": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "valueThreshold": {
                        "type": "integer"
                    },
                    "vhostRegex": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "enabled",
                    "instanceId",
                    "messageType",
                    "queueRegex",
                    "recipients",
                    "timeThreshold",
                    "valueThreshold",
                    "vhostRegex",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getCredentials:getCredentials": {
            "inputs": {
                "description": "A collection of arguments for invoking getCredentials.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer"
                    },
                    "password": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCredentials.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "password": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getInstance:getInstance": {
            "inputs": {
                "description": "A collection of arguments for invoking getInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer"
                    },
                    "vpcSubnet": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInstance.\n",
                "properties": {
                    "apikey": {
                        "type": "string"
                    },
                    "host": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodes": {
                        "type": "integer"
                    },
                    "plan": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "rmqVersion": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "url": {
                        "type": "string"
                    },
                    "vhost": {
                        "type": "string"
                    },
                    "vpcSubnet": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apikey",
                    "host",
                    "instanceId",
                    "name",
                    "nodes",
                    "plan",
                    "region",
                    "rmqVersion",
                    "tags",
                    "url",
                    "vhost",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getNotification:getNotification": {
            "inputs": {
                "description": "A collection of arguments for invoking getNotification.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "recipientId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNotification.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "recipientId": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "type",
                    "value",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getPlugins:getPlugins": {
            "inputs": {
                "description": "A collection of arguments for invoking getPlugins.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer"
                    },
                    "plugins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:/getPluginsPlugin:getPluginsPlugin"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlugins.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "plugins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:/getPluginsPlugin:getPluginsPlugin"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getPluginsCommunity:getPluginsCommunity": {
            "inputs": {
                "description": "A collection of arguments for invoking getPluginsCommunity.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer"
                    },
                    "plugins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:/getPluginsCommunityPlugin:getPluginsCommunityPlugin"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPluginsCommunity.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "plugins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:/getPluginsCommunityPlugin:getPluginsCommunityPlugin"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getVpcInfo:getVpcInfo": {
            "inputs": {
                "description": "A collection of arguments for invoking getVpcInfo.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVpcInfo.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "securityGroupId": {
                        "type": "string"
                    },
                    "vpcSubnet": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "name",
                    "ownerId",
                    "securityGroupId",
                    "vpcSubnet",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": {
                "cloudamqp": "CloudAmqp"
            },
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "packageDescription": "A Pulumi package for creating and managing CloudAMQP resources.",
            "packageName": "",
            "typescriptVersion": ""
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=2.0.0,\u003c3.0.0"
            }
        }
    }
}