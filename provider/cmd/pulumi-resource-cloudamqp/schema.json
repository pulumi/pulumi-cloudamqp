{
    "name": "cloudamqp",
    "description": "A Pulumi package for creating and managing CloudAMQP resources.",
    "keywords": [
        "pulumi",
        "cloudamqp"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`cloudamqp` Terraform Provider](https://github.com/cloudamqp/terraform-provider-cloudamqp).",
    "repository": "https://github.com/pulumi/pulumi-cloudamqp",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "apikey": {
                "type": "string",
                "description": "Key used to authentication to the CloudAMQP Customer API\n"
            },
            "baseurl": {
                "type": "string",
                "description": "Base URL to CloudAMQP Customer website\n"
            }
        },
        "defaults": [
            "apikey"
        ]
    },
    "types": {
        "cloudamqp:index/SecurityFirewallRule:SecurityFirewallRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description name of the rule. e.g. Default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "Source ip and netmask for the rule. (e.g. 10.56.72.0/24)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Custom ports to be opened\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pre-defined service ports\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ]
        },
        "cloudamqp:index/getNodesNode:getNodesNode": {
            "properties": {
                "erlangVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hipe": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rabbitmqVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "running": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "erlangVersion",
                "hipe",
                "hostname",
                "name",
                "rabbitmqVersion",
                "running"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cloudamqp:index/getPluginsCommunityPlugin:getPluginsCommunityPlugin": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "require": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "cloudamqp:index/getPluginsPlugin:getPluginsPlugin": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        }
    },
    "provider": {
        "description": "The provider type for the cloudamqp package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "apikey": {
                "type": "string",
                "description": "Key used to authentication to the CloudAMQP Customer API\n"
            },
            "baseurl": {
                "type": "string",
                "description": "Base URL to CloudAMQP Customer website\n"
            }
        },
        "requiredInputs": [
            "apikey"
        ]
    },
    "resources": {
        "cloudamqp:index/alarm:Alarm": {
            "description": "This resource allows you to create and manage alarms to trigger based on a set of conditions. Once triggerd a notification will be sent to the assigned recipients. When creating a new instance, there will also be a set of default alarms (cpu, memory and disk) created. All default alarms uses the default recipient for notifications.\n\nBy setting `no_default_alarms` to *true* in `cloudamqp.Instance`. This will create the instance without default alarms and avoid the need to import them to get full control.\n\nAvailable for all subscription plans, but `lemur`and `tiger`are limited to fewer alarm types. The limited types supported can be seen in the table below in Alarm Type Reference.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\n// New recipient\nconst recipient01 = new cloudamqp.Notification(\"recipient01\", {\n    instanceId: cloudamqp_instance.instance.id,\n    type: \"email\",\n    value: \"alarm@example.com\",\n});\n// New cpu alarm\nconst cpuAlarm = new cloudamqp.Alarm(\"cpuAlarm\", {\n    instanceId: cloudamqp_instance.instance.id,\n    type: \"cpu\",\n    enabled: true,\n    valueThreshold: 95,\n    timeThreshold: 600,\n    recipient: [2],\n});\n// New memory alarm\nconst memoryAlarm = new cloudamqp.Alarm(\"memoryAlarm\", {\n    instanceId: cloudamqp_instance.instance.id,\n    type: \"memory\",\n    enabled: true,\n    valueThreshold: 95,\n    timeThreshold: 600,\n    recipient: [2],\n});\n```\n{{% /example %}}\n{{% /examples %}}\n## Alarm Type reference\n\nValid options for notification type.\n\nRequired arguments for all alarms: *instance_id*, *type* and *enabled*\u003cbr\u003e\nOptional argument for all alarms: *tags*, *queue_regex*, *vhost_regex*\n\n| Name | Type | Shared | Dedicated | Required arguments |\n| ---- | ---- | ---- | ---- | ---- | ---- |\n| CPU | cpu | - | \u0026#10004; | time_threshold, value_threshold |\n| Memory | memory | - | \u0026#10004;  | time_threshold, value_threshold |\n| Disk space | disk | - | \u0026#10004;  | time_threshold, value_threshold |\n| Queue | queue | \u0026#10004;  | \u0026#10004;  | time_threshold, value_threshold, queue_regex, vhost_regex, message_type |\n| Connection | connection | \u0026#10004; | \u0026#10004; | time_threshold, value_threshold |\n| Consumer | consumer | \u0026#10004; | \u0026#10004; | time_threshold, value_threshold, queue, vhost |\n| Netsplit | netsplit | - | \u0026#10004; | time_threshold |\n| Server unreachable | server_unreachable  | - | \u0026#10004;  | time_threshold |\n| Notice | notice | \u0026#10004; | \u0026#10004; |\n\n## Dependency\n\nThis resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n\n\n## Import\n\n`cloudamqp_alarm` can be imported using CloudAMQP internal identifier of the alarm together (CSV separated) with the instance identifier. To retrieve the alarm identifier, use [CloudAMQP API](https://docs.cloudamqp.com/cloudamqp_api.html#list-alarms)\n\n```sh\n $ pulumi import cloudamqp:index/alarm:Alarm alarm \u003calarm_id\u003e,\u003cinstance_id\u003e`\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the alarm to trigger.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "Message type `(total, unacked, ready)` used by queue alarm type.\n"
                },
                "queueRegex": {
                    "type": "string",
                    "description": "Regex for which queue to check.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier for recipient to be notified. Leave empty to notify all recipients.\n"
                },
                "timeThreshold": {
                    "type": "integer",
                    "description": "The time interval (in seconds) the `value_threshold` should be active before triggering an alarm.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The alarm type, see valid options below.\n"
                },
                "valueThreshold": {
                    "type": "integer",
                    "description": "The value to trigger the alarm for.\n"
                },
                "vhostRegex": {
                    "type": "string",
                    "description": "Regex for which vhost to check\n"
                }
            },
            "required": [
                "enabled",
                "instanceId",
                "recipients",
                "type"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the alarm to trigger.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "Message type `(total, unacked, ready)` used by queue alarm type.\n"
                },
                "queueRegex": {
                    "type": "string",
                    "description": "Regex for which queue to check.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier for recipient to be notified. Leave empty to notify all recipients.\n"
                },
                "timeThreshold": {
                    "type": "integer",
                    "description": "The time interval (in seconds) the `value_threshold` should be active before triggering an alarm.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The alarm type, see valid options below.\n"
                },
                "valueThreshold": {
                    "type": "integer",
                    "description": "The value to trigger the alarm for.\n"
                },
                "vhostRegex": {
                    "type": "string",
                    "description": "Regex for which vhost to check\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "instanceId",
                "recipients",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Alarm resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable or disable the alarm to trigger.\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance ID.\n"
                    },
                    "messageType": {
                        "type": "string",
                        "description": "Message type `(total, unacked, ready)` used by queue alarm type.\n"
                    },
                    "queueRegex": {
                        "type": "string",
                        "description": "Regex for which queue to check.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Identifier for recipient to be notified. Leave empty to notify all recipients.\n"
                    },
                    "timeThreshold": {
                        "type": "integer",
                        "description": "The time interval (in seconds) the `value_threshold` should be active before triggering an alarm.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The alarm type, see valid options below.\n"
                    },
                    "valueThreshold": {
                        "type": "integer",
                        "description": "The value to trigger the alarm for.\n"
                    },
                    "vhostRegex": {
                        "type": "string",
                        "description": "Regex for which vhost to check\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/instance:Instance": {
            "description": "This resource allows you to create and manage a CloudAMQP instance running Rabbit MQ and deploy to multiple cloud platforms provider and over multiple regions, see Instance regions for more information.\n\nOnce the instance is created it will be assigned a unique identifier. All other resource and data sources created for this instance needs to reference the instance identifier.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\n// Minimum free lemur instance\nconst lemurInstance = new cloudamqp.Instance(\"lemur_instance\", {\n    plan: \"lemur\",\n    region: \"amazon-web-services::us-west-1\",\n});\n// New dedicated bunny instance\nconst instance = new cloudamqp.Instance(\"instance\", {\n    noDefaultAlarms: true,\n    nodes: 1,\n    plan: \"bunny-1\",\n    region: \"amazon-web-services::us-west-1\",\n    rmqVersion: \"3.8.3\",\n    tags: [\"terraform\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\n# Minimum free lemur instance\nlemur_instance = cloudamqp.Instance(\"lemurInstance\",\n    plan=\"lemur\",\n    region=\"amazon-web-services::us-west-1\")\n# New dedicated bunny instance\ninstance = cloudamqp.Instance(\"instance\",\n    no_default_alarms=True,\n    nodes=1,\n    plan=\"bunny-1\",\n    region=\"amazon-web-services::us-west-1\",\n    rmq_version=\"3.8.3\",\n    tags=[\"terraform\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Minimum free lemur instance\n        var lemurInstance = new CloudAmqp.Instance(\"lemurInstance\", new CloudAmqp.InstanceArgs\n        {\n            Plan = \"lemur\",\n            Region = \"amazon-web-services::us-west-1\",\n        });\n        // New dedicated bunny instance\n        var instance = new CloudAmqp.Instance(\"instance\", new CloudAmqp.InstanceArgs\n        {\n            NoDefaultAlarms = true,\n            Nodes = 1,\n            Plan = \"bunny-1\",\n            Region = \"amazon-web-services::us-west-1\",\n            RmqVersion = \"3.8.3\",\n            Tags = \n            {\n                \"terraform\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v2/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewInstance(ctx, \"lemurInstance\", \u0026cloudamqp.InstanceArgs{\n\t\t\tPlan:   pulumi.String(\"lemur\"),\n\t\t\tRegion: pulumi.String(\"amazon-web-services::us-west-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudamqp.NewInstance(ctx, \"instance\", \u0026cloudamqp.InstanceArgs{\n\t\t\tNoDefaultAlarms: pulumi.Bool(true),\n\t\t\tNodes:           pulumi.Int(1),\n\t\t\tPlan:            pulumi.String(\"bunny-1\"),\n\t\t\tRegion:          pulumi.String(\"amazon-web-services::us-west-1\"),\n\t\t\tRmqVersion:      pulumi.String(\"3.8.3\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n`cloudamqp_instance`can be imported using CloudAMQP internal identifier. To retrieve the identifier for an instance, use [CloudAMQP customer API](https://docs.cloudamqp.com/#list-instances).\n\n```sh\n $ pulumi import cloudamqp:index/instance:Instance instance \u003cinstance_id\u003e`\n```\n\n ",
            "properties": {
                "apikey": {
                    "type": "string",
                    "description": "(Computed) API key needed to communicate to CloudAMQP's second API. The second API is used to manage alarms, integration and more, full description [CloudAMQP API](https://docs.cloudamqp.com/cloudamqp_api.html).\n"
                },
                "dedicated": {
                    "type": "boolean",
                    "description": "Is the instance hosted on a dedicated server\n"
                },
                "host": {
                    "type": "string",
                    "description": "(Computed) The host name for the CloudAMQP instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the CloudAMQP instance.\n"
                },
                "noDefaultAlarms": {
                    "type": "boolean",
                    "description": "Set to true to discard creating default alarms when the instance is created. Can be left out, will then use default value = false.\n"
                },
                "nodes": {
                    "type": "integer",
                    "description": "Number of nodes, 1, 3 or 5. **Note: Changed from optional to computed. In order to change number of nodes, the subscription plan needs to be updated.**\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The subscription plan. See available plans\n"
                },
                "ready": {
                    "type": "boolean",
                    "description": "Flag describing if the resource is ready\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to host the instance in. See Instance regions\n"
                },
                "rmqVersion": {
                    "type": "string",
                    "description": "The Rabbit MQ version. Can be left out, will then be set to default value used by CloudAMQP API. **Note: There is not yet any support in the provider to change the RMQ version. Once it's set in the initial creation, it will remain.**\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more tags for the CloudAMQP instance, makes it possible to categories multiple instances in console view. Default there is no tags assigned.\n"
                },
                "url": {
                    "type": "string",
                    "description": "(Computed) AMQP server endpoint. `amqps://{username}:{password}@{hostname}/{vhost}`\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "(Computed) The virtual host used by Rabbit MQ.\n"
                },
                "vpcSubnet": {
                    "type": "string",
                    "description": "Creates a dedicated VPC subnet, shouldn't overlap with other VPC subnet, default subnet used 10.56.72.0/24. **NOTE: extra fee will be charged when using VPC, see [CloudAMQP](https://cloudamqp.com) for more information.**\n"
                }
            },
            "required": [
                "apikey",
                "dedicated",
                "host",
                "name",
                "noDefaultAlarms",
                "plan",
                "ready",
                "region",
                "rmqVersion",
                "url",
                "vhost"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the CloudAMQP instance.\n"
                },
                "noDefaultAlarms": {
                    "type": "boolean",
                    "description": "Set to true to discard creating default alarms when the instance is created. Can be left out, will then use default value = false.\n"
                },
                "nodes": {
                    "type": "integer",
                    "description": "Number of nodes, 1, 3 or 5. **Note: Changed from optional to computed. In order to change number of nodes, the subscription plan needs to be updated.**\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The subscription plan. See available plans\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to host the instance in. See Instance regions\n"
                },
                "rmqVersion": {
                    "type": "string",
                    "description": "The Rabbit MQ version. Can be left out, will then be set to default value used by CloudAMQP API. **Note: There is not yet any support in the provider to change the RMQ version. Once it's set in the initial creation, it will remain.**\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more tags for the CloudAMQP instance, makes it possible to categories multiple instances in console view. Default there is no tags assigned.\n"
                },
                "vpcSubnet": {
                    "type": "string",
                    "description": "Creates a dedicated VPC subnet, shouldn't overlap with other VPC subnet, default subnet used 10.56.72.0/24. **NOTE: extra fee will be charged when using VPC, see [CloudAMQP](https://cloudamqp.com) for more information.**\n"
                }
            },
            "requiredInputs": [
                "plan",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "apikey": {
                        "type": "string",
                        "description": "(Computed) API key needed to communicate to CloudAMQP's second API. The second API is used to manage alarms, integration and more, full description [CloudAMQP API](https://docs.cloudamqp.com/cloudamqp_api.html).\n"
                    },
                    "dedicated": {
                        "type": "boolean",
                        "description": "Is the instance hosted on a dedicated server\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "(Computed) The host name for the CloudAMQP instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the CloudAMQP instance.\n"
                    },
                    "noDefaultAlarms": {
                        "type": "boolean",
                        "description": "Set to true to discard creating default alarms when the instance is created. Can be left out, will then use default value = false.\n"
                    },
                    "nodes": {
                        "type": "integer",
                        "description": "Number of nodes, 1, 3 or 5. **Note: Changed from optional to computed. In order to change number of nodes, the subscription plan needs to be updated.**\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The subscription plan. See available plans\n"
                    },
                    "ready": {
                        "type": "boolean",
                        "description": "Flag describing if the resource is ready\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to host the instance in. See Instance regions\n"
                    },
                    "rmqVersion": {
                        "type": "string",
                        "description": "The Rabbit MQ version. Can be left out, will then be set to default value used by CloudAMQP API. **Note: There is not yet any support in the provider to change the RMQ version. Once it's set in the initial creation, it will remain.**\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "One or more tags for the CloudAMQP instance, makes it possible to categories multiple instances in console view. Default there is no tags assigned.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "(Computed) AMQP server endpoint. `amqps://{username}:{password}@{hostname}/{vhost}`\n"
                    },
                    "vhost": {
                        "type": "string",
                        "description": "(Computed) The virtual host used by Rabbit MQ.\n"
                    },
                    "vpcSubnet": {
                        "type": "string",
                        "description": "Creates a dedicated VPC subnet, shouldn't overlap with other VPC subnet, default subnet used 10.56.72.0/24. **NOTE: extra fee will be charged when using VPC, see [CloudAMQP](https://cloudamqp.com) for more information.**\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/integrationLog:IntegrationLog": {
            "description": "This resource allows you to create and manage third party log integrations for a CloudAMQP instance. Once configured, the logs produced will be forward to corresponding integration.\n\nOnly available for dedicated subscription plans.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst cloudwatch = new cloudamqp.IntegrationLog(\"cloudwatch\", {\n    instanceId: cloudamqp_instance.instance.id,\n    accessKeyId: _var.aws_access_key_id,\n    secretAccessKey: _var.aws_secret_access_key,\n    region: _var.aws_region,\n});\nconst logentries = new cloudamqp.IntegrationLog(\"logentries\", {\n    instanceId: cloudamqp_instance.instance.id,\n    token: _var.logentries_token,\n});\nconst loggly = new cloudamqp.IntegrationLog(\"loggly\", {\n    instanceId: cloudamqp_instance.instance.id,\n    token: _var.loggly_token,\n});\nconst papertrail = new cloudamqp.IntegrationLog(\"papertrail\", {\n    instanceId: cloudamqp_instance.instance.id,\n    url: _var.papertrail_url,\n});\nconst splunk = new cloudamqp.IntegrationLog(\"splunk\", {\n    instanceId: cloudamqp_instance.instance.id,\n    token: _var.splunk_token,\n    hostPort: _var.splunk_host_port,\n});\nconst datadog = new cloudamqp.IntegrationLog(\"datadog\", {\n    instanceId: cloudamqp_instance.instance.id,\n    region: _var.datadog_region,\n    apiKey: _var.datadog_api_key,\n    tags: _var.datadog_tags,\n});\nconst stackdriver = new cloudamqp.IntegrationLog(\"stackdriver\", {\n    instanceId: cloudamqp_instance.instance.id,\n    projectId: _var.stackdriver_project_id,\n    privateKey: _var.stackdriver_private_key,\n    clientEmail: _var.stackdriver_client_email,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\ncloudwatch = cloudamqp.IntegrationLog(\"cloudwatch\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    access_key_id=var[\"aws_access_key_id\"],\n    secret_access_key=var[\"aws_secret_access_key\"],\n    region=var[\"aws_region\"])\nlogentries = cloudamqp.IntegrationLog(\"logentries\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    token=var[\"logentries_token\"])\nloggly = cloudamqp.IntegrationLog(\"loggly\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    token=var[\"loggly_token\"])\npapertrail = cloudamqp.IntegrationLog(\"papertrail\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    url=var[\"papertrail_url\"])\nsplunk = cloudamqp.IntegrationLog(\"splunk\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    token=var[\"splunk_token\"],\n    host_port=var[\"splunk_host_port\"])\ndatadog = cloudamqp.IntegrationLog(\"datadog\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    region=var[\"datadog_region\"],\n    api_key=var[\"datadog_api_key\"],\n    tags=var[\"datadog_tags\"])\nstackdriver = cloudamqp.IntegrationLog(\"stackdriver\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    project_id=var[\"stackdriver_project_id\"],\n    private_key=var[\"stackdriver_private_key\"],\n    client_email=var[\"stackdriver_client_email\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var cloudwatch = new CloudAmqp.IntegrationLog(\"cloudwatch\", new CloudAmqp.IntegrationLogArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            AccessKeyId = @var.Aws_access_key_id,\n            SecretAccessKey = @var.Aws_secret_access_key,\n            Region = @var.Aws_region,\n        });\n        var logentries = new CloudAmqp.IntegrationLog(\"logentries\", new CloudAmqp.IntegrationLogArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Token = @var.Logentries_token,\n        });\n        var loggly = new CloudAmqp.IntegrationLog(\"loggly\", new CloudAmqp.IntegrationLogArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Token = @var.Loggly_token,\n        });\n        var papertrail = new CloudAmqp.IntegrationLog(\"papertrail\", new CloudAmqp.IntegrationLogArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Url = @var.Papertrail_url,\n        });\n        var splunk = new CloudAmqp.IntegrationLog(\"splunk\", new CloudAmqp.IntegrationLogArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Token = @var.Splunk_token,\n            HostPort = @var.Splunk_host_port,\n        });\n        var datadog = new CloudAmqp.IntegrationLog(\"datadog\", new CloudAmqp.IntegrationLogArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Region = @var.Datadog_region,\n            ApiKey = @var.Datadog_api_key,\n            Tags = @var.Datadog_tags,\n        });\n        var stackdriver = new CloudAmqp.IntegrationLog(\"stackdriver\", new CloudAmqp.IntegrationLogArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            ProjectId = @var.Stackdriver_project_id,\n            PrivateKey = @var.Stackdriver_private_key,\n            ClientEmail = @var.Stackdriver_client_email,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v2/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewIntegrationLog(ctx, \"cloudwatch\", \u0026cloudamqp.IntegrationLogArgs{\n\t\t\tInstanceId:      pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tAccessKeyId:     pulumi.Any(_var.Aws_access_key_id),\n\t\t\tSecretAccessKey: pulumi.Any(_var.Aws_secret_access_key),\n\t\t\tRegion:          pulumi.Any(_var.Aws_region),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudamqp.NewIntegrationLog(ctx, \"logentries\", \u0026cloudamqp.IntegrationLogArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tToken:      pulumi.Any(_var.Logentries_token),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudamqp.NewIntegrationLog(ctx, \"loggly\", \u0026cloudamqp.IntegrationLogArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tToken:      pulumi.Any(_var.Loggly_token),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudamqp.NewIntegrationLog(ctx, \"papertrail\", \u0026cloudamqp.IntegrationLogArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tUrl:        pulumi.Any(_var.Papertrail_url),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudamqp.NewIntegrationLog(ctx, \"splunk\", \u0026cloudamqp.IntegrationLogArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tToken:      pulumi.Any(_var.Splunk_token),\n\t\t\tHostPort:   pulumi.Any(_var.Splunk_host_port),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudamqp.NewIntegrationLog(ctx, \"datadog\", \u0026cloudamqp.IntegrationLogArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tRegion:     pulumi.Any(_var.Datadog_region),\n\t\t\tApiKey:     pulumi.Any(_var.Datadog_api_key),\n\t\t\tTags:       pulumi.Any(_var.Datadog_tags),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudamqp.NewIntegrationLog(ctx, \"stackdriver\", \u0026cloudamqp.IntegrationLogArgs{\n\t\t\tInstanceId:  pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tProjectId:   pulumi.Any(_var.Stackdriver_project_id),\n\t\t\tPrivateKey:  pulumi.Any(_var.Stackdriver_private_key),\n\t\t\tClientEmail: pulumi.Any(_var.Stackdriver_client_email),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument Reference (cloudwatchlog)\n\nCloudwatch argument reference and example. Create an IAM user with programmatic access and the following permissions:\n\n* CreateLogGroup\n* CreateLogStream\n* DescribeLogGroups\n* DescribeLogStreams\n* PutLogEvents\n\n## Integration service reference\n\nValid names for third party log integration.\n\n| Name       | Description |\n|------------|---------------------------------------------------------------|\n| cloudwatchlog | Create a IAM with programmatic access. |\n| logentries | Create a Logentries token at https://logentries.com/app#/add-log/manual  |\n| loggly     | Create a Loggly token at https://{your-company}.loggly.com/tokens |\n| papertrail | Create a Papertrail endpoint https://papertrailapp.com/systems/setup |\n| splunk     | Create a HTTP Event Collector token at https://.cloud.splunk.com/en-US/manager/search/http-eventcollector |\n| datadog       | Create a Datadog API key at app.datadoghq.com |\n| stackdriver   | Create a service account and add 'monitor metrics writer' role, then download credentials. |\n\n## Integration Type reference\n\nValid arguments for third party log integrations.\n\nRequired arguments for all integrations: name\n\n| Name | Type | Required arguments |\n| ---- | ---- | ---- |\n| CloudWatch | cloudwatchlog | access_key_id, secret_access_key, region |\n| Log Entries | logentries | token |\n| Loggly | loggly | token |\n| Papertrail | papertrail | url |\n| Splunk | splunk | token, host_port |\n| Data Dog | datadog | region, api_keys, tags |\n| Stackdriver | stackdriver | project_id, private_key, client_email |\n\n## Dependency\n\nThis resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n\n\n## Import\n\n`cloudamqp_integration_log`can be imported using the name argument of the resource together with CloudAMQP instance identifier. The name and identifier are CSV separated, see example below.\n\n```sh\n $ pulumi import cloudamqp:index/integrationLog:IntegrationLog \u003cresource_name\u003e \u003cname\u003e,\u003cinstance_id\u003e`\n```\n\n ",
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "AWS access key identifier.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key.\n"
                },
                "clientEmail": {
                    "type": "string",
                    "description": "The client email registered for the integration service.\n"
                },
                "hostPort": {
                    "type": "string",
                    "description": "Destination to send the logs.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier used to make proxy calls\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the third party log integration. See\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private access key.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project identifier.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region hosting the integration service.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "AWS secret access key.\n"
                },
                "tags": {
                    "type": "string",
                    "description": "Tag the integration, e.g. env=prod, region=europe.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token used for authentication.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Endpoint to log integration.\n"
                }
            },
            "required": [
                "instanceId",
                "name"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "AWS access key identifier.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key.\n"
                },
                "clientEmail": {
                    "type": "string",
                    "description": "The client email registered for the integration service.\n"
                },
                "hostPort": {
                    "type": "string",
                    "description": "Destination to send the logs.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier used to make proxy calls\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the third party log integration. See\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private access key.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project identifier.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region hosting the integration service.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "AWS secret access key.\n"
                },
                "tags": {
                    "type": "string",
                    "description": "Tag the integration, e.g. env=prod, region=europe.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token used for authentication.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Endpoint to log integration.\n"
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IntegrationLog resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "AWS access key identifier.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "The API key.\n"
                    },
                    "clientEmail": {
                        "type": "string",
                        "description": "The client email registered for the integration service.\n"
                    },
                    "hostPort": {
                        "type": "string",
                        "description": "Destination to send the logs.\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "Instance identifier used to make proxy calls\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the third party log integration. See\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The private access key.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project identifier.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region hosting the integration service.\n"
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "description": "AWS secret access key.\n"
                    },
                    "tags": {
                        "type": "string",
                        "description": "Tag the integration, e.g. env=prod, region=europe.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Token used for authentication.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Endpoint to log integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/integrationMetric:IntegrationMetric": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "AWS access key identifier. (Cloudwatch)\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key for the integration service. (Librato)\n"
                },
                "clientEmail": {
                    "type": "string",
                    "description": "The client email. (Stackdriver)\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address registred for the integration service. (Librato)\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "licenseKey": {
                    "type": "string",
                    "description": "The license key registred for the integration service. (New Relic)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of metrics integration\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key. (Stackdriver)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID. (Stackdriver)\n"
                },
                "queueAllowlist": {
                    "type": "string",
                    "description": "(optional) allowlist using regular expression\n"
                },
                "queueWhitelist": {
                    "type": "string",
                    "description": "**Deprecated**\n",
                    "deprecationMessage": "use queue_allowlist instead"
                },
                "region": {
                    "type": "string",
                    "description": "AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "AWS secret key. (Cloudwatch)\n"
                },
                "tags": {
                    "type": "string",
                    "description": "(optional) tags. E.g. env=prod,region=europe\n"
                },
                "vhostAllowlist": {
                    "type": "string",
                    "description": "(optional) allowlist using regular expression\n"
                },
                "vhostWhitelist": {
                    "type": "string",
                    "description": "**Deprecated**\n",
                    "deprecationMessage": "use vhost_allowlist instead"
                }
            },
            "required": [
                "instanceId",
                "name"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "AWS access key identifier. (Cloudwatch)\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key for the integration service. (Librato)\n"
                },
                "clientEmail": {
                    "type": "string",
                    "description": "The client email. (Stackdriver)\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address registred for the integration service. (Librato)\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "licenseKey": {
                    "type": "string",
                    "description": "The license key registred for the integration service. (New Relic)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of metrics integration\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key. (Stackdriver)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID. (Stackdriver)\n"
                },
                "queueAllowlist": {
                    "type": "string",
                    "description": "(optional) allowlist using regular expression\n"
                },
                "queueWhitelist": {
                    "type": "string",
                    "description": "**Deprecated**\n",
                    "deprecationMessage": "use queue_allowlist instead"
                },
                "region": {
                    "type": "string",
                    "description": "AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "AWS secret key. (Cloudwatch)\n"
                },
                "tags": {
                    "type": "string",
                    "description": "(optional) tags. E.g. env=prod,region=europe\n"
                },
                "vhostAllowlist": {
                    "type": "string",
                    "description": "(optional) allowlist using regular expression\n"
                },
                "vhostWhitelist": {
                    "type": "string",
                    "description": "**Deprecated**\n",
                    "deprecationMessage": "use vhost_allowlist instead"
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IntegrationMetric resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "AWS access key identifier. (Cloudwatch)\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "The API key for the integration service. (Librato)\n"
                    },
                    "clientEmail": {
                        "type": "string",
                        "description": "The client email. (Stackdriver)\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address registred for the integration service. (Librato)\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "Instance identifier\n"
                    },
                    "licenseKey": {
                        "type": "string",
                        "description": "The license key registred for the integration service. (New Relic)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of metrics integration\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The private key. (Stackdriver)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project ID. (Stackdriver)\n"
                    },
                    "queueAllowlist": {
                        "type": "string",
                        "description": "(optional) allowlist using regular expression\n"
                    },
                    "queueWhitelist": {
                        "type": "string",
                        "description": "**Deprecated**\n",
                        "deprecationMessage": "use queue_allowlist instead"
                    },
                    "region": {
                        "type": "string",
                        "description": "AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)\n"
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "description": "AWS secret key. (Cloudwatch)\n"
                    },
                    "tags": {
                        "type": "string",
                        "description": "(optional) tags. E.g. env=prod,region=europe\n"
                    },
                    "vhostAllowlist": {
                        "type": "string",
                        "description": "(optional) allowlist using regular expression\n"
                    },
                    "vhostWhitelist": {
                        "type": "string",
                        "description": "**Deprecated**\n",
                        "deprecationMessage": "use vhost_allowlist instead"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/notification:Notification": {
            "description": "This resource allows you to create and manage recipients to receive alarm notifications. There will always be a default recipient created upon instance creation. This recipient will use team email and receive notifications from default alarms.\n\nAvailable for all subscription plans.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\n// New recipient to receieve notifications\nconst recipient01 = new cloudamqp.Notification(\"recipient01\", {\n    instanceId: cloudamqp_instance.instance.id,\n    type: \"email\",\n    value: \"alarm@example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\n# New recipient to receieve notifications\nrecipient01 = cloudamqp.Notification(\"recipient01\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    type=\"email\",\n    value=\"alarm@example.com\")\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // New recipient to receieve notifications\n        var recipient01 = new CloudAmqp.Notification(\"recipient01\", new CloudAmqp.NotificationArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Type = \"email\",\n            Value = \"alarm@example.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v2/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewNotification(ctx, \"recipient01\", \u0026cloudamqp.NotificationArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tType:       pulumi.String(\"email\"),\n\t\t\tValue:      pulumi.String(\"alarm@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Notification Type reference\n\nValid options for notification type.\n\n* email\n* webhook\n* pagerduty\n* victorops\n* opsgenie\n* opsgenie-eu\n* slack\n\n## Dependency\n\nThis resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n\n\n## Import\n\n`cloudamqp_notification` can be imported using CloudAMQP internal identifier of a recipient together (CSV separated) with the instance identifier. To retrieve the identifier of a recipient, use [CloudAMQP API](https://docs.cloudamqp.com/cloudamqp_api.html#list-notification-recipients)\n\n```sh\n $ pulumi import cloudamqp:index/notification:Notification recipient \u003crecpient_id\u003e,\u003cindstance_id\u003e`\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the recipient.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the notification. See valid options below.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Endpoint to send the notification.\n"
                }
            },
            "required": [
                "instanceId",
                "name",
                "type",
                "value"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the recipient.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the notification. See valid options below.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Endpoint to send the notification.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "type",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Notification resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the recipient.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the notification. See valid options below.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Endpoint to send the notification.\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/plugin:Plugin": {
            "description": "\n\n\n## Import\n\n`cloudamqp_plugin` can be imported using the name argument of the resource together with CloudAMQP instance identifier. The name and identifier are CSV separated, see example below.\n\n```sh\n $ pulumi import cloudamqp:index/plugin:Plugin rabbitmq_management rabbitmq_management,\u003cinstance_id\u003e`\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the plugins.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Rabbit MQ plugin.\n"
                }
            },
            "required": [
                "enabled",
                "instanceId",
                "name"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the plugins.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Rabbit MQ plugin.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Plugin resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable or disable the plugins.\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Rabbit MQ plugin.\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/pluginCommunity:PluginCommunity": {
            "description": "This resource allows you to install or uninstall community plugins. Once installed the plugin will be available in `cloudamqp.Plugin`.\n\nOnly available for dedicated subscription plans.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst rabbitmqDelayedMessageExchange = new cloudamqp.PluginCommunity(\"rabbitmqDelayedMessageExchange\", {\n    instanceId: cloudamqp_instance.instance_01.id,\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nrabbitmq_delayed_message_exchange = cloudamqp.PluginCommunity(\"rabbitmqDelayedMessageExchange\",\n    instance_id=cloudamqp_instance[\"instance_01\"][\"id\"],\n    enabled=True)\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var rabbitmqDelayedMessageExchange = new CloudAmqp.PluginCommunity(\"rabbitmqDelayedMessageExchange\", new CloudAmqp.PluginCommunityArgs\n        {\n            InstanceId = cloudamqp_instance.Instance_01.Id,\n            Enabled = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v2/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewPluginCommunity(ctx, \"rabbitmqDelayedMessageExchange\", \u0026cloudamqp.PluginCommunityArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance_01.Id),\n\t\t\tEnabled:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Depedency\n\nThis resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n\n\n## Import\n\n`cloudamqp_plugin` can be imported using the name argument of the resource together with CloudAMQP instance identifier. The name and identifier are CSV separated, see example below.\n\n```sh\n $ pulumi import cloudamqp:index/pluginCommunity:PluginCommunity \u003cresource_name\u003e \u003cplugin_name\u003e,\u003cinstance_id\u003e`\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the plugins.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Rabbit MQ plugin.\n"
                }
            },
            "required": [
                "enabled",
                "instanceId",
                "name"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the plugins.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Rabbit MQ plugin.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PluginCommunity resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable or disable the plugins.\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Rabbit MQ plugin.\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/securityFirewall:SecurityFirewall": {
            "description": "This resource allows you to configure and manage firewall rules for the CloudAMQP instance. Beware that all rules need to be present, since all older configurations will be overwritten.\n\nOnly available for dedicated subscription plans.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst firewallSettings = new cloudamqp.SecurityFirewall(\"firewallSettings\", {\n    instanceId: cloudamqp_instance.instance.id,\n    rules: [\n        {\n            ip: \"192.168.0.0/24\",\n            ports: [\n                4567,\n                4568,\n            ],\n            services: [\n                \"AMQP\",\n                \"AMQPS\",\n            ],\n        },\n        {\n            ip: \"10.56.72.0/24\",\n            ports: [],\n            services: [\n                \"AMQP\",\n                \"AMQPS\",\n            ],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nfirewall_settings = cloudamqp.SecurityFirewall(\"firewallSettings\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    rules=[\n        cloudamqp.SecurityFirewallRuleArgs(\n            ip=\"192.168.0.0/24\",\n            ports=[\n                4567,\n                4568,\n            ],\n            services=[\n                \"AMQP\",\n                \"AMQPS\",\n            ],\n        ),\n        cloudamqp.SecurityFirewallRuleArgs(\n            ip=\"10.56.72.0/24\",\n            ports=[],\n            services=[\n                \"AMQP\",\n                \"AMQPS\",\n            ],\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var firewallSettings = new CloudAmqp.SecurityFirewall(\"firewallSettings\", new CloudAmqp.SecurityFirewallArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Rules = \n            {\n                new CloudAmqp.Inputs.SecurityFirewallRuleArgs\n                {\n                    Ip = \"192.168.0.0/24\",\n                    Ports = \n                    {\n                        4567,\n                        4568,\n                    },\n                    Services = \n                    {\n                        \"AMQP\",\n                        \"AMQPS\",\n                    },\n                },\n                new CloudAmqp.Inputs.SecurityFirewallRuleArgs\n                {\n                    Ip = \"10.56.72.0/24\",\n                    Ports = {},\n                    Services = \n                    {\n                        \"AMQP\",\n                        \"AMQPS\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Depedency\n\nThis resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n\n\n## Import\n\n`cloudamqp_security_firewall` can be imported using CloudAMQP instance identifier.\n\n```sh\n $ pulumi import cloudamqp:index/securityFirewall:SecurityFirewall firewall \u003cinstance_id\u003e`\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cloudamqp:index/SecurityFirewallRule:SecurityFirewallRule"
                    },
                    "description": "An array of rules, minimum of 1 needs to be configured. Each `rules` block consists of the field documented below.\n"
                }
            },
            "required": [
                "instanceId",
                "rules"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cloudamqp:index/SecurityFirewallRule:SecurityFirewallRule"
                    },
                    "description": "An array of rules, minimum of 1 needs to be configured. Each `rules` block consists of the field documented below.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityFirewall resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance ID.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:index/SecurityFirewallRule:SecurityFirewallRule"
                        },
                        "description": "An array of rules, minimum of 1 needs to be configured. Each `rules` block consists of the field documented below.\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/vpcPeering:VpcPeering": {
            "description": "\n\n\n## Import\n\n`cloudamqp_vpc_peering` can be imported using the CloudAMQP instance identifier.\n\n```sh\n $ pulumi import cloudamqp:index/vpcPeering:VpcPeering \u003cresource_name\u003e \u003cinstance_id\u003e`\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "peeringId": {
                    "type": "string",
                    "description": "Peering identifier created by AW peering request.\n"
                },
                "status": {
                    "type": "string",
                    "description": "VPC peering status\n"
                }
            },
            "required": [
                "instanceId",
                "peeringId",
                "status"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "peeringId": {
                    "type": "string",
                    "description": "Peering identifier created by AW peering request.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "peeringId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPeering resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance ID.\n"
                    },
                    "peeringId": {
                        "type": "string",
                        "description": "Peering identifier created by AW peering request.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "VPC peering status\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/webhook:Webhook": {
            "description": "This resource allows you to enable or disable webhooks for a specific vhost and queue.\n\nOnly available for dedicated subscription plans.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst webhookQueue = new cloudamqp.Webhook(\"webhookQueue\", {\n    instanceId: cloudamqp_instance.instance.id,\n    vhost: \"myvhost\",\n    queue: \"webhook-queue\",\n    webhookUri: \"https://example.com/webhook?key=secret\",\n    retryInterval: 5,\n    concurrency: 5,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nwebhook_queue = cloudamqp.Webhook(\"webhookQueue\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    vhost=\"myvhost\",\n    queue=\"webhook-queue\",\n    webhook_uri=\"https://example.com/webhook?key=secret\",\n    retry_interval=5,\n    concurrency=5)\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var webhookQueue = new CloudAmqp.Webhook(\"webhookQueue\", new CloudAmqp.WebhookArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Vhost = \"myvhost\",\n            Queue = \"webhook-queue\",\n            WebhookUri = \"https://example.com/webhook?key=secret\",\n            RetryInterval = 5,\n            Concurrency = 5,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v2/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewWebhook(ctx, \"webhookQueue\", \u0026cloudamqp.WebhookArgs{\n\t\t\tInstanceId:    pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tVhost:         pulumi.String(\"myvhost\"),\n\t\t\tQueue:         pulumi.String(\"webhook-queue\"),\n\t\t\tWebhookUri:    pulumi.String(\"https://example.com/webhook?key=secret\"),\n\t\t\tRetryInterval: pulumi.Int(5),\n\t\t\tConcurrency:   pulumi.Int(5),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Dependency\n\nThis resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n\n\n## Import\n\n`cloudamqp_webhook` can be imported using the resource identifier together with CloudAMQP instance identifier. The identifiers are CSV separated, see example below.\n\n```sh\n $ pulumi import cloudamqp:index/webhook:Webhook webhook_queue \u003cwebhook_id\u003e,\u003cinstance_id\u003e`\n```\n\n ",
            "properties": {
                "concurrency": {
                    "type": "integer",
                    "description": "Max simultaneous requests to the endpoint.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "queue": {
                    "type": "string",
                    "description": "A (durable) queue on your RabbitMQ instance.\n"
                },
                "retryInterval": {
                    "type": "integer",
                    "description": "How often we retry if your endpoint fails (in seconds).\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost the queue resides in.\n"
                },
                "webhookUri": {
                    "type": "string",
                    "description": "A POST request will be made for each message in the queue to this endpoint.\n"
                }
            },
            "required": [
                "concurrency",
                "instanceId",
                "queue",
                "retryInterval",
                "vhost",
                "webhookUri"
            ],
            "inputProperties": {
                "concurrency": {
                    "type": "integer",
                    "description": "Max simultaneous requests to the endpoint.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "queue": {
                    "type": "string",
                    "description": "A (durable) queue on your RabbitMQ instance.\n"
                },
                "retryInterval": {
                    "type": "integer",
                    "description": "How often we retry if your endpoint fails (in seconds).\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost the queue resides in.\n"
                },
                "webhookUri": {
                    "type": "string",
                    "description": "A POST request will be made for each message in the queue to this endpoint.\n"
                }
            },
            "requiredInputs": [
                "concurrency",
                "instanceId",
                "queue",
                "retryInterval",
                "vhost",
                "webhookUri"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Webhook resources.\n",
                "properties": {
                    "concurrency": {
                        "type": "integer",
                        "description": "Max simultaneous requests to the endpoint.\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance ID.\n"
                    },
                    "queue": {
                        "type": "string",
                        "description": "A (durable) queue on your RabbitMQ instance.\n"
                    },
                    "retryInterval": {
                        "type": "integer",
                        "description": "How often we retry if your endpoint fails (in seconds).\n"
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The vhost the queue resides in.\n"
                    },
                    "webhookUri": {
                        "type": "string",
                        "description": "A POST request will be made for each message in the queue to this endpoint.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "cloudamqp:index/getAlarm:getAlarm": {
            "description": "Use this data source to retrieve information about default or created alarms. Either use `alarm_id` or `type` to retrieve the alarm.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst defaultCpuAlarm = cloudamqp.getAlarm({\n    instanceId: cloudamqp_instance.instance.id,\n    type: \"cpu\",\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\ndefault_cpu_alarm = cloudamqp.get_alarm(instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    type=\"cpu\")\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var defaultCpuAlarm = Output.Create(CloudAmqp.GetAlarm.InvokeAsync(new CloudAmqp.GetAlarmArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Type = \"cpu\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v2/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"cpu\"\n\t\t_, err := cloudamqp.LookupAlarm(ctx, \u0026cloudamqp.LookupAlarmArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t\tType:       \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\n* `instance_id` - (Required) The CloudAMQP instance identifier.\n* `alarm_id`    - (Optional) The alarm identifier. Either use this or `type` to give `cloudamqp.Alarm` necessary information to retrieve the alarm.\n* `type`        - (Optional) The alarm type. Either use this or `alarm_id` to give `cloudamqp.Alarm` necessary information when retrieve the alarm.\n\n## Attribute reference\n\n* `enabled`         - (Computed) Enable/disable status of the alarm.\n* `value_threshold` - (Computed) The value threshold that triggers the alarm.\n* `time_threshold`  - (Computed) The time interval (in seconds) the `value_threshold` should be active before trigger an alarm.\n* `queue_regex`     - (Computed) Regular expression for which queue to check.\n* `vhost_regex`     - (Computed) Regular expression for which vhost to check\n* `recipients`      - (Computed) Identifier for recipient to be notified.\n* `message_type`    - (Computed) Message type `(total, unacked, ready)` used by queue alarm type.\n\n## Dependency\n\nThis data source depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAlarm.\n",
                "properties": {
                    "alarmId": {
                        "type": "integer"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAlarm.\n",
                "properties": {
                    "alarmId": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "messageType": {
                        "type": "string"
                    },
                    "queueRegex": {
                        "type": "string"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "timeThreshold": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "valueThreshold": {
                        "type": "integer"
                    },
                    "vhostRegex": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "enabled",
                    "instanceId",
                    "messageType",
                    "queueRegex",
                    "recipients",
                    "timeThreshold",
                    "valueThreshold",
                    "vhostRegex",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getCredentials:getCredentials": {
            "description": "Use this data source to retrieve information about the credentials of the configured user in Rabbit MQ. Information is extracted from `cloudamqp_instance.instance.url`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst credentials = cloudamqp.getCredentials({\n    instanceId: cloudamqp_instance.instance.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\ncredentials = cloudamqp.get_credentials(instance_id=cloudamqp_instance[\"instance\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var credentials = Output.Create(CloudAmqp.GetCredentials.InvokeAsync(new CloudAmqp.GetCredentialsArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v2/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.GetCredentials(ctx, \u0026cloudamqp.GetCredentialsArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\n* `instance_id` - (Required) The CloudAMQP instance identifier.\n\n## Attribute reference\n\n* `username`    - (Computed/Sensitive) The username for the configured user in Rabbit MQ.\n* `password`    - (Computed/Sensitive) The password used by the `username`.\n\n## Dependency\n\nThis data source depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCredentials.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer"
                    },
                    "password": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCredentials.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "password": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getInstance:getInstance": {
            "description": "Use this data source to retrieve information about an already created CloudAMQP instance. In order to retrieve the correct information, the CoudAMQP instance identifier is needed.\n\n## Argument reference\n\n* `instance_id` - (Required) The CloudAMQP instance identifier.\n\n## Attribute reference\n\n* `name`        - (Computed) The name of the CloudAMQP instance.\n* `plan`        - (Computed) The subscription plan for the CloudAMQP instance.\n* `region`      - (Computed) The cloud platform and region that host the CloudAMQP instance, `{platform}::{region}`.\n* `vpc_subnet`  - (Computed) Dedicated VPC subnet configured for the CloudAMQP instance.\n* `nodes`       - (Computed) Number of nodes in the cluster of the CloudAMQP instance.\n* `rmq_version` - (Computed) The version of installed Rabbit MQ.\n* `url`         - (Computed/Sensitive) The AMQP url, used by clients to connect for pub/sub.\n* `apikey`      - (Computed/Sensitive) The API key to secondary API handing alarms, integration etc.\n* `tags`        - (Computed) Tags the CloudAMQP instance with categories.\n* `host`        - (Computed) The hostname for the CloudAMQP instance.\n* `vhost`       - (Computed) The virtual host configured in Rabbit MQ.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer"
                    },
                    "vpcSubnet": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInstance.\n",
                "properties": {
                    "apikey": {
                        "type": "string"
                    },
                    "dedicated": {
                        "type": "boolean"
                    },
                    "host": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodes": {
                        "type": "integer"
                    },
                    "plan": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "rmqVersion": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "url": {
                        "type": "string"
                    },
                    "vhost": {
                        "type": "string"
                    },
                    "vpcSubnet": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apikey",
                    "dedicated",
                    "host",
                    "instanceId",
                    "name",
                    "nodes",
                    "plan",
                    "region",
                    "rmqVersion",
                    "tags",
                    "url",
                    "vhost",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getNodes:getNodes": {
            "description": "Use this data source to retrieve information about the node(s) created by CloudAMQP instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst nodes = cloudamqp.getNodes({\n    instanceId: cloudamqp_instance.instance.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nnodes = cloudamqp.get_nodes(instance_id=cloudamqp_instance[\"instance\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var nodes = Output.Create(CloudAmqp.GetNodes.InvokeAsync(new CloudAmqp.GetNodesArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v2/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.GetNodes(ctx, \u0026cloudamqp.GetNodesArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\n* `instance_id` - (Required) The CloudAMQP instance identifier.\n\n## Attribute reference\n\n* `nodes` - (Computed) An array of node information. Each `nodes` block consists of the fields documented below.\n\n___\n\nThe `nodes` block consist of\n\n* `hostname`          - (Computed) Hostname assigned to the node.\n* `name`              - (Computed) Name of the node.\n* `running`           - (Computed) Is the node running?\n* `rabbitmq_version`  - (Computed) Currently configured Rabbit MQ version on the node.\n* `erlang_version`    - (Computed) Currently used Erlanbg version on the node.\n* `hipe`              - (Computed) Enable or disable High-performance Erlang.\n\n## Dependency\n\nThis data source depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNodes.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:index/getNodesNode:getNodesNode"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNodes.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:index/getNodesNode:getNodesNode"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "nodes",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getNotification:getNotification": {
            "description": "Use this data source to retrieve information about default or created recipients. The recipient will receive notifications assigned to an alarm that has triggered. To retrieve the recipient either use `recipient_id` or `name`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst defaultRecipient = cloudamqp.getNotification({\n    instanceId: cloudamqp_instance.instance.id,\n    name: \"default\",\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\ndefault_recipient = cloudamqp.get_notification(instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    name=\"default\")\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var defaultRecipient = Output.Create(CloudAmqp.GetNotification.InvokeAsync(new CloudAmqp.GetNotificationArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Name = \"default\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v2/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"default\"\n\t\t_, err := cloudamqp.LookupNotification(ctx, \u0026cloudamqp.LookupNotificationArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t\tName:       \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\n* `instance_id`   - (Required) The CloudAMQP instance identifier.\n* `recipient_id`  - (Optional) The recipient identifier.\n* `name`          - (Optional) The name set for the recipient.\n\n## Attribute reference\n\n* `type`  - (Computed) The type of the recipient.\n* `value` - (Computed) The notification endpoint, where to send the notification.\n\n## Dependency\n\nThis data source depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNotification.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "recipientId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNotification.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "recipientId": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "type",
                    "value",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getPlugins:getPlugins": {
            "description": "Use this data source to retrieve information about installed and available plugins for the CloudAMQP instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst plugins = cloudamqp.getPlugins({\n    instanceId: cloudamqp_instance.instance.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nplugins = cloudamqp.get_plugins(instance_id=cloudamqp_instance[\"instance\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var plugins = Output.Create(CloudAmqp.GetPlugins.InvokeAsync(new CloudAmqp.GetPluginsArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v2/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.GetPlugins(ctx, \u0026cloudamqp.GetPluginsArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\n* `instance_id` - (Required) The CloudAMQP instance identifier.\n\n## Attribute reference\n\n* `plugins` - (Computed) An array of plugins. Each `plugins` block consists of the fields documented below.\n\n___\n\nThe `plugins` block consist of\n\n* `name`        - (Computed) The type of the recipient.\n* `version`     - (Computed) Rabbit MQ version that the plugins are shipped with.\n* `description` - (Computed) Description of what the plugin does.\n* `enabled`     - (Computed) Enable or disable information for the plugin.\n\n## Dependency\n\nThis data source depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlugins.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer"
                    },
                    "plugins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:index/getPluginsPlugin:getPluginsPlugin"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlugins.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "plugins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:index/getPluginsPlugin:getPluginsPlugin"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getPluginsCommunity:getPluginsCommunity": {
            "description": "Use this data source to retrieve information about available community plugins for the CloudAMQP instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst communitPlugins = cloudamqp.getPluginsCommunity({\n    instanceId: cloudamqp_instance.instance.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\ncommunit_plugins = cloudamqp.get_plugins_community(instance_id=cloudamqp_instance[\"instance\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var communitPlugins = Output.Create(CloudAmqp.GetPluginsCommunity.InvokeAsync(new CloudAmqp.GetPluginsCommunityArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v2/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.GetPluginsCommunity(ctx, \u0026cloudamqp.GetPluginsCommunityArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\n* `instance_id` - (Required) The CloudAMQP instance identifier.\n\n## Attribute reference\n\n* `plugins` - (Computed) An array of community plugins. Each `plugins` block consists of the fields documented below.\n\n___\n\nThe `plugins` block consists of\n\n* `name`        - (Computed) The type of the recipient.\n* `require`     - (Computed) Min. required Rabbit MQ version to be used.\n* `description` - (Computed) Description of what the plugin does.\n\n## Dependency\n\nThis data source depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPluginsCommunity.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer"
                    },
                    "plugins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:index/getPluginsCommunityPlugin:getPluginsCommunityPlugin"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPluginsCommunity.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "plugins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:index/getPluginsCommunityPlugin:getPluginsCommunityPlugin"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getVpcInfo:getVpcInfo": {
            "description": "Use this data source to retrieve information about VPC for a CloudAMQP instance.\n\nOnly available for CloudAMQP instances hosted in AWS.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst vpcInfo = cloudamqp.getVpcInfo({\n    instanceId: cloudamqp_instance.instance.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nvpc_info = cloudamqp.get_vpc_info(instance_id=cloudamqp_instance[\"instance\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var vpcInfo = Output.Create(CloudAmqp.GetVpcInfo.InvokeAsync(new CloudAmqp.GetVpcInfoArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v2/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.GetVpcInfo(ctx, \u0026cloudamqp.GetVpcInfoArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Argument reference\n\n* `instance_id` - (Required) The CloudAMQP instance identifier.\n\n## Attribute reference\n\n* `name`                - (Computed) The name of the CloudAMQP instance.\n* `vpc_subnet`          - (Computed) Dedicated VPC subnet.\n* `owner_id`            - (Computed) AWS account identifier.\n* `security_group_id`   - (Computed) AWS security group identifier.\n\n## Dependency\n\nThis data source depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcInfo.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVpcInfo.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "securityGroupId": {
                        "type": "string"
                    },
                    "vpcSubnet": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "name",
                    "ownerId",
                    "securityGroupId",
                    "vpcSubnet",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": {
                "cloudamqp": "CloudAmqp"
            },
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-cloudamqp/sdk/v2/go/cloudamqp"
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.15.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing CloudAMQP resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/cloudamqp/terraform-provider-cloudamqp)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-cloudamqp` repo](https://github.com/pulumi/pulumi-cloudamqp/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`cloudamqp/terraform-provider-cloudamqp` repo](https://github.com/cloudamqp/terraform-provider-cloudamqp/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/cloudamqp/terraform-provider-cloudamqp)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-cloudamqp` repo](https://github.com/pulumi/pulumi-cloudamqp/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`cloudamqp/terraform-provider-cloudamqp` repo](https://github.com/cloudamqp/terraform-provider-cloudamqp/issues).",
            "requires": {
                "pulumi": "\u003e=2.15.0,\u003c3.0.0"
            }
        }
    }
}