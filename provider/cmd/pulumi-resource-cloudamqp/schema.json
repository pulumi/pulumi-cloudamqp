{
    "name": "cloudamqp",
    "description": "A Pulumi package for creating and managing CloudAMQP resources.",
    "keywords": [
        "pulumi",
        "cloudamqp"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`cloudamqp` Terraform Provider](https://github.com/cloudamqp/terraform-provider-cloudamqp).",
    "repository": "https://github.com/pulumi/pulumi-cloudamqp",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "apikey": {
                "type": "string",
                "description": "Key used to authentication to the CloudAMQP Customer API\n"
            },
            "baseurl": {
                "type": "string",
                "description": "Base URL to CloudAMQP Customer website\n"
            }
        },
        "defaults": [
            "apikey"
        ]
    },
    "types": {
        "cloudamqp:index/SecurityFirewallRule:SecurityFirewallRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description name of the rule. e.g. Default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "Source ip and netmask for the rule. (e.g. 10.56.72.0/24)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Custom ports to be opened\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pre-defined service ports, see table below\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ]
        },
        "cloudamqp:index/getAccountInstance:getAccountInstance": {
            "properties": {
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "plan": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "plan",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cloudamqp:index/getAccountVpcsVpc:getAccountVpcsVpc": {
            "properties": {
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "region",
                "subnet",
                "vpcName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cloudamqp:index/getNodesNode:getNodesNode": {
            "properties": {
                "additionalDiskSize": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configured": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskSize": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "erlangVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hipe": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rabbitmqVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "running": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "additionalDiskSize",
                "configured",
                "diskSize",
                "erlangVersion",
                "hipe",
                "hostname",
                "name",
                "rabbitmqVersion",
                "running"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cloudamqp:index/getPluginsCommunityPlugin:getPluginsCommunityPlugin": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "require": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "require"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cloudamqp:index/getPluginsPlugin:getPluginsPlugin": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "enabled",
                "name",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the cloudamqp package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apikey": {
                "type": "string",
                "description": "Key used to authentication to the CloudAMQP Customer API\n"
            },
            "baseurl": {
                "type": "string",
                "description": "Base URL to CloudAMQP Customer website\n"
            }
        },
        "required": [
            "apikey"
        ],
        "inputProperties": {
            "apikey": {
                "type": "string",
                "description": "Key used to authentication to the CloudAMQP Customer API\n"
            },
            "baseurl": {
                "type": "string",
                "description": "Base URL to CloudAMQP Customer website\n"
            }
        },
        "requiredInputs": [
            "apikey"
        ]
    },
    "resources": {
        "cloudamqp:index/alarm:Alarm": {
            "description": "This resource allows you to create and manage alarms to trigger based on a set of conditions. Once triggerd a notification will be sent to the assigned recipients. When creating a new instance, there will also be a set of default alarms (cpu, memory and disk) created. All default alarms uses the default recipient for notifications.\n\nBy setting `no_default_alarms` to *true* in `cloudamqp.Instance`. This will create the instance without default alarms and avoid the need to import them to get full control.\n\nAvailable for all subscription plans, but `lemur`and `tiger`are limited to fewer alarm types. The limited types supported can be seen in the table below in Alarm Type Reference.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\n// New recipient\nconst recipient01 = new cloudamqp.Notification(\"recipient01\", {\n    instanceId: cloudamqp_instance.instance.id,\n    type: \"email\",\n    value: \"alarm@example.com\",\n});\n// New cpu alarm\nconst cpuAlarm = new cloudamqp.Alarm(\"cpuAlarm\", {\n    instanceId: cloudamqp_instance.instance.id,\n    type: \"cpu\",\n    enabled: true,\n    reminderInterval: 600,\n    valueThreshold: 95,\n    timeThreshold: 600,\n    recipients: [recipient01.id],\n});\n// New memory alarm\nconst memoryAlarm = new cloudamqp.Alarm(\"memoryAlarm\", {\n    instanceId: cloudamqp_instance.instance.id,\n    type: \"memory\",\n    enabled: true,\n    reminderInterval: 600,\n    valueThreshold: 95,\n    timeThreshold: 600,\n    recipients: [recipient01.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\n# New recipient\nrecipient01 = cloudamqp.Notification(\"recipient01\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    type=\"email\",\n    value=\"alarm@example.com\")\n# New cpu alarm\ncpu_alarm = cloudamqp.Alarm(\"cpuAlarm\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    type=\"cpu\",\n    enabled=True,\n    reminder_interval=600,\n    value_threshold=95,\n    time_threshold=600,\n    recipients=[recipient01.id])\n# New memory alarm\nmemory_alarm = cloudamqp.Alarm(\"memoryAlarm\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    type=\"memory\",\n    enabled=True,\n    reminder_interval=600,\n    value_threshold=95,\n    time_threshold=600,\n    recipients=[recipient01.id])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // New recipient\n        var recipient01 = new CloudAmqp.Notification(\"recipient01\", new CloudAmqp.NotificationArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Type = \"email\",\n            Value = \"alarm@example.com\",\n        });\n        // New cpu alarm\n        var cpuAlarm = new CloudAmqp.Alarm(\"cpuAlarm\", new CloudAmqp.AlarmArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Type = \"cpu\",\n            Enabled = true,\n            ReminderInterval = 600,\n            ValueThreshold = 95,\n            TimeThreshold = 600,\n            Recipients = \n            {\n                recipient01.Id,\n            },\n        });\n        // New memory alarm\n        var memoryAlarm = new CloudAmqp.Alarm(\"memoryAlarm\", new CloudAmqp.AlarmArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Type = \"memory\",\n            Enabled = true,\n            ReminderInterval = 600,\n            ValueThreshold = 95,\n            TimeThreshold = 600,\n            Recipients = \n            {\n                recipient01.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trecipient01, err := cloudamqp.NewNotification(ctx, \"recipient01\", \u0026cloudamqp.NotificationArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tType:       pulumi.String(\"email\"),\n\t\t\tValue:      pulumi.String(\"alarm@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudamqp.NewAlarm(ctx, \"cpuAlarm\", \u0026cloudamqp.AlarmArgs{\n\t\t\tInstanceId:       pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tType:             pulumi.String(\"cpu\"),\n\t\t\tEnabled:          pulumi.Bool(true),\n\t\t\tReminderInterval: pulumi.Int(600),\n\t\t\tValueThreshold:   pulumi.Int(95),\n\t\t\tTimeThreshold:    pulumi.Int(600),\n\t\t\tRecipients: pulumi.IntArray{\n\t\t\t\trecipient01.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudamqp.NewAlarm(ctx, \"memoryAlarm\", \u0026cloudamqp.AlarmArgs{\n\t\t\tInstanceId:       pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tType:             pulumi.String(\"memory\"),\n\t\t\tEnabled:          pulumi.Bool(true),\n\t\t\tReminderInterval: pulumi.Int(600),\n\t\t\tValueThreshold:   pulumi.Int(95),\n\t\t\tTimeThreshold:    pulumi.Int(600),\n\t\t\tRecipients: pulumi.IntArray{\n\t\t\t\trecipient01.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Alarm Type reference\n\nSupported alarm types: `cpu, memory, disk, queue, connection, flow, consumer, netsplit, server_unreachable, notice`\n\nRequired arguments for all alarms: `instance_id, type, enabled`\u003cbr\u003e\nOptional argument for all alarms: `tags, queue_regex, vhost_regex`\n\n| Name | Type | Shared | Dedicated | Required arguments |\n| ---- | ---- | ---- | ---- | ---- |\n| CPU | cpu | - | \u0026#10004; | time_threshold, value_threshold |\n| Memory | memory | - | \u0026#10004;  | time_threshold, value_threshold |\n| Disk space | disk | - | \u0026#10004;  | time_threshold, value_threshold |\n| Queue | queue | \u0026#10004;  | \u0026#10004; | time_threshold, value_threshold, queue_regex, vhost_regex, message_type |\n| Connection | connection | \u0026#10004; | \u0026#10004; | time_threshold, value_threshold |\n| Connection flow | flow | \u0026#10004; | \u0026#10004; | time_threshold, value_threshold |\n| Consumer | consumer | \u0026#10004; | \u0026#10004; | time_threshold, value_threshold, queue, vhost |\n| Netsplit | netsplit | - | \u0026#10004; | time_threshold |\n| Server unreachable | server_unreachable  | - | \u0026#10004;  | time_threshold |\n| Notice | notice | \u0026#10004; | \u0026#10004; | |\n\n## Dependency\n\nThis resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n\n\n## Import\n\n`cloudamqp_alarm` can be imported using CloudAMQP internal identifier of the alarm together (CSV separated) with the instance identifier. To retrieve the alarm identifier, use [CloudAMQP API](https://docs.cloudamqp.com/cloudamqp_api.html#list-alarms)\n\n```sh\n $ pulumi import cloudamqp:index/alarm:Alarm alarm \u003cid\u003e,\u003cinstance_id\u003e`\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the alarm to trigger.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "Message type `(total, unacked, ready)` used by queue alarm type.\n"
                },
                "queueRegex": {
                    "type": "string",
                    "description": "Regex for which queue to check.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier for recipient to be notified. Leave empty to notify all recipients.\n"
                },
                "reminderInterval": {
                    "type": "integer",
                    "description": "The reminder interval (in seconds) to resend the alarm if not resolved. Set to 0 for no reminders. The Default is 0.\n"
                },
                "timeThreshold": {
                    "type": "integer",
                    "description": "The time interval (in seconds) the `value_threshold` should be active before triggering an alarm.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The alarm type, see valid options below.\n"
                },
                "valueCalculation": {
                    "type": "string",
                    "description": "Disk value threshold calculation, `fixed, percentage` of disk space remaining.\n"
                },
                "valueThreshold": {
                    "type": "integer",
                    "description": "The value to trigger the alarm for.\n"
                },
                "vhostRegex": {
                    "type": "string",
                    "description": "Regex for which vhost to check\n"
                }
            },
            "required": [
                "enabled",
                "instanceId",
                "recipients",
                "type"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the alarm to trigger.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "Message type `(total, unacked, ready)` used by queue alarm type.\n"
                },
                "queueRegex": {
                    "type": "string",
                    "description": "Regex for which queue to check.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier for recipient to be notified. Leave empty to notify all recipients.\n"
                },
                "reminderInterval": {
                    "type": "integer",
                    "description": "The reminder interval (in seconds) to resend the alarm if not resolved. Set to 0 for no reminders. The Default is 0.\n"
                },
                "timeThreshold": {
                    "type": "integer",
                    "description": "The time interval (in seconds) the `value_threshold` should be active before triggering an alarm.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The alarm type, see valid options below.\n"
                },
                "valueCalculation": {
                    "type": "string",
                    "description": "Disk value threshold calculation, `fixed, percentage` of disk space remaining.\n"
                },
                "valueThreshold": {
                    "type": "integer",
                    "description": "The value to trigger the alarm for.\n"
                },
                "vhostRegex": {
                    "type": "string",
                    "description": "Regex for which vhost to check\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "instanceId",
                "recipients",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Alarm resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable or disable the alarm to trigger.\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance ID.\n"
                    },
                    "messageType": {
                        "type": "string",
                        "description": "Message type `(total, unacked, ready)` used by queue alarm type.\n"
                    },
                    "queueRegex": {
                        "type": "string",
                        "description": "Regex for which queue to check.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Identifier for recipient to be notified. Leave empty to notify all recipients.\n"
                    },
                    "reminderInterval": {
                        "type": "integer",
                        "description": "The reminder interval (in seconds) to resend the alarm if not resolved. Set to 0 for no reminders. The Default is 0.\n"
                    },
                    "timeThreshold": {
                        "type": "integer",
                        "description": "The time interval (in seconds) the `value_threshold` should be active before triggering an alarm.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The alarm type, see valid options below.\n"
                    },
                    "valueCalculation": {
                        "type": "string",
                        "description": "Disk value threshold calculation, `fixed, percentage` of disk space remaining.\n"
                    },
                    "valueThreshold": {
                        "type": "integer",
                        "description": "The value to trigger the alarm for.\n"
                    },
                    "vhostRegex": {
                        "type": "string",
                        "description": "Regex for which vhost to check\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/customDomain:CustomDomain": {
            "description": "This resource allows you to configure and manage your custom domain for the CloudAMQP instance.\n\nAdding a custom domain to your instance will generate a TLS certificate from [Let's Encrypt], for the given hostname, and install it on all servers in your cluster. The certificate will be automatically renewed going forward.\n\n⚠️ Please note that when creating, changing or deleting the custom domain, the listeners on your servers will be restarted in order to apply the changes. This will close your current connections.\n\nYour custom domain name needs to point to your CloudAMQP hostname, preferably using a CNAME DNS record.\n\nOnly available for dedicated subscription plans.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst settings = new cloudamqp.CustomDomain(\"settings\", {\n    instanceId: cloudamqp_instance.instance.id,\n    hostname: \"myname.mydomain\",\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nsettings = cloudamqp.CustomDomain(\"settings\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    hostname=\"myname.mydomain\")\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var settings = new CloudAmqp.CustomDomain(\"settings\", new CloudAmqp.CustomDomainArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Hostname = \"myname.mydomain\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewCustomDomain(ctx, \"settings\", \u0026cloudamqp.CustomDomainArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tHostname:   pulumi.String(\"myname.mydomain\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Depedency\n\nThis resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n\n\n## Import\n\n`cloudamqp_custom_domain` can be imported using CloudAMQP instance identifier.\n\n```sh\n $ pulumi import cloudamqp:index/customDomain:CustomDomain settings \u003cinstance_id\u003e`\n```\n\n [Let's Encrypt]https://letsencrypt.org/ ",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": "Your custom domain name.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                }
            },
            "required": [
                "hostname",
                "instanceId"
            ],
            "inputProperties": {
                "hostname": {
                    "type": "string",
                    "description": "Your custom domain name.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                }
            },
            "requiredInputs": [
                "hostname",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomDomain resources.\n",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "Your custom domain name.\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance ID.\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/extraDiskSize:ExtraDiskSize": {
            "description": "This resource allows you to expand the disk with additional storage capacity. There is no downtime when expanding the disk.\n\nOnly available for dedicated subscription plans hosted at Amazon Web Services (AWS) at this time.\n\n⚠️  Due to restrictions from cloud providers, it's only possible to resize the disk every 8 hours.\n\nPricing is available at [cloudamqp.com](https://www.cloudamqp.com/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\n// Instance\nconst instance = new cloudamqp.Instance(\"instance\", {\n    plan: \"squirrel-1\",\n    region: \"amazon-web-services::us-west-2\",\n    rmqVersion: \"3.10.1\",\n});\n// Resize disk with 25 extra GB\nconst resizeDisk = new cloudamqp.ExtraDiskSize(\"resizeDisk\", {\n    instanceId: instance.id,\n    extraDiskSize: 25,\n});\nconst nodes = instance.id.apply(id =\u003e cloudamqp.getNodesOutput({\n    instanceId: id,\n}));\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\n# Instance\ninstance = cloudamqp.Instance(\"instance\",\n    plan=\"squirrel-1\",\n    region=\"amazon-web-services::us-west-2\",\n    rmq_version=\"3.10.1\")\n# Resize disk with 25 extra GB\nresize_disk = cloudamqp.ExtraDiskSize(\"resizeDisk\",\n    instance_id=instance.id,\n    extra_disk_size=25)\nnodes = instance.id.apply(lambda id: cloudamqp.get_nodes_output(instance_id=id))\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Instance\n        var instance = new CloudAmqp.Instance(\"instance\", new CloudAmqp.InstanceArgs\n        {\n            Plan = \"squirrel-1\",\n            Region = \"amazon-web-services::us-west-2\",\n            RmqVersion = \"3.10.1\",\n        });\n        // Resize disk with 25 extra GB\n        var resizeDisk = new CloudAmqp.ExtraDiskSize(\"resizeDisk\", new CloudAmqp.ExtraDiskSizeArgs\n        {\n            InstanceId = instance.Id,\n            ExtraDiskSize = 25,\n        });\n        var nodes = instance.Id.Apply(id =\u003e CloudAmqp.GetNodes.Invoke(new CloudAmqp.GetNodesInvokeArgs\n        {\n            InstanceId = id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinstance, err := cloudamqp.NewInstance(ctx, \"instance\", \u0026cloudamqp.InstanceArgs{\n\t\t\tPlan:       pulumi.String(\"squirrel-1\"),\n\t\t\tRegion:     pulumi.String(\"amazon-web-services::us-west-2\"),\n\t\t\tRmqVersion: pulumi.String(\"3.10.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudamqp.NewExtraDiskSize(ctx, \"resizeDisk\", \u0026cloudamqp.ExtraDiskSizeArgs{\n\t\t\tInstanceId:    instance.ID(),\n\t\t\tExtraDiskSize: pulumi.Int(25),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNot possible to import this resource. ",
            "properties": {
                "extraDiskSize": {
                    "type": "integer",
                    "description": "Extra disk size in GB. Supported values: 25, 50, 100, 250, 500, 1000, 2000\n",
                    "language": {
                        "csharp": {
                            "name": "ExtraDiskSizeGb"
                        }
                    }
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                }
            },
            "required": [
                "extraDiskSize",
                "instanceId"
            ],
            "inputProperties": {
                "extraDiskSize": {
                    "type": "integer",
                    "description": "Extra disk size in GB. Supported values: 25, 50, 100, 250, 500, 1000, 2000\n",
                    "language": {
                        "csharp": {
                            "name": "ExtraDiskSizeGb"
                        }
                    }
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                }
            },
            "requiredInputs": [
                "extraDiskSize",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExtraDiskSize resources.\n",
                "properties": {
                    "extraDiskSize": {
                        "type": "integer",
                        "description": "Extra disk size in GB. Supported values: 25, 50, 100, 250, 500, 1000, 2000\n",
                        "language": {
                            "csharp": {
                                "name": "ExtraDiskSizeGb"
                            }
                        }
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance ID.\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/instance:Instance": {
            "description": "\n\n\n## Import\n\n`cloudamqp_instance`can be imported using CloudAMQP internal identifier.\n\n```sh\n $ pulumi import cloudamqp:index/instance:Instance instance \u003cid\u003e`\n```\n\n To retrieve the identifier for a VPC, either use [CloudAMQP customer API](https://docs.cloudamqp.com/#list-instances). Or use the data source [`cloudamqp_account`](https://registry.terraform.io/providers/cloudamqp/cloudamqp/latest/docs/data-sources/account) to list all available instances for an account. ",
            "properties": {
                "apikey": {
                    "type": "string",
                    "description": "API key needed to communicate to CloudAMQP's second API. The second API is used to manage alarms, integration and more, full description [CloudAMQP API](https://docs.cloudamqp.com/cloudamqp_api.html).\n"
                },
                "dedicated": {
                    "type": "boolean",
                    "description": "Is the instance hosted on a dedicated server\n"
                },
                "host": {
                    "type": "string",
                    "description": "The external hostname for the CloudAMQP instance.\n"
                },
                "hostInternal": {
                    "type": "string",
                    "description": "The internal hostname for the CloudAMQP instance.\n"
                },
                "keepAssociatedVpc": {
                    "type": "boolean",
                    "description": "Keep associated VPC when deleting instance, default set to false.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the CloudAMQP instance.\n"
                },
                "noDefaultAlarms": {
                    "type": "boolean",
                    "description": "Set to true to discard creating default alarms when the instance is created. Can be left out, will then use default value = false.\n"
                },
                "nodes": {
                    "type": "integer",
                    "description": "Number of nodes, 1, 3 or 5 depending on plan used.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The subscription plan. See available plans\n"
                },
                "ready": {
                    "type": "boolean",
                    "description": "Flag describing if the resource is ready\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to host the instance in. See Instance regions\n"
                },
                "rmqVersion": {
                    "type": "string",
                    "description": "The Rabbit MQ version. Can be left out, will then be set to default value used by CloudAMQP API.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more tags for the CloudAMQP instance, makes it possible to categories multiple instances in console view. Default there is no tags assigned.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The AMQP URL (uses the internal hostname if the instance was created with VPC). Has the format: `amqps://{username}:{password}@{hostname}/{vhost}`\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The virtual host used by Rabbit MQ.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The VPC ID. Use this to create your instance in an existing VPC. See available example.\n"
                },
                "vpcSubnet": {
                    "type": "string",
                    "description": "Creates a dedicated VPC subnet, shouldn't overlap with other VPC subnet, default subnet used 10.56.72.0/24.\n"
                }
            },
            "required": [
                "apikey",
                "dedicated",
                "host",
                "hostInternal",
                "name",
                "noDefaultAlarms",
                "nodes",
                "plan",
                "ready",
                "region",
                "rmqVersion",
                "url",
                "vhost",
                "vpcId",
                "vpcSubnet"
            ],
            "inputProperties": {
                "keepAssociatedVpc": {
                    "type": "boolean",
                    "description": "Keep associated VPC when deleting instance, default set to false.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the CloudAMQP instance.\n"
                },
                "noDefaultAlarms": {
                    "type": "boolean",
                    "description": "Set to true to discard creating default alarms when the instance is created. Can be left out, will then use default value = false.\n"
                },
                "nodes": {
                    "type": "integer",
                    "description": "Number of nodes, 1, 3 or 5 depending on plan used.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The subscription plan. See available plans\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to host the instance in. See Instance regions\n"
                },
                "rmqVersion": {
                    "type": "string",
                    "description": "The Rabbit MQ version. Can be left out, will then be set to default value used by CloudAMQP API.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more tags for the CloudAMQP instance, makes it possible to categories multiple instances in console view. Default there is no tags assigned.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The VPC ID. Use this to create your instance in an existing VPC. See available example.\n"
                },
                "vpcSubnet": {
                    "type": "string",
                    "description": "Creates a dedicated VPC subnet, shouldn't overlap with other VPC subnet, default subnet used 10.56.72.0/24.\n"
                }
            },
            "requiredInputs": [
                "plan",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "apikey": {
                        "type": "string",
                        "description": "API key needed to communicate to CloudAMQP's second API. The second API is used to manage alarms, integration and more, full description [CloudAMQP API](https://docs.cloudamqp.com/cloudamqp_api.html).\n"
                    },
                    "dedicated": {
                        "type": "boolean",
                        "description": "Is the instance hosted on a dedicated server\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "The external hostname for the CloudAMQP instance.\n"
                    },
                    "hostInternal": {
                        "type": "string",
                        "description": "The internal hostname for the CloudAMQP instance.\n"
                    },
                    "keepAssociatedVpc": {
                        "type": "boolean",
                        "description": "Keep associated VPC when deleting instance, default set to false.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the CloudAMQP instance.\n"
                    },
                    "noDefaultAlarms": {
                        "type": "boolean",
                        "description": "Set to true to discard creating default alarms when the instance is created. Can be left out, will then use default value = false.\n"
                    },
                    "nodes": {
                        "type": "integer",
                        "description": "Number of nodes, 1, 3 or 5 depending on plan used.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The subscription plan. See available plans\n"
                    },
                    "ready": {
                        "type": "boolean",
                        "description": "Flag describing if the resource is ready\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to host the instance in. See Instance regions\n"
                    },
                    "rmqVersion": {
                        "type": "string",
                        "description": "The Rabbit MQ version. Can be left out, will then be set to default value used by CloudAMQP API.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "One or more tags for the CloudAMQP instance, makes it possible to categories multiple instances in console view. Default there is no tags assigned.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The AMQP URL (uses the internal hostname if the instance was created with VPC). Has the format: `amqps://{username}:{password}@{hostname}/{vhost}`\n"
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The virtual host used by Rabbit MQ.\n"
                    },
                    "vpcId": {
                        "type": "integer",
                        "description": "The VPC ID. Use this to create your instance in an existing VPC. See available example.\n"
                    },
                    "vpcSubnet": {
                        "type": "string",
                        "description": "Creates a dedicated VPC subnet, shouldn't overlap with other VPC subnet, default subnet used 10.56.72.0/24.\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/integrationLog:IntegrationLog": {
            "description": "This resource allows you to create and manage third party log integrations for a CloudAMQP instance. Once configured, the logs produced will be forward to corresponding integration.\n\nOnly available for dedicated subscription plans.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n    \u003cb\u003e\n      \u003ci\u003eCloudwatch log integration\u003c/i\u003e\n    \u003c/b\u003e\n  \u003c/summary\u003e\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst cloudwatch = new cloudamqp.IntegrationLog(\"cloudwatch\", {\n    instanceId: cloudamqp_instance.instance.id,\n    accessKeyId: _var.aws_access_key_id,\n    secretAccessKey: _var.aws_secret_access_key,\n    region: _var.aws_region,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\ncloudwatch = cloudamqp.IntegrationLog(\"cloudwatch\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    access_key_id=var[\"aws_access_key_id\"],\n    secret_access_key=var[\"aws_secret_access_key\"],\n    region=var[\"aws_region\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var cloudwatch = new CloudAmqp.IntegrationLog(\"cloudwatch\", new CloudAmqp.IntegrationLogArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            AccessKeyId = @var.Aws_access_key_id,\n            SecretAccessKey = @var.Aws_secret_access_key,\n            Region = @var.Aws_region,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewIntegrationLog(ctx, \"cloudwatch\", \u0026cloudamqp.IntegrationLogArgs{\n\t\t\tInstanceId:      pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tAccessKeyId:     pulumi.Any(_var.Aws_access_key_id),\n\t\t\tSecretAccessKey: pulumi.Any(_var.Aws_secret_access_key),\n\t\t\tRegion:          pulumi.Any(_var.Aws_region),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c/details\u003e\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n    \u003cb\u003e\n      \u003ci\u003eLogentries log integration\u003c/i\u003e\n    \u003c/b\u003e\n  \u003c/summary\u003e\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst logentries = new cloudamqp.IntegrationLog(\"logentries\", {\n    instanceId: cloudamqp_instance.instance.id,\n    token: _var.logentries_token,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nlogentries = cloudamqp.IntegrationLog(\"logentries\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    token=var[\"logentries_token\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var logentries = new CloudAmqp.IntegrationLog(\"logentries\", new CloudAmqp.IntegrationLogArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Token = @var.Logentries_token,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewIntegrationLog(ctx, \"logentries\", \u0026cloudamqp.IntegrationLogArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tToken:      pulumi.Any(_var.Logentries_token),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c/details\u003e\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n    \u003cb\u003e\n      \u003ci\u003eLoggly log integration\u003c/i\u003e\n    \u003c/b\u003e\n  \u003c/summary\u003e\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst loggly = new cloudamqp.IntegrationLog(\"loggly\", {\n    instanceId: cloudamqp_instance.instance.id,\n    token: _var.loggly_token,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nloggly = cloudamqp.IntegrationLog(\"loggly\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    token=var[\"loggly_token\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var loggly = new CloudAmqp.IntegrationLog(\"loggly\", new CloudAmqp.IntegrationLogArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Token = @var.Loggly_token,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewIntegrationLog(ctx, \"loggly\", \u0026cloudamqp.IntegrationLogArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tToken:      pulumi.Any(_var.Loggly_token),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c/details\u003e\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n    \u003cb\u003e\n      \u003ci\u003ePapertrail log integration\u003c/i\u003e\n    \u003c/b\u003e\n  \u003c/summary\u003e\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst papertrail = new cloudamqp.IntegrationLog(\"papertrail\", {\n    instanceId: cloudamqp_instance.instance.id,\n    url: _var.papertrail_url,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\npapertrail = cloudamqp.IntegrationLog(\"papertrail\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    url=var[\"papertrail_url\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var papertrail = new CloudAmqp.IntegrationLog(\"papertrail\", new CloudAmqp.IntegrationLogArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Url = @var.Papertrail_url,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewIntegrationLog(ctx, \"papertrail\", \u0026cloudamqp.IntegrationLogArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tUrl:        pulumi.Any(_var.Papertrail_url),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c/details\u003e\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n    \u003cb\u003e\n      \u003ci\u003eSplunk log integration\u003c/i\u003e\n    \u003c/b\u003e\n  \u003c/summary\u003e\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst splunk = new cloudamqp.IntegrationLog(\"splunk\", {\n    instanceId: cloudamqp_instance.instance.id,\n    token: _var.splunk_token,\n    hostPort: _var.splunk_host_port,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nsplunk = cloudamqp.IntegrationLog(\"splunk\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    token=var[\"splunk_token\"],\n    host_port=var[\"splunk_host_port\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var splunk = new CloudAmqp.IntegrationLog(\"splunk\", new CloudAmqp.IntegrationLogArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Token = @var.Splunk_token,\n            HostPort = @var.Splunk_host_port,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewIntegrationLog(ctx, \"splunk\", \u0026cloudamqp.IntegrationLogArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tToken:      pulumi.Any(_var.Splunk_token),\n\t\t\tHostPort:   pulumi.Any(_var.Splunk_host_port),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c/details\u003e\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n    \u003cb\u003e\n      \u003ci\u003eDatadog log integration\u003c/i\u003e\n    \u003c/b\u003e\n  \u003c/summary\u003e\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst datadog = new cloudamqp.IntegrationLog(\"datadog\", {\n    instanceId: cloudamqp_instance.instance.id,\n    region: _var.datadog_region,\n    apiKey: _var.datadog_api_key,\n    tags: _var.datadog_tags,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\ndatadog = cloudamqp.IntegrationLog(\"datadog\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    region=var[\"datadog_region\"],\n    api_key=var[\"datadog_api_key\"],\n    tags=var[\"datadog_tags\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var datadog = new CloudAmqp.IntegrationLog(\"datadog\", new CloudAmqp.IntegrationLogArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Region = @var.Datadog_region,\n            ApiKey = @var.Datadog_api_key,\n            Tags = @var.Datadog_tags,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewIntegrationLog(ctx, \"datadog\", \u0026cloudamqp.IntegrationLogArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tRegion:     pulumi.Any(_var.Datadog_region),\n\t\t\tApiKey:     pulumi.Any(_var.Datadog_api_key),\n\t\t\tTags:       pulumi.Any(_var.Datadog_tags),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c/details\u003e\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n    \u003cb\u003e\n      \u003ci\u003eStackdriver log integration\u003c/i\u003e\n    \u003c/b\u003e\n  \u003c/summary\u003e\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst stackdriver = new cloudamqp.IntegrationLog(\"stackdriver\", {\n    instanceId: cloudamqp_instance.instance.id,\n    projectId: _var.stackdriver_project_id,\n    privateKey: _var.stackdriver_private_key,\n    clientEmail: _var.stackdriver_client_email,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nstackdriver = cloudamqp.IntegrationLog(\"stackdriver\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    project_id=var[\"stackdriver_project_id\"],\n    private_key=var[\"stackdriver_private_key\"],\n    client_email=var[\"stackdriver_client_email\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var stackdriver = new CloudAmqp.IntegrationLog(\"stackdriver\", new CloudAmqp.IntegrationLogArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            ProjectId = @var.Stackdriver_project_id,\n            PrivateKey = @var.Stackdriver_private_key,\n            ClientEmail = @var.Stackdriver_client_email,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewIntegrationLog(ctx, \"stackdriver\", \u0026cloudamqp.IntegrationLogArgs{\n\t\t\tInstanceId:  pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tProjectId:   pulumi.Any(_var.Stackdriver_project_id),\n\t\t\tPrivateKey:  pulumi.Any(_var.Stackdriver_private_key),\n\t\t\tClientEmail: pulumi.Any(_var.Stackdriver_client_email),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c/details\u003e\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n    \u003cb\u003e\n      \u003ci\u003eScalyr log integration\u003c/i\u003e\n    \u003c/b\u003e\n  \u003c/summary\u003e\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst scalyr = new cloudamqp.IntegrationLog(\"scalyr\", {\n    instanceId: cloudamqp_instance.instance.id,\n    token: _var.scalyr_token,\n    host: _var.scalyr_host,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nscalyr = cloudamqp.IntegrationLog(\"scalyr\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    token=var[\"scalyr_token\"],\n    host=var[\"scalyr_host\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var scalyr = new CloudAmqp.IntegrationLog(\"scalyr\", new CloudAmqp.IntegrationLogArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Token = @var.Scalyr_token,\n            Host = @var.Scalyr_host,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewIntegrationLog(ctx, \"scalyr\", \u0026cloudamqp.IntegrationLogArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tToken:      pulumi.Any(_var.Scalyr_token),\n\t\t\tHost:       pulumi.Any(_var.Scalyr_host),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c/details\u003e\n{{% /example %}}\n{{% /examples %}}\n## Argument Reference (cloudwatchlog)\n\nCloudwatch argument reference and example. Create an IAM user with programmatic access and the following permissions:\n\n* CreateLogGroup\n* CreateLogStream\n* DescribeLogGroups\n* DescribeLogStreams\n* PutLogEvents\n\n## Integration service reference\n\nValid names for third party log integration.\n\n| Name       | Description |\n|------------|---------------------------------------------------------------|\n| cloudwatchlog | Create a IAM with programmatic access. |\n| logentries | Create a Logentries token at https://logentries.com/app#/add-log/manual  |\n| loggly     | Create a Loggly token at https://your-company}.loggly.com/tokens |\n| papertrail | Create a Papertrail endpoint https://papertrailapp.com/systems/setup |\n| splunk     | Create a HTTP Event Collector token at https://.cloud.splunk.com/en-US/manager/search/http-eventcollector |\n| datadog       | Create a Datadog API key at app.datadoghq.com |\n| stackdriver   | Create a service account and add 'monitor metrics writer' role, then download credentials. |\n| scalyr        | Create a Log write token at https://app.scalyr.com/keys |\n\n## Integration Type reference\n\nValid arguments for third party log integrations.\n\nRequired arguments for all integrations: name\n\n| Name | Type | Required arguments |\n| ---- | ---- | ---- |\n| CloudWatch | cloudwatchlog | access_key_id, secret_access_key, region |\n| Log Entries | logentries | token |\n| Loggly | loggly | token |\n| Papertrail | papertrail | url |\n| Splunk | splunk | token, host_port |\n| Data Dog | datadog | region, api_keys, tags |\n| Stackdriver | stackdriver | project_id, private_key, client_email |\n| Scalyr | scalyr | token, host |\n\n## Dependency\n\nThis resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n\n\n## Import\n\n`cloudamqp_integration_log`can be imported using the resource identifier together with CloudAMQP instance identifier. The name and identifier are CSV separated, see example below.\n\n```sh\n $ pulumi import cloudamqp:index/integrationLog:IntegrationLog \u003cresource_name\u003e \u003cid\u003e,\u003cinstance_id\u003e`\n```\n\n ",
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "AWS access key identifier.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key.\n"
                },
                "clientEmail": {
                    "type": "string",
                    "description": "The client email registered for the integration service.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host for Scalyr integration. (app.scalyr.com, app.eu.scalyr.com)\n"
                },
                "hostPort": {
                    "type": "string",
                    "description": "Destination to send the logs.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier used to make proxy calls\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the third party log integration. See\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private access key.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project identifier.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region hosting the integration service.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "AWS secret access key.\n"
                },
                "tags": {
                    "type": "string",
                    "description": "Tag the integration, e.g. env=prod, region=europe.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token used for authentication.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Endpoint to log integration.\n"
                }
            },
            "required": [
                "instanceId",
                "name"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "AWS access key identifier.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key.\n"
                },
                "clientEmail": {
                    "type": "string",
                    "description": "The client email registered for the integration service.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host for Scalyr integration. (app.scalyr.com, app.eu.scalyr.com)\n"
                },
                "hostPort": {
                    "type": "string",
                    "description": "Destination to send the logs.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier used to make proxy calls\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the third party log integration. See\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private access key.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project identifier.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region hosting the integration service.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "AWS secret access key.\n"
                },
                "tags": {
                    "type": "string",
                    "description": "Tag the integration, e.g. env=prod, region=europe.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token used for authentication.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Endpoint to log integration.\n"
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IntegrationLog resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "AWS access key identifier.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "The API key.\n"
                    },
                    "clientEmail": {
                        "type": "string",
                        "description": "The client email registered for the integration service.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "The host for Scalyr integration. (app.scalyr.com, app.eu.scalyr.com)\n"
                    },
                    "hostPort": {
                        "type": "string",
                        "description": "Destination to send the logs.\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "Instance identifier used to make proxy calls\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the third party log integration. See\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The private access key.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project identifier.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region hosting the integration service.\n"
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "description": "AWS secret access key.\n"
                    },
                    "tags": {
                        "type": "string",
                        "description": "Tag the integration, e.g. env=prod, region=europe.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Token used for authentication.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Endpoint to log integration.\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/integrationMetric:IntegrationMetric": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "AWS access key identifier. (Cloudwatch)\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key for the integration service. (Librato)\n"
                },
                "clientEmail": {
                    "type": "string",
                    "description": "The client email. (Stackdriver)\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address registred for the integration service. (Librato)\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "licenseKey": {
                    "type": "string",
                    "description": "The license key registred for the integration service. (New Relic)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of metrics integration\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key. (Stackdriver)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID. (Stackdriver)\n"
                },
                "queueAllowlist": {
                    "type": "string",
                    "description": "(optional) allowlist using regular expression\n"
                },
                "queueWhitelist": {
                    "type": "string",
                    "description": "**Deprecated**\n",
                    "deprecationMessage": "use queue_allowlist instead"
                },
                "region": {
                    "type": "string",
                    "description": "AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "AWS secret key. (Cloudwatch)\n"
                },
                "tags": {
                    "type": "string",
                    "description": "(optional) tags. E.g. env=prod,region=europe\n"
                },
                "vhostAllowlist": {
                    "type": "string",
                    "description": "(optional) allowlist using regular expression\n"
                },
                "vhostWhitelist": {
                    "type": "string",
                    "description": "**Deprecated**\n",
                    "deprecationMessage": "use vhost_allowlist instead"
                }
            },
            "required": [
                "instanceId",
                "name"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "AWS access key identifier. (Cloudwatch)\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key for the integration service. (Librato)\n"
                },
                "clientEmail": {
                    "type": "string",
                    "description": "The client email. (Stackdriver)\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address registred for the integration service. (Librato)\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "Instance identifier\n"
                },
                "licenseKey": {
                    "type": "string",
                    "description": "The license key registred for the integration service. (New Relic)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of metrics integration\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key. (Stackdriver)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID. (Stackdriver)\n"
                },
                "queueAllowlist": {
                    "type": "string",
                    "description": "(optional) allowlist using regular expression\n"
                },
                "queueWhitelist": {
                    "type": "string",
                    "description": "**Deprecated**\n",
                    "deprecationMessage": "use queue_allowlist instead"
                },
                "region": {
                    "type": "string",
                    "description": "AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "AWS secret key. (Cloudwatch)\n"
                },
                "tags": {
                    "type": "string",
                    "description": "(optional) tags. E.g. env=prod,region=europe\n"
                },
                "vhostAllowlist": {
                    "type": "string",
                    "description": "(optional) allowlist using regular expression\n"
                },
                "vhostWhitelist": {
                    "type": "string",
                    "description": "**Deprecated**\n",
                    "deprecationMessage": "use vhost_allowlist instead"
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IntegrationMetric resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "AWS access key identifier. (Cloudwatch)\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "The API key for the integration service. (Librato)\n"
                    },
                    "clientEmail": {
                        "type": "string",
                        "description": "The client email. (Stackdriver)\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address registred for the integration service. (Librato)\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "Instance identifier\n"
                    },
                    "licenseKey": {
                        "type": "string",
                        "description": "The license key registred for the integration service. (New Relic)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of metrics integration\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The private key. (Stackdriver)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project ID. (Stackdriver)\n"
                    },
                    "queueAllowlist": {
                        "type": "string",
                        "description": "(optional) allowlist using regular expression\n"
                    },
                    "queueWhitelist": {
                        "type": "string",
                        "description": "**Deprecated**\n",
                        "deprecationMessage": "use queue_allowlist instead"
                    },
                    "region": {
                        "type": "string",
                        "description": "AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)\n"
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "description": "AWS secret key. (Cloudwatch)\n"
                    },
                    "tags": {
                        "type": "string",
                        "description": "(optional) tags. E.g. env=prod,region=europe\n"
                    },
                    "vhostAllowlist": {
                        "type": "string",
                        "description": "(optional) allowlist using regular expression\n"
                    },
                    "vhostWhitelist": {
                        "type": "string",
                        "description": "**Deprecated**\n",
                        "deprecationMessage": "use vhost_allowlist instead"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/nodeActions:NodeActions": {
            "description": "This resource allows you to invoke actions on a specific node.\n\nOnly available for dedicated subscription plans.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n    \u003cb\u003e\n      \u003ci\u003eAlready know the node identifier (e.g. from state file)\u003c/i\u003e\n    \u003c/b\u003e\n  \u003c/summary\u003e\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\n// New recipient to receieve notifications\nconst nodeAction = new cloudamqp.NodeActions(\"nodeAction\", {\n    instanceId: cloudamqp_instance.instance.id,\n    nodeName: \"\u003cnode name\u003e\",\n    action: \"restart\",\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\n# New recipient to receieve notifications\nnode_action = cloudamqp.NodeActions(\"nodeAction\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    node_name=\"\u003cnode name\u003e\",\n    action=\"restart\")\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // New recipient to receieve notifications\n        var nodeAction = new CloudAmqp.NodeActions(\"nodeAction\", new CloudAmqp.NodeActionsArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            NodeName = \"\u003cnode name\u003e\",\n            Action = \"restart\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewNodeActions(ctx, \"nodeAction\", \u0026cloudamqp.NodeActionsArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tNodeName:   pulumi.String(\"\u003cnode name\u003e\"),\n\t\t\tAction:     pulumi.String(\"restart\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c/details\u003e\n\nUsing data source `cloudamqp.getNodes` to restart RabbitMQ on all nodes.\u003c/br\u003e\n***Note: RabbitMQ restart on multiple nodes need to be chained, so one node restart at the time.***\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n    \u003cb\u003e\n      \u003ci\u003eMulti node RabbitMQ restart\u003c/i\u003e\n    \u003c/b\u003e\n  \u003c/summary\u003e\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst listNodes = cloudamqp.getNodes({\n    instanceId: cloudamqp_instance.instance.id,\n});\nconst restart01 = new cloudamqp.NodeActions(\"restart01\", {\n    instanceId: cloudamqp_instance.instance.id,\n    action: \"restart\",\n    nodeName: listNodes.then(listNodes =\u003e listNodes.nodes?[0]?.name),\n});\nconst restart02 = new cloudamqp.NodeActions(\"restart02\", {\n    instanceId: cloudamqp_instance.instance.id,\n    action: \"restart\",\n    nodeName: listNodes.then(listNodes =\u003e listNodes.nodes?[1]?.name),\n}, {\n    dependsOn: [restart01],\n});\nconst restart03 = new cloudamqp.NodeActions(\"restart03\", {\n    instanceId: cloudamqp_instance.instance.id,\n    action: \"restart\",\n    nodeName: listNodes.then(listNodes =\u003e listNodes.nodes?[2]?.name),\n}, {\n    dependsOn: [\n        restart01,\n        restart02,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nlist_nodes = cloudamqp.get_nodes(instance_id=cloudamqp_instance[\"instance\"][\"id\"])\nrestart01 = cloudamqp.NodeActions(\"restart01\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    action=\"restart\",\n    node_name=list_nodes.nodes[0].name)\nrestart02 = cloudamqp.NodeActions(\"restart02\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    action=\"restart\",\n    node_name=list_nodes.nodes[1].name,\n    opts=pulumi.ResourceOptions(depends_on=[restart01]))\nrestart03 = cloudamqp.NodeActions(\"restart03\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    action=\"restart\",\n    node_name=list_nodes.nodes[2].name,\n    opts=pulumi.ResourceOptions(depends_on=[\n            restart01,\n            restart02,\n        ]))\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var listNodes = Output.Create(CloudAmqp.GetNodes.InvokeAsync(new CloudAmqp.GetNodesArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        }));\n        var restart01 = new CloudAmqp.NodeActions(\"restart01\", new CloudAmqp.NodeActionsArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Action = \"restart\",\n            NodeName = listNodes.Apply(listNodes =\u003e listNodes.Nodes?[0]?.Name),\n        });\n        var restart02 = new CloudAmqp.NodeActions(\"restart02\", new CloudAmqp.NodeActionsArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Action = \"restart\",\n            NodeName = listNodes.Apply(listNodes =\u003e listNodes.Nodes?[1]?.Name),\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                restart01,\n            },\n        });\n        var restart03 = new CloudAmqp.NodeActions(\"restart03\", new CloudAmqp.NodeActionsArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Action = \"restart\",\n            NodeName = listNodes.Apply(listNodes =\u003e listNodes.Nodes?[2]?.Name),\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                restart01,\n                restart02,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlistNodes, err := cloudamqp.GetNodes(ctx, \u0026GetNodesArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\trestart01, err := cloudamqp.NewNodeActions(ctx, \"restart01\", \u0026cloudamqp.NodeActionsArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tAction:     pulumi.String(\"restart\"),\n\t\t\tNodeName:   pulumi.String(listNodes.Nodes[0].Name),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\trestart02, err := cloudamqp.NewNodeActions(ctx, \"restart02\", \u0026cloudamqp.NodeActionsArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tAction:     pulumi.String(\"restart\"),\n\t\t\tNodeName:   pulumi.String(listNodes.Nodes[1].Name),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\trestart01,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudamqp.NewNodeActions(ctx, \"restart03\", \u0026cloudamqp.NodeActionsArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tAction:     pulumi.String(\"restart\"),\n\t\t\tNodeName:   pulumi.String(listNodes.Nodes[2].Name),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\trestart01,\n\t\t\trestart02,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c/details\u003e\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n    \u003cb\u003e\n      \u003ci\u003eCombine log level configuration change with multi node RabbitMQ restart\u003c/i\u003e\n    \u003c/b\u003e\n  \u003c/summary\u003e\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst listNodes = cloudamqp.getNodes({\n    instanceId: cloudamqp_instance.instance.id,\n});\nconst rabbitmqConfig = new cloudamqp.RabbitConfiguration(\"rabbitmqConfig\", {\n    instanceId: cloudamqp_instance.instance.id,\n    logExchangeLevel: \"info\",\n});\nconst restart01 = new cloudamqp.NodeActions(\"restart01\", {\n    instanceId: cloudamqp_instance.instance.id,\n    action: \"restart\",\n    nodeName: listNodes.then(listNodes =\u003e listNodes.nodes?[0]?.name),\n}, {\n    dependsOn: [rabbitmqConfig],\n});\nconst restart02 = new cloudamqp.NodeActions(\"restart02\", {\n    instanceId: cloudamqp_instance.instance.id,\n    action: \"restart\",\n    nodeName: listNodes.then(listNodes =\u003e listNodes.nodes?[1]?.name),\n}, {\n    dependsOn: [\n        rabbitmqConfig,\n        restart01,\n    ],\n});\nconst restart03 = new cloudamqp.NodeActions(\"restart03\", {\n    instanceId: cloudamqp_instance.instance.id,\n    action: \"restart\",\n    nodeName: listNodes.then(listNodes =\u003e listNodes.nodes?[2]?.name),\n}, {\n    dependsOn: [\n        rabbitmqConfig,\n        restart01,\n        restart02,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nlist_nodes = cloudamqp.get_nodes(instance_id=cloudamqp_instance[\"instance\"][\"id\"])\nrabbitmq_config = cloudamqp.RabbitConfiguration(\"rabbitmqConfig\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    log_exchange_level=\"info\")\nrestart01 = cloudamqp.NodeActions(\"restart01\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    action=\"restart\",\n    node_name=list_nodes.nodes[0].name,\n    opts=pulumi.ResourceOptions(depends_on=[rabbitmq_config]))\nrestart02 = cloudamqp.NodeActions(\"restart02\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    action=\"restart\",\n    node_name=list_nodes.nodes[1].name,\n    opts=pulumi.ResourceOptions(depends_on=[\n            rabbitmq_config,\n            restart01,\n        ]))\nrestart03 = cloudamqp.NodeActions(\"restart03\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    action=\"restart\",\n    node_name=list_nodes.nodes[2].name,\n    opts=pulumi.ResourceOptions(depends_on=[\n            rabbitmq_config,\n            restart01,\n            restart02,\n        ]))\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var listNodes = Output.Create(CloudAmqp.GetNodes.InvokeAsync(new CloudAmqp.GetNodesArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        }));\n        var rabbitmqConfig = new CloudAmqp.RabbitConfiguration(\"rabbitmqConfig\", new CloudAmqp.RabbitConfigurationArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            LogExchangeLevel = \"info\",\n        });\n        var restart01 = new CloudAmqp.NodeActions(\"restart01\", new CloudAmqp.NodeActionsArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Action = \"restart\",\n            NodeName = listNodes.Apply(listNodes =\u003e listNodes.Nodes?[0]?.Name),\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                rabbitmqConfig,\n            },\n        });\n        var restart02 = new CloudAmqp.NodeActions(\"restart02\", new CloudAmqp.NodeActionsArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Action = \"restart\",\n            NodeName = listNodes.Apply(listNodes =\u003e listNodes.Nodes?[1]?.Name),\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                rabbitmqConfig,\n                restart01,\n            },\n        });\n        var restart03 = new CloudAmqp.NodeActions(\"restart03\", new CloudAmqp.NodeActionsArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Action = \"restart\",\n            NodeName = listNodes.Apply(listNodes =\u003e listNodes.Nodes?[2]?.Name),\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                rabbitmqConfig,\n                restart01,\n                restart02,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlistNodes, err := cloudamqp.GetNodes(ctx, \u0026GetNodesArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\trabbitmqConfig, err := cloudamqp.NewRabbitConfiguration(ctx, \"rabbitmqConfig\", \u0026cloudamqp.RabbitConfigurationArgs{\n\t\t\tInstanceId:       pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tLogExchangeLevel: pulumi.String(\"info\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\trestart01, err := cloudamqp.NewNodeActions(ctx, \"restart01\", \u0026cloudamqp.NodeActionsArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tAction:     pulumi.String(\"restart\"),\n\t\t\tNodeName:   pulumi.String(listNodes.Nodes[0].Name),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\trabbitmqConfig,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\trestart02, err := cloudamqp.NewNodeActions(ctx, \"restart02\", \u0026cloudamqp.NodeActionsArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tAction:     pulumi.String(\"restart\"),\n\t\t\tNodeName:   pulumi.String(listNodes.Nodes[1].Name),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\trabbitmqConfig,\n\t\t\trestart01,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudamqp.NewNodeActions(ctx, \"restart03\", \u0026cloudamqp.NodeActionsArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tAction:     pulumi.String(\"restart\"),\n\t\t\tNodeName:   pulumi.String(listNodes.Nodes[2].Name),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\trabbitmqConfig,\n\t\t\trestart01,\n\t\t\trestart02,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c/details\u003e\n{{% /example %}}\n{{% /examples %}}\n## Action reference\n\nValid options for action.\n\n| Action       | Info                               |\n|--------------|------------------------------------|\n| start        | Start RabbitMQ                     |\n| stop         | Stop RabbitMQ                      |\n| restart      | Restart RabbitMQ                   |\n| reboot       | Reboot the node                    |\n| mgmt.restart | Restart the RabbitMQ mgmt interace |\n\n## Dependency\n\nThis resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id` and node name.\n\n\n## Import\n\nThis resource cannot be imported. ",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to invoke on the node.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The node name, e.g `green-guinea-pig-01`.\n"
                },
                "running": {
                    "type": "boolean",
                    "description": "If the node is running.\n"
                }
            },
            "required": [
                "action",
                "instanceId",
                "nodeName",
                "running"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "The action to invoke on the node.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The node name, e.g `green-guinea-pig-01`.\n"
                }
            },
            "requiredInputs": [
                "action",
                "instanceId",
                "nodeName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NodeActions resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The action to invoke on the node.\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance ID.\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "The node name, e.g `green-guinea-pig-01`.\n"
                    },
                    "running": {
                        "type": "boolean",
                        "description": "If the node is running.\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/notification:Notification": {
            "description": "This resource allows you to create and manage recipients to receive alarm notifications. There will always be a default recipient created upon instance creation. This recipient will use team email and receive notifications from default alarms.\n\nAvailable for all subscription plans.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\n// New recipient to receieve notifications\nconst recipient01 = new cloudamqp.Notification(\"recipient01\", {\n    instanceId: cloudamqp_instance.instance.id,\n    type: \"email\",\n    value: \"alarm@example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\n# New recipient to receieve notifications\nrecipient01 = cloudamqp.Notification(\"recipient01\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    type=\"email\",\n    value=\"alarm@example.com\")\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // New recipient to receieve notifications\n        var recipient01 = new CloudAmqp.Notification(\"recipient01\", new CloudAmqp.NotificationArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Type = \"email\",\n            Value = \"alarm@example.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewNotification(ctx, \"recipient01\", \u0026cloudamqp.NotificationArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tType:       pulumi.String(\"email\"),\n\t\t\tValue:      pulumi.String(\"alarm@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Notification Type reference\n\nValid options for notification type.\n\n* email\n* webhook\n* pagerduty\n* victorops\n* opsgenie\n* opsgenie-eu\n* slack\n* teams\n\n## Dependency\n\nThis resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n\n\n## Import\n\n`cloudamqp_notification` can be imported using CloudAMQP internal identifier of a recipient together (CSV separated) with the instance identifier. To retrieve the identifier of a recipient, use [CloudAMQP API](https://docs.cloudamqp.com/cloudamqp_api.html#list-notification-recipients)\n\n```sh\n $ pulumi import cloudamqp:index/notification:Notification recipient \u003cid\u003e,\u003cinstance_id\u003e`\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the recipient.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the notification. See valid options below.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Endpoint to send the notification.\n"
                }
            },
            "required": [
                "instanceId",
                "name",
                "type",
                "value"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the recipient.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the notification. See valid options below.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Endpoint to send the notification.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "type",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Notification resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the recipient.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the notification. See valid options below.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Endpoint to send the notification.\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/plugin:Plugin": {
            "description": "This resource allows you to enable or disable Rabbit MQ plugins.\n\nOnly available for dedicated subscription plans.\n\n⚠️  From our go API wrapper [v1.4.0](https://github.com/84codes/go-api/releases/tag/v1.4.0) there is support for multiple retries when requesting information about plugins. This was introduced to avoid `ReadPlugin error 400: Timeout talking to backend`.\n\n**Enable multiple plugins:** Rabbit MQ can only change one plugin at a time. It will fail if multiple plugins resources are used, unless by creating dependencies with `depend_on` between the resources. Once one plugin has been enabled, the other will continue. See example below.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst rabbitmqTop = new cloudamqp.Plugin(\"rabbitmqTop\", {\n    instanceId: cloudamqp_instance.instance.id,\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nrabbitmq_top = cloudamqp.Plugin(\"rabbitmqTop\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    enabled=True)\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var rabbitmqTop = new CloudAmqp.Plugin(\"rabbitmqTop\", new CloudAmqp.PluginArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Enabled = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewPlugin(ctx, \"rabbitmqTop\", \u0026cloudamqp.PluginArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tEnabled:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n**Enable multiple plugins**\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst rabbitmqTop = new cloudamqp.Plugin(\"rabbitmqTop\", {\n    instanceId: cloudamqp_instance.instance.id,\n    enabled: true,\n});\nconst rabbitmqAmqp10 = new cloudamqp.Plugin(\"rabbitmqAmqp10\", {\n    instanceId: cloudamqp_instance.instance.id,\n    enabled: true,\n}, {\n    dependsOn: [rabbitmqTop],\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nrabbitmq_top = cloudamqp.Plugin(\"rabbitmqTop\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    enabled=True)\nrabbitmq_amqp10 = cloudamqp.Plugin(\"rabbitmqAmqp10\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    enabled=True,\n    opts=pulumi.ResourceOptions(depends_on=[rabbitmq_top]))\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var rabbitmqTop = new CloudAmqp.Plugin(\"rabbitmqTop\", new CloudAmqp.PluginArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Enabled = true,\n        });\n        var rabbitmqAmqp10 = new CloudAmqp.Plugin(\"rabbitmqAmqp10\", new CloudAmqp.PluginArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Enabled = true,\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                rabbitmqTop,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trabbitmqTop, err := cloudamqp.NewPlugin(ctx, \"rabbitmqTop\", \u0026cloudamqp.PluginArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tEnabled:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudamqp.NewPlugin(ctx, \"rabbitmqAmqp10\", \u0026cloudamqp.PluginArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tEnabled:    pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\trabbitmqTop,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Dependency\n\nThis resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n\nIf multiple plugins should be enable, create dependencies between the plugin resources. See example above.\n\n\n## Import\n\n`cloudamqp_plugin` can be imported using the name argument of the resource together with CloudAMQP instance identifier. The name and identifier are CSV separated, see example below.\n\n```sh\n $ pulumi import cloudamqp:index/plugin:Plugin rabbitmq_management rabbitmq_management,\u003cinstance_id\u003e`\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the plugins.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Rabbit MQ plugin.\n"
                }
            },
            "required": [
                "enabled",
                "instanceId",
                "name"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the plugins.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Rabbit MQ plugin.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Plugin resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable or disable the plugins.\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Rabbit MQ plugin.\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/pluginCommunity:PluginCommunity": {
            "description": "This resource allows you to install or uninstall community plugins. Once installed the plugin will be available in `cloudamqp.Plugin`.\n\nOnly available for dedicated subscription plans.\n\n⚠️  From our go API wrapper [v1.5.0](https://github.com/84codes/go-api/releases/tag/v1.5.0) there is support for multiple retries when requesting information about community plugins. This was introduced to avoid `ReadPluginCommunity error 400: Timeout talking to backend`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst rabbitmqDelayedMessageExchange = new cloudamqp.PluginCommunity(\"rabbitmqDelayedMessageExchange\", {\n    instanceId: cloudamqp_instance.instance_01.id,\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nrabbitmq_delayed_message_exchange = cloudamqp.PluginCommunity(\"rabbitmqDelayedMessageExchange\",\n    instance_id=cloudamqp_instance[\"instance_01\"][\"id\"],\n    enabled=True)\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var rabbitmqDelayedMessageExchange = new CloudAmqp.PluginCommunity(\"rabbitmqDelayedMessageExchange\", new CloudAmqp.PluginCommunityArgs\n        {\n            InstanceId = cloudamqp_instance.Instance_01.Id,\n            Enabled = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewPluginCommunity(ctx, \"rabbitmqDelayedMessageExchange\", \u0026cloudamqp.PluginCommunityArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance_01.Id),\n\t\t\tEnabled:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Depedency\n\nThis resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n\n\n## Import\n\n`cloudamqp_plugin` can be imported using the name argument of the resource together with CloudAMQP instance identifier. The name and identifier are CSV separated, see example below.\n\n```sh\n $ pulumi import cloudamqp:index/pluginCommunity:PluginCommunity \u003cresource_name\u003e \u003cplugin_name\u003e,\u003cinstance_id\u003e`\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the plugins.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Rabbit MQ community plugin.\n"
                }
            },
            "required": [
                "enabled",
                "instanceId",
                "name"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the plugins.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Rabbit MQ community plugin.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PluginCommunity resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable or disable the plugins.\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Rabbit MQ community plugin.\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/rabbitConfiguration:RabbitConfiguration": {
            "description": "This resource allows you update RabbitMQ config.\n\nOnly available for dedicated subscription plans.\n\n## Argument threshold values\n\n| Argument | Type | Default | Min | Max | Unit | Affect | Note |\n|---|---|---|---|---|---|---|---|\n| heartbeat | int | 120 | 0 | - |  | Only effects new connections |  |\n| connection_max | int | -1 | 1 | - |  | RabbitMQ restart required | -1 in the provider corresponds to INFINITY in the RabbitMQ config |\n| channel_max | int | 128 | 0 | - |  | Only effects new connections |  |\n| consumer_timeout | int | 7200000 | 10000 | 86400000 | milliseconds | Only effects new channels | -1 in the provider corresponds to false (disable) in the RabbitMQ config |\n| vm_memory_high_watermark | float | 0.81 | 0.4 | 0.9 |  | Applied immediately |  |\n| queue_index_embed_msgs_below | int | 4096 | 1 | 10485760 | bytes | Applied immediately for new queues, requires restart for existing queues |  |\n| max_message_size | int | 134217728 | 1 | 536870912 | bytes | Only effects new channels |  |\n| log_exchange_level | string | error | - | - |  | RabbitMQ restart required | debug, info, warning, error, critical |\n\n## Dependency\n\nThis resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n\n\n## Import\n\n`cloudamqp_rabbitmq_configuration` can be imported using the CloudAMQP instance identifier.\n\n```sh\n $ pulumi import cloudamqp:index/rabbitConfiguration:RabbitConfiguration config \u003cinstance_id\u003e`\n```\n\n ",
            "properties": {
                "channelMax": {
                    "type": "integer",
                    "description": "Set the maximum permissible number of channels per connection.\n"
                },
                "connectionMax": {
                    "type": "integer",
                    "description": "Set the maximum permissible number of connection.\n"
                },
                "consumerTimeout": {
                    "type": "integer",
                    "description": "A consumer that has recevied a message and does not acknowledge that message within the timeout in milliseconds\n"
                },
                "heartbeat": {
                    "type": "integer",
                    "description": "Set the server AMQP 0-9-1 heartbeat timeout in seconds.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "logExchangeLevel": {
                    "type": "string",
                    "description": "Log level for the logger used for log integrations and the CloudAMQP Console log view.\n"
                },
                "maxMessageSize": {
                    "type": "integer",
                    "description": "The largest allowed message payload size in bytes.\n"
                },
                "queueIndexEmbedMsgsBelow": {
                    "type": "integer",
                    "description": "Size in bytes below which to embed messages in the queue index.\n"
                },
                "vmMemoryHighWatermark": {
                    "type": "number",
                    "description": "When the server will enter memory based flow-control as relative to the maximum available memory.\n"
                }
            },
            "required": [
                "instanceId"
            ],
            "inputProperties": {
                "channelMax": {
                    "type": "integer",
                    "description": "Set the maximum permissible number of channels per connection.\n"
                },
                "connectionMax": {
                    "type": "integer",
                    "description": "Set the maximum permissible number of connection.\n"
                },
                "consumerTimeout": {
                    "type": "integer",
                    "description": "A consumer that has recevied a message and does not acknowledge that message within the timeout in milliseconds\n"
                },
                "heartbeat": {
                    "type": "integer",
                    "description": "Set the server AMQP 0-9-1 heartbeat timeout in seconds.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "logExchangeLevel": {
                    "type": "string",
                    "description": "Log level for the logger used for log integrations and the CloudAMQP Console log view.\n"
                },
                "maxMessageSize": {
                    "type": "integer",
                    "description": "The largest allowed message payload size in bytes.\n"
                },
                "queueIndexEmbedMsgsBelow": {
                    "type": "integer",
                    "description": "Size in bytes below which to embed messages in the queue index.\n"
                },
                "vmMemoryHighWatermark": {
                    "type": "number",
                    "description": "When the server will enter memory based flow-control as relative to the maximum available memory.\n"
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RabbitConfiguration resources.\n",
                "properties": {
                    "channelMax": {
                        "type": "integer",
                        "description": "Set the maximum permissible number of channels per connection.\n"
                    },
                    "connectionMax": {
                        "type": "integer",
                        "description": "Set the maximum permissible number of connection.\n"
                    },
                    "consumerTimeout": {
                        "type": "integer",
                        "description": "A consumer that has recevied a message and does not acknowledge that message within the timeout in milliseconds\n"
                    },
                    "heartbeat": {
                        "type": "integer",
                        "description": "Set the server AMQP 0-9-1 heartbeat timeout in seconds.\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance ID.\n"
                    },
                    "logExchangeLevel": {
                        "type": "string",
                        "description": "Log level for the logger used for log integrations and the CloudAMQP Console log view.\n"
                    },
                    "maxMessageSize": {
                        "type": "integer",
                        "description": "The largest allowed message payload size in bytes.\n"
                    },
                    "queueIndexEmbedMsgsBelow": {
                        "type": "integer",
                        "description": "Size in bytes below which to embed messages in the queue index.\n"
                    },
                    "vmMemoryHighWatermark": {
                        "type": "number",
                        "description": "When the server will enter memory based flow-control as relative to the maximum available memory.\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/securityFirewall:SecurityFirewall": {
            "description": "\n\n\n## Import\n\n`cloudamqp_security_firewall` can be imported using CloudAMQP instance identifier.\n\n```sh\n $ pulumi import cloudamqp:index/securityFirewall:SecurityFirewall firewall \u003cinstance_id\u003e`\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cloudamqp:index/SecurityFirewallRule:SecurityFirewallRule"
                    },
                    "description": "An array of rules, minimum of 1 needs to be configured. Each `rules` block consists of the field documented below.\n"
                }
            },
            "required": [
                "instanceId",
                "rules"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cloudamqp:index/SecurityFirewallRule:SecurityFirewallRule"
                    },
                    "description": "An array of rules, minimum of 1 needs to be configured. Each `rules` block consists of the field documented below.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityFirewall resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance ID.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:index/SecurityFirewallRule:SecurityFirewallRule"
                        },
                        "description": "An array of rules, minimum of 1 needs to be configured. Each `rules` block consists of the field documented below.\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/upgradeRabbitmq:UpgradeRabbitmq": {
            "description": "This resource allows you to automatically upgrade to latest possible upgradable versions for RabbitMQ and Erlang. Depending on initial versions of RabbitMQ and Erlang of the CloudAMQP instance. Multiple runs may be needed to get to latest versions. (E.g. after completed upgrade, check data source `cloudamqp.getUpgradableVersions` to see if newer versions is available. Then delete `cloudamqp.UpgradeRabbitmq` and create it again to invoke the upgrade.\n\n\u003e :warning: **WARNING: Before using this resource.**\n\u003e\n\u003e Auto delete queues (queues that are marked AD) will be deleted during the update.\n\u003e\n\u003e Any custom plugins support has installed on your behalf will be disabled and you need to contact support@cloudamqp.com and ask to have them re-installed.\n\u003e\n\u003e TLS 1.0 and 1.1 will not be supported after the update.\n\nOnly available for dedicated subscription plans.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst versions = cloudamqp.getUpgradableVersions({\n    instanceId: cloudamqp_instance.instance.id,\n});\n// Invoke automatically upgrade to latest possible upgradable versions for RabbitMQ and Erlang\nconst upgrade = new cloudamqp.UpgradeRabbitmq(\"upgrade\", {instanceId: cloudamqp_instance.instance.id});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nversions = cloudamqp.get_upgradable_versions(instance_id=cloudamqp_instance[\"instance\"][\"id\"])\n# Invoke automatically upgrade to latest possible upgradable versions for RabbitMQ and Erlang\nupgrade = cloudamqp.UpgradeRabbitmq(\"upgrade\", instance_id=cloudamqp_instance[\"instance\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var versions = Output.Create(CloudAmqp.GetUpgradableVersions.InvokeAsync(new CloudAmqp.GetUpgradableVersionsArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        }));\n        // Invoke automatically upgrade to latest possible upgradable versions for RabbitMQ and Erlang\n        var upgrade = new CloudAmqp.UpgradeRabbitmq(\"upgrade\", new CloudAmqp.UpgradeRabbitmqArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.GetUpgradableVersions(ctx, \u0026GetUpgradableVersionsArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudamqp.NewUpgradeRabbitmq(ctx, \"upgrade\", \u0026cloudamqp.UpgradeRabbitmqArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst versions = cloudamqp.getUpgradableVersions({\n    instanceId: cloudamqp_instance.instance.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nversions = cloudamqp.get_upgradable_versions(instance_id=cloudamqp_instance[\"instance\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var versions = Output.Create(CloudAmqp.GetUpgradableVersions.InvokeAsync(new CloudAmqp.GetUpgradableVersionsArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.GetUpgradableVersions(ctx, \u0026GetUpgradableVersionsArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nIf newer version is still available to be upgradable in the data source, re-run again.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst versions = cloudamqp.getUpgradableVersions({\n    instanceId: cloudamqp_instance.instance.id,\n});\n// Invoke automatically upgrade to latest possible upgradable versions for RabbitMQ and Erlang\nconst upgrade = new cloudamqp.UpgradeRabbitmq(\"upgrade\", {instanceId: cloudamqp_instance.instance.id});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nversions = cloudamqp.get_upgradable_versions(instance_id=cloudamqp_instance[\"instance\"][\"id\"])\n# Invoke automatically upgrade to latest possible upgradable versions for RabbitMQ and Erlang\nupgrade = cloudamqp.UpgradeRabbitmq(\"upgrade\", instance_id=cloudamqp_instance[\"instance\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var versions = Output.Create(CloudAmqp.GetUpgradableVersions.InvokeAsync(new CloudAmqp.GetUpgradableVersionsArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        }));\n        // Invoke automatically upgrade to latest possible upgradable versions for RabbitMQ and Erlang\n        var upgrade = new CloudAmqp.UpgradeRabbitmq(\"upgrade\", new CloudAmqp.UpgradeRabbitmqArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.GetUpgradableVersions(ctx, \u0026GetUpgradableVersionsArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudamqp.NewUpgradeRabbitmq(ctx, \"upgrade\", \u0026cloudamqp.UpgradeRabbitmqArgs{\n\t\t\tInstanceId: pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNot possible to import this resource. ",
            "properties": {
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance identifier\n"
                }
            },
            "required": [
                "instanceId"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance identifier\n"
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UpgradeRabbitmq resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance identifier\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/vpc:Vpc": {
            "description": "This resource allows you to manage standalone VPC.\n\nNew Cloudamqp instances can be added to the managed VPC. Set the instance *vpc_id* attribute to the managed vpc identifier , see example below, when creating the instance.\n\nOnly available for dedicated subscription plans.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\n// Managed VPC resource\nconst vpc = new cloudamqp.Vpc(\"vpc\", {\n    region: \"amazon-web-services::us-east-1\",\n    subnet: \"10.56.72.0/24\",\n    tags: [],\n});\n//  New instance, need to be created with a vpc\nconst instance = new cloudamqp.Instance(\"instance\", {\n    plan: \"bunny-1\",\n    region: \"amazon-web-services::us-east-1\",\n    nodes: 1,\n    tags: [],\n    rmqVersion: \"3.9.13\",\n    vpcId: cloudamq_vpc.vpc.id,\n});\nconst vpcInfo = cloudamqp.getVpcInfoOutput({\n    vpcId: vpc.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\n# Managed VPC resource\nvpc = cloudamqp.Vpc(\"vpc\",\n    region=\"amazon-web-services::us-east-1\",\n    subnet=\"10.56.72.0/24\",\n    tags=[])\n#  New instance, need to be created with a vpc\ninstance = cloudamqp.Instance(\"instance\",\n    plan=\"bunny-1\",\n    region=\"amazon-web-services::us-east-1\",\n    nodes=1,\n    tags=[],\n    rmq_version=\"3.9.13\",\n    vpc_id=cloudamq_vpc[\"vpc\"][\"id\"])\nvpc_info = cloudamqp.get_vpc_info_output(vpc_id=vpc.id)\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Managed VPC resource\n        var vpc = new CloudAmqp.Vpc(\"vpc\", new CloudAmqp.VpcArgs\n        {\n            Region = \"amazon-web-services::us-east-1\",\n            Subnet = \"10.56.72.0/24\",\n            Tags = {},\n        });\n        //  New instance, need to be created with a vpc\n        var instance = new CloudAmqp.Instance(\"instance\", new CloudAmqp.InstanceArgs\n        {\n            Plan = \"bunny-1\",\n            Region = \"amazon-web-services::us-east-1\",\n            Nodes = 1,\n            Tags = {},\n            RmqVersion = \"3.9.13\",\n            VpcId = cloudamq_vpc.Vpc.Id,\n        });\n        var vpcInfo = CloudAmqp.GetVpcInfo.Invoke(new CloudAmqp.GetVpcInfoInvokeArgs\n        {\n            VpcId = vpc.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvpc, err := cloudamqp.NewVpc(ctx, \"vpc\", \u0026cloudamqp.VpcArgs{\n\t\t\tRegion: pulumi.String(\"amazon-web-services::us-east-1\"),\n\t\t\tSubnet: pulumi.String(\"10.56.72.0/24\"),\n\t\t\tTags:   pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudamqp.NewInstance(ctx, \"instance\", \u0026cloudamqp.InstanceArgs{\n\t\t\tPlan:       pulumi.String(\"bunny-1\"),\n\t\t\tRegion:     pulumi.String(\"amazon-web-services::us-east-1\"),\n\t\t\tNodes:      pulumi.Int(1),\n\t\t\tTags:       pulumi.StringArray{},\n\t\t\tRmqVersion: pulumi.String(\"3.9.13\"),\n\t\t\tVpcId:      pulumi.Any(cloudamq_vpc.Vpc.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = cloudamqp.GetVpcInfoOutput(ctx, GetVpcInfoOutputArgs{\n\t\t\tVpcId: vpc.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n`cloudamqp_vpc` can be imported using the CloudAMQP VPC identifier.\n\n```sh\n $ pulumi import cloudamqp:index/vpc:Vpc \u003cresource_name\u003e \u003cvpc_id\u003e`\n```\n\n To retrieve the identifier for a VPC, either use [CloudAMQP customer API](https://docs.cloudamqp.com/#list-vpcs). Or use the data source [`cloudamqp_account_vpcs`](https://registry.terraform.io/providers/cloudamqp/cloudamqp/latest/docs/data-sources/account_vpcs) to list all available standalone VPCs for an account. ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the VPC.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The hosted region for the managed standalone VPC\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The VPC subnet\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tag the VPC with optional tags\n"
                },
                "vpcName": {
                    "type": "string",
                    "description": "VPC name given when hosted at the cloud provider\n"
                }
            },
            "required": [
                "name",
                "region",
                "subnet",
                "vpcName"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the VPC.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The hosted region for the managed standalone VPC\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The VPC subnet\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tag the VPC with optional tags\n"
                }
            },
            "requiredInputs": [
                "region",
                "subnet"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vpc resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the VPC.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The hosted region for the managed standalone VPC\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The VPC subnet\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tag the VPC with optional tags\n"
                    },
                    "vpcName": {
                        "type": "string",
                        "description": "VPC name given when hosted at the cloud provider\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/vpcGcpPeering:VpcGcpPeering": {
            "description": "\n\n\n## Import\n\nNot possible to import this resource. ",
            "properties": {
                "autoCreateRoutes": {
                    "type": "boolean",
                    "description": "VPC peering auto created routes\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance identifier.\n"
                },
                "peerNetworkUri": {
                    "type": "string",
                    "description": "Network uri of the VPC network to which you will peer with.\n"
                },
                "state": {
                    "type": "string",
                    "description": "VPC peering state\n"
                },
                "stateDetails": {
                    "type": "string",
                    "description": "VPC peering state details\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The managed VPC identifier.\n"
                }
            },
            "required": [
                "autoCreateRoutes",
                "peerNetworkUri",
                "state",
                "stateDetails"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance identifier.\n"
                },
                "peerNetworkUri": {
                    "type": "string",
                    "description": "Network uri of the VPC network to which you will peer with.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The managed VPC identifier.\n"
                }
            },
            "requiredInputs": [
                "peerNetworkUri"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcGcpPeering resources.\n",
                "properties": {
                    "autoCreateRoutes": {
                        "type": "boolean",
                        "description": "VPC peering auto created routes\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance identifier.\n"
                    },
                    "peerNetworkUri": {
                        "type": "string",
                        "description": "Network uri of the VPC network to which you will peer with.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "VPC peering state\n"
                    },
                    "stateDetails": {
                        "type": "string",
                        "description": "VPC peering state details\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The managed VPC identifier.\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/vpcPeering:VpcPeering": {
            "description": "\n\n\n## Import\n\nNot possible to import this resource. ",
            "properties": {
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance identifier.\n"
                },
                "peeringId": {
                    "type": "string",
                    "description": "Peering identifier created by AW peering request.\n"
                },
                "sleep": {
                    "type": "integer",
                    "description": "Configurable sleep time (seconds) between retries for accepting or removing peering. Default set to 60 seconds.\n"
                },
                "status": {
                    "type": "string",
                    "description": "VPC peering status\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "- Configurable timeout time (seconds) for accepting or removing peering. Default set to 3600 seconds.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The managed VPC identifier.\n"
                }
            },
            "required": [
                "peeringId",
                "status"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance identifier.\n"
                },
                "peeringId": {
                    "type": "string",
                    "description": "Peering identifier created by AW peering request.\n"
                },
                "sleep": {
                    "type": "integer",
                    "description": "Configurable sleep time (seconds) between retries for accepting or removing peering. Default set to 60 seconds.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "- Configurable timeout time (seconds) for accepting or removing peering. Default set to 3600 seconds.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The managed VPC identifier.\n"
                }
            },
            "requiredInputs": [
                "peeringId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPeering resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance identifier.\n"
                    },
                    "peeringId": {
                        "type": "string",
                        "description": "Peering identifier created by AW peering request.\n"
                    },
                    "sleep": {
                        "type": "integer",
                        "description": "Configurable sleep time (seconds) between retries for accepting or removing peering. Default set to 60 seconds.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "VPC peering status\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "- Configurable timeout time (seconds) for accepting or removing peering. Default set to 3600 seconds.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The managed VPC identifier.\n"
                    }
                },
                "type": "object"
            }
        },
        "cloudamqp:index/webhook:Webhook": {
            "description": "This resource allows you to enable or disable webhooks for a specific vhost and queue.\n\nOnly available for dedicated subscription plans.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst webhookQueue = new cloudamqp.Webhook(\"webhookQueue\", {\n    instanceId: cloudamqp_instance.instance.id,\n    vhost: \"myvhost\",\n    queue: \"webhook-queue\",\n    webhookUri: \"https://example.com/webhook?key=secret\",\n    retryInterval: 5,\n    concurrency: 5,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nwebhook_queue = cloudamqp.Webhook(\"webhookQueue\",\n    instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    vhost=\"myvhost\",\n    queue=\"webhook-queue\",\n    webhook_uri=\"https://example.com/webhook?key=secret\",\n    retry_interval=5,\n    concurrency=5)\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var webhookQueue = new CloudAmqp.Webhook(\"webhookQueue\", new CloudAmqp.WebhookArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Vhost = \"myvhost\",\n            Queue = \"webhook-queue\",\n            WebhookUri = \"https://example.com/webhook?key=secret\",\n            RetryInterval = 5,\n            Concurrency = 5,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.NewWebhook(ctx, \"webhookQueue\", \u0026cloudamqp.WebhookArgs{\n\t\t\tInstanceId:    pulumi.Any(cloudamqp_instance.Instance.Id),\n\t\t\tVhost:         pulumi.String(\"myvhost\"),\n\t\t\tQueue:         pulumi.String(\"webhook-queue\"),\n\t\t\tWebhookUri:    pulumi.String(\"https://example.com/webhook?key=secret\"),\n\t\t\tRetryInterval: pulumi.Int(5),\n\t\t\tConcurrency:   pulumi.Int(5),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Dependency\n\nThis resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n\n\n## Import\n\n`cloudamqp_webhook` can be imported using the resource identifier together with CloudAMQP instance identifier. The identifiers are CSV separated, see example below.\n\n```sh\n $ pulumi import cloudamqp:index/webhook:Webhook webhook_queue \u003cid\u003e,\u003cinstance_id\u003e`\n```\n\n ",
            "properties": {
                "concurrency": {
                    "type": "integer",
                    "description": "Max simultaneous requests to the endpoint.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "queue": {
                    "type": "string",
                    "description": "A (durable) queue on your RabbitMQ instance.\n"
                },
                "retryInterval": {
                    "type": "integer",
                    "description": "How often we retry if your endpoint fails (in seconds).\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost the queue resides in.\n"
                },
                "webhookUri": {
                    "type": "string",
                    "description": "A POST request will be made for each message in the queue to this endpoint.\n"
                }
            },
            "required": [
                "concurrency",
                "instanceId",
                "queue",
                "retryInterval",
                "vhost",
                "webhookUri"
            ],
            "inputProperties": {
                "concurrency": {
                    "type": "integer",
                    "description": "Max simultaneous requests to the endpoint.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The CloudAMQP instance ID.\n"
                },
                "queue": {
                    "type": "string",
                    "description": "A (durable) queue on your RabbitMQ instance.\n"
                },
                "retryInterval": {
                    "type": "integer",
                    "description": "How often we retry if your endpoint fails (in seconds).\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost the queue resides in.\n"
                },
                "webhookUri": {
                    "type": "string",
                    "description": "A POST request will be made for each message in the queue to this endpoint.\n"
                }
            },
            "requiredInputs": [
                "concurrency",
                "instanceId",
                "queue",
                "retryInterval",
                "vhost",
                "webhookUri"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Webhook resources.\n",
                "properties": {
                    "concurrency": {
                        "type": "integer",
                        "description": "Max simultaneous requests to the endpoint.\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance ID.\n"
                    },
                    "queue": {
                        "type": "string",
                        "description": "A (durable) queue on your RabbitMQ instance.\n"
                    },
                    "retryInterval": {
                        "type": "integer",
                        "description": "How often we retry if your endpoint fails (in seconds).\n"
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The vhost the queue resides in.\n"
                    },
                    "webhookUri": {
                        "type": "string",
                        "description": "A POST request will be made for each message in the queue to this endpoint.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "cloudamqp:index/getAccount:getAccount": {
            "description": "Use this data source to retrieve basic information about all instances available for an account. Uses the included apikey in provider configuration, to determine which account to read from.\n\n## Attributes reference\n\nAll attributes reference are computed\n\n* `id`          - The identifier for this data source. Set to `na` since there is no unique identifier.\n* `instances`   - An array of instances. Each `instances` block consists of the fields documented below.\n\n___\n\nThe `instances` block consist of\n\n* `id`      - The instance identifier.\n* `name`    - The name of the instance.\n* `plan`    - The subscription plan used for the instance.\n* `region`  - The region were the instanece is located in.\n* `tags`    - Optional tags set for the instance.\n\n## Dependency\n\nThis data source depends on apikey set in the provider configuration.\n",
            "outputs": {
                "description": "A collection of values returned by getAccount.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:index/getAccountInstance:getAccountInstance"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "instances",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getAccountVpcs:getAccountVpcs": {
            "description": "Use this data source to retrieve basic information about all standalone VPCs available for an account. Uses the included apikey in provider configuration to determine which account to read from.\n\n## Attributes reference\n\nAll attributes reference are computed\n\n* `id`      - The identifier for this data source. Set to `na` since there is no unique identifier.\n* `vpcs`    - An array of VPCs. Each `vpcs` block consists of the fields documented below.\n\n___\n\nThe `vpcs` block consist of\n\n* `id`          - The VPC identifier.\n* `name`        - The VPC instance name.\n* `region`      - The region the VPC is hosted in.\n* `subnet`      - The VPC subnet.\n* `tags`        - Optional tags set for the VPC.\n* `vpc_name`    - VPC name given when hosted at the cloud provider.\n\n## Dependency\n\nThis data source depends on apikey set in the provider configuration.\n",
            "outputs": {
                "description": "A collection of values returned by getAccountVpcs.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "vpcs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:index/getAccountVpcsVpc:getAccountVpcsVpc"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vpcs",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getAlarm:getAlarm": {
            "description": "Use this data source to retrieve information about default or created alarms. Either use `alarm_id` or `type` to retrieve the alarm.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst defaultCpuAlarm = cloudamqp.getAlarm({\n    instanceId: cloudamqp_instance.instance.id,\n    type: \"cpu\",\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\ndefault_cpu_alarm = cloudamqp.get_alarm(instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    type=\"cpu\")\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var defaultCpuAlarm = Output.Create(CloudAmqp.GetAlarm.InvokeAsync(new CloudAmqp.GetAlarmArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Type = \"cpu\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.LookupAlarm(ctx, \u0026GetAlarmArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t\tType:       pulumi.StringRef(\"cpu\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nAll attributes reference are computed\n\n* `id`                  - The identifier for this resource.\n* `enabled`             - Enable/disable status of the alarm.\n* `value_threshold`     - The value threshold that triggers the alarm.\n* `reminder_interval`   - The reminder interval (in seconds) to resend the alarm if not resolved. Set to 0 for no reminders.\n* `time_threshold`      - The time interval (in seconds) the `value_threshold` should be active before trigger an alarm.\n* `queue_regex`         - Regular expression for which queue to check.\n* `vhost_regex`         - Regular expression for which vhost to check\n* `recipients`          - Identifier for recipient to be notified.\n* `message_type`        - Message type `(total, unacked, ready)` used by queue alarm type.\n\nSpecific attribute for `disk` alarm\n\n* `value_calculation`   - Disk value threshold calculation, `(fixed, percentage)` of disk space remaining.\n\n## Dependency\n\nThis data source depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n\n## Alarm types\n\n`cpu, memory, disk, queue, connection, flow, consumer, netsplit, server_unreachable, notice`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAlarm.\n",
                "properties": {
                    "alarmId": {
                        "type": "integer",
                        "description": "The alarm identifier. Either use this or `type` to give `cloudamqp.Alarm` necessary information to retrieve the alarm.\n"
                    },
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance identifier.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The alarm type. Either use this or `alarm_id` to give `cloudamqp.Alarm` necessary information when retrieve the alarm. Supported alarm types\n"
                    },
                    "valueCalculation": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAlarm.\n",
                "properties": {
                    "alarmId": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "messageType": {
                        "type": "string"
                    },
                    "queueRegex": {
                        "type": "string"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "reminderInterval": {
                        "type": "integer"
                    },
                    "timeThreshold": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "valueCalculation": {
                        "type": "string"
                    },
                    "valueThreshold": {
                        "type": "integer"
                    },
                    "vhostRegex": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "enabled",
                    "instanceId",
                    "messageType",
                    "queueRegex",
                    "recipients",
                    "reminderInterval",
                    "timeThreshold",
                    "valueThreshold",
                    "vhostRegex",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getCredentials:getCredentials": {
            "description": "Use this data source to retrieve information about the credentials of the configured user in Rabbit MQ. Information is extracted from `cloudamqp_instance.instance.url`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst credentials = cloudamqp.getCredentials({\n    instanceId: cloudamqp_instance.instance.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\ncredentials = cloudamqp.get_credentials(instance_id=cloudamqp_instance[\"instance\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var credentials = Output.Create(CloudAmqp.GetCredentials.InvokeAsync(new CloudAmqp.GetCredentialsArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.GetCredentials(ctx, \u0026GetCredentialsArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nAll attributes reference are computed.\n\n* `id`          - The identifier for this data source.\n* `username`    - (Sensitive) The username for the configured user in Rabbit MQ.\n* `password`    - (Sensitive) The password used by the `username`.\n\n## Dependency\n\nThis data source depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCredentials.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance identifier.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCredentials.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "password": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "password",
                    "username",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getInstance:getInstance": {
            "description": "Use this data source to retrieve information about an already created CloudAMQP instance. In order to retrieve the correct information, the CoudAMQP instance identifier is needed.\n\n## Attributes reference\n\nAll attributes reference are computed\n\n* `id`          - The identifier for this resource.\n* `name`        - The name of the CloudAMQP instance.\n* `plan`        - The subscription plan for the CloudAMQP instance.\n* `region`      - The cloud platform and region that host the CloudAMQP instance, `{platform}::{region}`.\n* `vpc_id`      - ID of the VPC configured for the CloudAMQP instance.\n* `vpc_subnet`  - Dedicated VPC subnet configured for the CloudAMQP instance.\n* `nodes`       - Number of nodes in the cluster of the CloudAMQP instance.\n* `rmq_version` - The version of installed Rabbit MQ.\n* `url`         - (Sensitive) The AMQP URL (uses the internal hostname if the instance was created with VPC), used by clients to connect for pub/sub.\n* `apikey`      - (Sensitive) The API key to secondary API handing alarms, integration etc.\n* `tags`        - Tags the CloudAMQP instance with categories.\n* `host`        - The external hostname for the CloudAMQP instance.\n* `host_internal` - The internal hostname for the CloudAMQP instance.\n* `vhost`       - The virtual host configured in Rabbit MQ.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance identifier.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInstance.\n",
                "properties": {
                    "apikey": {
                        "type": "string"
                    },
                    "dedicated": {
                        "type": "boolean"
                    },
                    "host": {
                        "type": "string"
                    },
                    "hostInternal": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "noDefaultAlarms": {
                        "type": "boolean"
                    },
                    "nodes": {
                        "type": "integer"
                    },
                    "plan": {
                        "type": "string"
                    },
                    "ready": {
                        "type": "boolean"
                    },
                    "region": {
                        "type": "string"
                    },
                    "rmqVersion": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "url": {
                        "type": "string"
                    },
                    "vhost": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "integer"
                    },
                    "vpcSubnet": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apikey",
                    "dedicated",
                    "host",
                    "hostInternal",
                    "instanceId",
                    "name",
                    "noDefaultAlarms",
                    "nodes",
                    "plan",
                    "ready",
                    "region",
                    "rmqVersion",
                    "tags",
                    "url",
                    "vhost",
                    "vpcId",
                    "vpcSubnet",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getNodes:getNodes": {
            "description": "Use this data source to retrieve information about the node(s) created by CloudAMQP instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst nodes = cloudamqp.getNodes({\n    instanceId: cloudamqp_instance.instance.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nnodes = cloudamqp.get_nodes(instance_id=cloudamqp_instance[\"instance\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var nodes = Output.Create(CloudAmqp.GetNodes.InvokeAsync(new CloudAmqp.GetNodesArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.GetNodes(ctx, \u0026GetNodesArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nAll attributes reference are computed\n\n* `id`    - The identifier for this resource.\n* `nodes` - An array of node information. Each `nodes` block consists of the fields documented below.\n\n___\n\nThe `nodes` block consist of\n\n* `hostname`          - External hostname assigned to the node.\n* `name`              - Name of the node.\n* `running`           - Is the node running?\n* `rabbitmq_version`  - Currently configured Rabbit MQ version on the node.\n* `erlang_version`    - Currently used Erlanbg version on the node.\n* `hipe`              - Enable or disable High-performance Erlang.\n* `configured`        - Is the node configured?\n\n## Dependency\n\nThis data source depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNodes.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance identifier.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNodes.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:index/getNodesNode:getNodesNode"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "nodes",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getNotification:getNotification": {
            "description": "Use this data source to retrieve information about default or created recipients. The recipient will receive notifications assigned to an alarm that has triggered. To retrieve the recipient either use `recipient_id` or `name`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst defaultRecipient = cloudamqp.getNotification({\n    instanceId: cloudamqp_instance.instance.id,\n    name: \"default\",\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\ndefault_recipient = cloudamqp.get_notification(instance_id=cloudamqp_instance[\"instance\"][\"id\"],\n    name=\"default\")\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var defaultRecipient = Output.Create(CloudAmqp.GetNotification.InvokeAsync(new CloudAmqp.GetNotificationArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n            Name = \"default\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.LookupNotification(ctx, \u0026GetNotificationArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t\tName:       pulumi.StringRef(\"default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nAll attributes reference are computed\n\n* `id`    - The identifier for this resource.\n* `type`  - The type of the recipient.\n* `value` - The notification endpoint, where to send the notification.\n\n## Dependency\n\nThis data source depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNotification.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance identifier.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name set for the recipient.\n"
                    },
                    "recipientId": {
                        "type": "integer",
                        "description": "The recipient identifier.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNotification.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "recipientId": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "type",
                    "value",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getPlugins:getPlugins": {
            "description": "Use this data source to retrieve information about installed and available plugins for the CloudAMQP instance.\n\n⚠️  From our go API wrapper [v1.4.0](https://github.com/84codes/go-api/releases/tag/v1.4.0) there is support for multiple retries when requesting information about plugins. This was introduced to avoid `ReadPlugin error 400: Timeout talking to backend`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst plugins = cloudamqp.getPlugins({\n    instanceId: cloudamqp_instance.instance.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nplugins = cloudamqp.get_plugins(instance_id=cloudamqp_instance[\"instance\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var plugins = Output.Create(CloudAmqp.GetPlugins.InvokeAsync(new CloudAmqp.GetPluginsArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.GetPlugins(ctx, \u0026GetPluginsArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nAll attributes reference are computed\n\n* `id`      - The identifier for this resource.\n* `plugins` - An array of plugins. Each `plugins` block consists of the fields documented below.\n\n___\n\nThe `plugins` block consist of\n\n* `name`        - The type of the recipient.\n* `version`     - Rabbit MQ version that the plugins are shipped with.\n* `description` - Description of what the plugin does.\n* `enabled`     - Enable or disable information for the plugin.\n\n## Dependency\n\nThis data source depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlugins.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance identifier.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlugins.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "plugins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:index/getPluginsPlugin:getPluginsPlugin"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "plugins",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getPluginsCommunity:getPluginsCommunity": {
            "description": "Use this data source to retrieve information about available community plugins for the CloudAMQP instance.\n\n⚠️  From our go API wrapper [v1.5.0](https://github.com/84codes/go-api/releases/tag/v1.5.0) there is support for multiple retries when requesting information about community plugins. This was introduced to avoid `ReadPluginCommunity error 400: Timeout talking to backend`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst communitPlugins = cloudamqp.getPluginsCommunity({\n    instanceId: cloudamqp_instance.instance.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\ncommunit_plugins = cloudamqp.get_plugins_community(instance_id=cloudamqp_instance[\"instance\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var communitPlugins = Output.Create(CloudAmqp.GetPluginsCommunity.InvokeAsync(new CloudAmqp.GetPluginsCommunityArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.GetPluginsCommunity(ctx, \u0026GetPluginsCommunityArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nAll attributes reference are computed\n\n* `id`      - The identifier for this resource.\n* `plugins` - An array of community plugins. Each `plugins` block consists of the fields documented below.\n\n___\n\nThe `plugins` block consists of\n\n* `name`        - The type of the recipient.\n* `require`     - Min. required Rabbit MQ version to be used.\n* `description` - Description of what the plugin does.\n\n## Dependency\n\nThis data source depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPluginsCommunity.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance identifier.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPluginsCommunity.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "plugins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudamqp:index/getPluginsCommunityPlugin:getPluginsCommunityPlugin"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "plugins",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getUpgradableVersions:getUpgradableVersions": {
            "description": "Use this data source to retrieve information about possible upgradable versions for RabbitMQ and Erlang.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst versions = cloudamqp.getUpgradableVersions({\n    instanceId: cloudamqp_instance.instance.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nversions = cloudamqp.get_upgradable_versions(instance_id=cloudamqp_instance[\"instance\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var versions = Output.Create(CloudAmqp.GetUpgradableVersions.InvokeAsync(new CloudAmqp.GetUpgradableVersionsArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.GetUpgradableVersions(ctx, \u0026GetUpgradableVersionsArgs{\n\t\t\tInstanceId: cloudamqp_instance.Instance.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nAll attributes reference are computed\n\n* `new_rabbitmq_version`  - Possible upgradable version for RabbitMQ.\n* `new_erlang_version`    - Possible upgradable version for Erlang.\n\n## Dependency\n\nThis data source depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUpgradableVersions.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance identifier.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUpgradableVersions.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "newErlangVersion": {
                        "type": "string"
                    },
                    "newRabbitmqVersion": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "newErlangVersion",
                    "newRabbitmqVersion",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getVpcGcpInfo:getVpcGcpInfo": {
            "description": "Use this data source to retrieve information about VPC for a CloudAMQP instance hosted in GCP.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n    \u003cb\u003e\n      \u003ci\u003eAWS VPC peering pre v1.16.0\u003c/i\u003e\n    \u003c/b\u003e\n  \u003c/summary\u003e\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst vpcInfo = cloudamqp.getVpcGcpInfo({\n    instanceId: cloudamqp_instance.instance.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nvpc_info = cloudamqp.get_vpc_gcp_info(instance_id=cloudamqp_instance[\"instance\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var vpcInfo = Output.Create(CloudAmqp.GetVpcGcpInfo.InvokeAsync(new CloudAmqp.GetVpcGcpInfoArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.GetVpcGcpInfo(ctx, \u0026GetVpcGcpInfoArgs{\n\t\t\tInstanceId: pulumi.IntRef(cloudamqp_instance.Instance.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c/details\u003e\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n    \u003cb\u003e\n      \u003ci\u003eAWS VPC peering post v1.16.0 (Managed VPC)\u003c/i\u003e\n    \u003c/b\u003e\n  \u003c/summary\u003e\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst vpcInfo = cloudamqp.getVpcGcpInfo({\n    vpcId: cloudamqp_vpc.vpc.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nvpc_info = cloudamqp.get_vpc_gcp_info(vpc_id=cloudamqp_vpc[\"vpc\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var vpcInfo = Output.Create(CloudAmqp.GetVpcGcpInfo.InvokeAsync(new CloudAmqp.GetVpcGcpInfoArgs\n        {\n            VpcId = cloudamqp_vpc.Vpc.Id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.GetVpcGcpInfo(ctx, \u0026GetVpcGcpInfoArgs{\n\t\t\tVpcId: pulumi.StringRef(cloudamqp_vpc.Vpc.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c/details\u003e\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nAll attributes reference are computed\n\n* `id`                  - The identifier for this resource.\n* `name`                - The name of the VPC.\n* `vpc_subnet`          - Dedicated VPC subnet.\n* `network`             - VPC network uri.\n\n## Dependency\n\n*Pre v1.16.0*\nThis resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n\n*Post v1.16.0*\nThis resource depends on CloudAMQP managed VPC identifier, `cloudamqp_vpc.vpc.id` or instance identifier, `cloudamqp_instance.instance.id`.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcGcpInfo.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance identifier.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The managed VPC identifier.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcGcpInfo.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "network": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string"
                    },
                    "vpcSubnet": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "network",
                    "vpcSubnet",
                    "id"
                ]
            }
        },
        "cloudamqp:index/getVpcInfo:getVpcInfo": {
            "description": "Use this data source to retrieve information about VPC for a CloudAMQP instance.\n\nOnly available for CloudAMQP instances hosted in AWS.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n    \u003cb\u003e\n      \u003ci\u003eAWS VPC peering pre v1.16.0\u003c/i\u003e\n    \u003c/b\u003e\n  \u003c/summary\u003e\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst vpcInfo = cloudamqp.getVpcInfo({\n    instanceId: cloudamqp_instance.instance.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nvpc_info = cloudamqp.get_vpc_info(instance_id=cloudamqp_instance[\"instance\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var vpcInfo = Output.Create(CloudAmqp.GetVpcInfo.InvokeAsync(new CloudAmqp.GetVpcInfoArgs\n        {\n            InstanceId = cloudamqp_instance.Instance.Id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.GetVpcInfo(ctx, \u0026GetVpcInfoArgs{\n\t\t\tInstanceId: pulumi.IntRef(cloudamqp_instance.Instance.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c/details\u003e\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n    \u003cb\u003e\n      \u003ci\u003eAWS VPC peering post v1.16.0 (Managed VPC)\u003c/i\u003e\n    \u003c/b\u003e\n  \u003c/summary\u003e\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cloudamqp from \"@pulumi/cloudamqp\";\n\nconst vpcInfo = cloudamqp.getVpcInfo({\n    vpcId: cloudamqp_vpc.vpc.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_cloudamqp as cloudamqp\n\nvpc_info = cloudamqp.get_vpc_info(vpc_id=cloudamqp_vpc[\"vpc\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing CloudAmqp = Pulumi.CloudAmqp;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var vpcInfo = Output.Create(CloudAmqp.GetVpcInfo.InvokeAsync(new CloudAmqp.GetVpcInfoArgs\n        {\n            VpcId = cloudamqp_vpc.Vpc.Id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudamqp.GetVpcInfo(ctx, \u0026GetVpcInfoArgs{\n\t\t\tVpcId: pulumi.StringRef(cloudamqp_vpc.Vpc.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c/details\u003e\n\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nAll attributes reference are computed\n\n* `id`                  - The identifier for this resource.\n* `name`                - The name of the CloudAMQP instance.\n* `vpc_subnet`          - Dedicated VPC subnet.\n* `owner_id`            - AWS account identifier.\n* `security_group_id`   - AWS security group identifier.\n\n## Dependency\n\n*Pre v1.16.0*\nThis resource depends on CloudAMQP instance identifier, `cloudamqp_instance.instance.id`.\n\n*Post v1.16.0*\nThis resource depends on CloudAMQP managed VPC identifier, `cloudamqp_vpc.vpc.id` or instance identifier, `cloudamqp_instance.instance.id`.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcInfo.\n",
                "properties": {
                    "instanceId": {
                        "type": "integer",
                        "description": "The CloudAMQP instance identifier.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The managed VPC identifier.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcInfo.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "securityGroupId": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string"
                    },
                    "vpcSubnet": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "ownerId",
                    "securityGroupId",
                    "vpcSubnet",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "cloudamqp": "CloudAmqp"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-cloudamqp/sdk/v3/go/cloudamqp"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing CloudAMQP resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/cloudamqp/terraform-provider-cloudamqp)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-cloudamqp` repo](https://github.com/pulumi/pulumi-cloudamqp/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`cloudamqp/terraform-provider-cloudamqp` repo](https://github.com/cloudamqp/terraform-provider-cloudamqp/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/cloudamqp/terraform-provider-cloudamqp)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-cloudamqp` repo](https://github.com/pulumi/pulumi-cloudamqp/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`cloudamqp/terraform-provider-cloudamqp` repo](https://github.com/cloudamqp/terraform-provider-cloudamqp/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}